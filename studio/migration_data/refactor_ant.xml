<!-- Ant script for migrating Talend SVN repositories to Git repostiories for the Studio -->    
<project name="refactor_migration_data">
    
    <!-- refactor folders -->
    <property name="main.subfolder" value="main"/>
    <property name="main.plugins.subfolder" value="${main.subfolder}/plugins"/>
    <property name="main.features.subfolder" value="${main.subfolder}/features"/>
    <property name="test.subfolder" value="test"/>
    <property name="test.plugins.subfolder" value="${test.subfolder}/plugins"/>
    <property name="test.features.subfolder" value="${test.subfolder}/features"/>
    <property name="i18n.subfolder" value="i18n"/>
    <property name="i18n.plugins.subfolder" value="${i18n.subfolder}/plugins"/>
    <property name="i18n.features.subfolder" value="${i18n.subfolder}/features"/>
    <property name="sample.subfolder" value="sample"/>
    
    
<!-- = = = = = = = = = = = = = = = = =
          macrodef: refactor-final-repo
          1) refactor plugins and features into main, test, i18n plugins and features folders.
          2) commit the refactor       
          3) remove the empty commits   
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="refactor-final-repo">
        <attribute name="path" description="path of the git repository to refactor" />
        <sequential>
            <for param="branch" list="${list.of.branches}">
                <sequential>
                    <git argline="checkout @{branch}" dir="@{path}"/>
                    <!-- mv the sample projects -->
                    <git-mv-set dir="@{path}" dest="${sample.subfolder}">
                        <resset-elem>
                            <include name="test.mydistance"/>
                            <include name="test.myudi"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- mv the test projects -->
                    <git-mv-set dir="@{path}" dest="${test.subfolder}">
                        <resset-elem>
                            <include name="test.dq.datamart"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- mv the test bundles -->
                    <git-mv-set dir="@{path}" dest="${test.plugins.subfolder}">
                        <resset-elem>
                            <include name="*.test"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- mv the test features (I don't know how to identify test features) -->
                    <!-- mv the i18n plugins -->
                    <git-mv-set dir="@{path}" dest="${i18n.plugins.subfolder}">
                        <resset-elem>
                            <include name="*.nl"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- mv the i18n features (I don't know how to identify test features) -->
                    <!-- mv the main features -->
                    <git-mv-set dir="@{path}" dest="${main.features.subfolder}">
                        <resset-elem>
                            <include name="*-feature"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- mv the main plugins (the rest of all root folders -->
                    <git-mv-set dest="${main.plugins.subfolder}" dir="@{path}">
                        <resset-elem>
                            <include name="*"/>
                            <exclude name="${main.subfolder}"/>
                            <exclude name="${test.subfolder}"/>
                            <exclude name="${i18n.subfolder}"/>
                            <exclude name="${sample.subfolder}"/>
                        </resset-elem>
                    </git-mv-set>
                    <!-- commit only if status is not empty -->
                    <git argline="status -s" dir="@{path}" output="git.status"/>
                    <if>
                        <not>
                            <length string="${git.status}" trim="true" length="0" />                    
                        </not>
                        <then>
                            <git argline="commit -qam &quot;${commit.prefix} Refactor main,test and i18n plugins and features for branch @{branch}&quot;" dir="@{path}"/>
                        </then>
                    </if>
                </sequential>
            </for>
            <!--removes all empty commits-->
            <git argline="filter-branch -f --commit-filter 'git_commit_non_empty_tree &quot;$@&quot;' --tag-name-filter cat -- --all" dir="@{path}"/>
        </sequential>
    </macrodef>
   
</project>