diff --git a/org.talend.mdm.commons.core/src/org/talend/mdm/commmon/util/datamodel/management/BusinessConcept.java b/org.talend.mdm.commons.core/src/org/talend/mdm/commmon/util/datamodel/management/BusinessConcept.java
index 7eef689..15f8ee7 100644
--- a/org.talend.mdm.commons.core/src/org/talend/mdm/commmon/util/datamodel/management/BusinessConcept.java
+++ b/org.talend.mdm.commons.core/src/org/talend/mdm/commmon/util/datamodel/management/BusinessConcept.java
@@ -75,7 +75,7 @@ public class BusinessConcept {
     
     private Map<String, String> xpathDerivedSimpleTypeMap;
 
-    private List<String> keyFiledPaths;
+    private List<String> keyFieldPaths;
 
     // TODO: translate it from technique to business logic
     // annotations{label,access rules,foreign keys,workflow,schematron,lookup fields...}
@@ -175,7 +175,7 @@ public class BusinessConcept {
         subReuseTypeMap = new HashMap<String, ReusableType>();
         xpathTypeMap = new HashMap<String, String>();
         xpathDerivedSimpleTypeMap = new HashMap<String, String>();
-        keyFiledPaths = new ArrayList<String>();
+        keyFieldPaths = new ArrayList<String>();
     }
 
     public Map<String, String> getXpathDerivedSimpleTypeMap() {
@@ -279,7 +279,7 @@ public class BusinessConcept {
                                 StringBuilder keyPath = new StringBuilder()
                                         .append(this.getName()).append(prefix).append("/") //$NON-NLS-1$ //$NON-NLS-2$
                                         .append(xsxPath.getXPath().value);
-                                keyFiledPaths.add(keyPath.toString());
+                                keyFieldPaths.add(keyPath.toString());
                             }
                         }
                     }
@@ -390,8 +390,8 @@ public class BusinessConcept {
         }
     }
 
-    public List<String> getKeyFiledPaths() {
-        return keyFiledPaths;
+    public List<String> getKeyFieldPaths() {
+        return keyFieldPaths;
     }
 
 }
diff --git a/org.talend.mdm.commons.core/tests/org/talend/mdm/commmon/util/datamodel/management/BusinessConceptTest.java b/org.talend.mdm.commons.core/tests/org/talend/mdm/commmon/util/datamodel/management/BusinessConceptTest.java
index 6184ec4..37dc33b 100644
--- a/org.talend.mdm.commons.core/tests/org/talend/mdm/commmon/util/datamodel/management/BusinessConceptTest.java
+++ b/org.talend.mdm.commons.core/tests/org/talend/mdm/commmon/util/datamodel/management/BusinessConceptTest.java
@@ -53,7 +53,7 @@ public class BusinessConceptTest extends SchemaManagerAbstractTest {
         assertEquals("xsd:PICTURE", xpathDerivedSimpleTypeMap.get("Product/Picture"));
 
         // key path
-        List<String> keyPaths = bizConcept.getKeyFiledPaths();
+        List<String> keyPaths = bizConcept.getKeyFieldPaths();
         assertEquals(1, keyPaths.size());
         assertEquals("Product/Id", keyPaths.get(0));
 
diff --git a/org.talend.mdm.core.open/src/com/amalto/core/ejb/XtentisWSBean.java b/org.talend.mdm.core.open/src/com/amalto/core/ejb/XtentisWSBean.java
index 0f426f4..5473dbd 100644
--- a/org.talend.mdm.core.open/src/com/amalto/core/ejb/XtentisWSBean.java
+++ b/org.talend.mdm.core.open/src/com/amalto/core/ejb/XtentisWSBean.java
@@ -30,1710 +30,1529 @@ import com.amalto.core.delegator.BeanDelegatorContainer;
 import com.amalto.core.delegator.impl.DefaultXtentisWSDelegator;
 import com.amalto.core.webservice.*;
 
-
 /**
  * @author Bruno Grieder
  * 
- * @ejb.bean name="XtentisWS"   
- * 					display-name="The Xtentis"
- * 					description="The Xtentis WebServices"
- *					jndi-name="amalto/ws/xtentis" 
- * 					type="Stateless"
- *                  view-type="service-endpoint"
- *
- * @jboss.port-component 
- * 		auth-method = "BASIC" 
- * 		name = "XtentisPort" 
- * 		uri = "/talend/TalendPort"
- *                   
- *  @wsee.port-component 
- * 					description = "The Xtentis Port" 
- * 					display-name ="XtentisPort" 
- * 					name = "XtentisPort"				
+ * @ejb.bean name="XtentisWS" display-name="The Xtentis" description="The Xtentis WebServices"
+ * jndi-name="amalto/ws/xtentis" type="Stateless" view-type="service-endpoint"
+ * 
+ * @jboss.port-component auth-method = "BASIC" name = "XtentisPort" uri = "/talend/TalendPort"
  * 
+ * @wsee.port-component description = "The Xtentis Port" display-name ="XtentisPort" name = "XtentisPort"
  * 
- * Not generated by xdoclet:just an indication for the deployment descriptor but
- * we use the one generated by jwsdp
- * @ejb.interface service-endpoint-class =
- *                          "com.amalto.core.webservice.XtentisPort"
+ * 
+ * Not generated by xdoclet:just an indication for the deployment descriptor but we use the one generated by jwsdp
+ * @ejb.interface service-endpoint-class = "com.amalto.core.webservice.XtentisPort"
  * 
  */
-@SuppressWarnings({"deprecation", "unchecked"})
+@SuppressWarnings({ "deprecation", "unchecked" })
 public class XtentisWSBean implements SessionBean, XtentisPort {
 
-
-	/**
+    /**
 	 *  
 	 */
-	public XtentisWSBean() {
-		super();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
-	 */
-	public void setSessionContext(SessionContext ctx) throws EJBException, RemoteException {
-	}
+    public XtentisWSBean() {
+        super();
+    }
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see javax.ejb.essionBean#ejbRemove()
-	 */
-	public void ejbRemove() throws EJBException, RemoteException {
+    /*
+     * (non-Javadoc)
+     * 
+     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
+     */
+    @Override
+    public void setSessionContext(SessionContext ctx) throws EJBException, RemoteException {
+    }
 
-	}
+    /*
+     * (non-Javadoc)
+     * 
+     * @see javax.ejb.essionBean#ejbRemove()
+     */
+    @Override
+    public void ejbRemove() throws EJBException, RemoteException {
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see javax.ejb.SessionBean#ejbActivate()
-	 */
-	public void ejbActivate() throws EJBException, RemoteException {
-	}
+    }
 
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see javax.ejb.SessionBean#ejbPassivate()
-	 */
-	public void ejbPassivate() throws EJBException, RemoteException {
-	}
-
-	/**
-	 * Default create method
-	 * 
-	 * @throws CreateException
-	 * @ejb.create-method
-	 */
-	public void ejbCreate() throws CreateException {
-	}
+    /*
+     * (non-Javadoc)
+     * 
+     * @see javax.ejb.SessionBean#ejbActivate()
+     */
+    @Override
+    public void ejbActivate() throws EJBException, RemoteException {
+    }
 
-	/***************************************************************************
-	 * 
-	 * S E R V I C E S
-	 *  
-	 *	 **************************************************************************/
-
-	/***************************************************************************
-	 * Components Management
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSVersion getComponentVersion(WSGetComponentVersion wsGetComponentVersion) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getComponentVersion(wsGetComponentVersion);
-	}
-
-	
-	/***************************************************************************
-	 * Ping
-	 * **************************************************************************/
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString ping(WSPing wsPing) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().ping(wsPing);
-	}
-
-	/***************************************************************************
-	 * Logout
-	 * **************************************************************************/
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString logout(WSLogout logout) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().logout(logout);
-	}
-	
-
-	
-	/***************************************************************************
-	 * Initialize
-	 * **************************************************************************/
-	
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSInt initMDM(WSInitData initData) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().initMDM(initData);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSMDMConfig getMDMConfiguration() throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getMDMConfiguration();
-	}
-	/***************************************************************************
-	 * Data Model
-	 * **************************************************************************/
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSDataModel getDataModel(WSGetDataModel wsDataModelget)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getDataModel(wsDataModelget);
-    }
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSBoolean existsDataModel(WSExistsDataModel wsExistsDataModel)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsDataModel(wsExistsDataModel);
-    }
-    
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 * 	
-	 */       
-    public WSDataModelPKArray getDataModelPKs(WSRegexDataModelPKs regexp)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getDataModelPKs(regexp);
-    }
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSDataModelPK deleteDataModel(WSDeleteDataModel wsDeleteDataModel)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteDataModel(wsDeleteDataModel);
-    }	
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * 
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSDataModelPK putDataModel(WSPutDataModel wsDataModel)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putDataModel(wsDataModel);
-    }
- 
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * 
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */    
-	public WSString checkSchema(WSCheckSchema wsSchema) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().checkSchema(wsSchema);
-	}
-	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * 
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSString putBusinessConcept(WSPutBusinessConcept wsPutBusinessConcept)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putBusinessConcept(wsPutBusinessConcept);
-	}
-     
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * 
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSString putBusinessConceptSchema(WSPutBusinessConceptSchema wsPutBusinessConceptSchema)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putBusinessConceptSchema(wsPutBusinessConceptSchema);
-	}
-    
-	    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-    public WSString deleteBusinessConcept(
-            WSDeleteBusinessConcept wsDeleteBusinessConcept)
-            throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteBusinessConcept(wsDeleteBusinessConcept);
-    }
-    
-    
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */   
-    public WSStringArray getBusinessConcepts(
-            WSGetBusinessConcepts wsGetBusinessConcepts) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getBusinessConcepts(wsGetBusinessConcepts);
-    }
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */   
-    public WSConceptKey getBusinessConceptKey(
-            WSGetBusinessConceptKey wsGetBusinessConceptKey) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getBusinessConceptKey(wsGetBusinessConceptKey);
-    }
-	
-	/***************************************************************************
-	 * DataCluster
-	 * **************************************************************************/
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	   public WSDataCluster getDataCluster(WSGetDataCluster wsDataClusterGet)
-	    throws RemoteException {
-		   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getDataCluster(wsDataClusterGet);
-	    }
-	    
-		/**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */	
-		   public WSBoolean existsDataCluster(WSExistsDataCluster wsExistsDataCluster)
-		    throws RemoteException {
-			   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsDataCluster(wsExistsDataCluster);
-		    }
-			/**
-			 * @ejb.interface-method view-type = "service-endpoint"
-			 * @ejb.permission 
-			 * 	role-name = "authenticated"
-			 * 	view-type = "service-endpoint"
-			 */	
-			   public WSBoolean existsDBDataCluster(WSExistsDBDataCluster wsExistsDataCluster)
-			    throws RemoteException {
-				   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsDBDataCluster(wsExistsDataCluster);
-			    }
-
-
-		/**
-		* @ejb.interface-method view-type = "service-endpoint"
-		* @ejb.permission 
-		* 	role-name = "authenticated"
-		* 	view-type = "service-endpoint"
-		*/    
-	    public WSDataClusterPKArray getDataClusterPKs(WSRegexDataClusterPKs regexp)
-	    throws RemoteException {
-	    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getDataClusterPKs(regexp);
-	    }
-
-	    
-		/**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */
-	    public WSDataClusterPK deleteDataCluster(WSDeleteDataCluster wsDeleteDataCluster)
-	    throws RemoteException {
-	    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteDataCluster(wsDeleteDataCluster);
-	    }	
-	    
-		/**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */   
-	    public WSDataClusterPK putDataCluster(WSPutDataCluster wsDataCluster)
-	    throws RemoteException {
-	    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putDataCluster(wsDataCluster);
-	    }
-		/**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */   
-	    public WSBoolean putDBDataCluster(WSPutDBDataCluster wsDataCluster)
-	    throws RemoteException {
-	    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putDBDataCluster(wsDataCluster);
-	    }
-
-	    /**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */	
-		public WSStringArray getConceptsInDataCluster(WSGetConceptsInDataCluster wsGetConceptsInDataCluster) throws RemoteException {
-			return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getConceptsInDataCluster(wsGetConceptsInDataCluster);
-		}
-		
-
-		/**
-		 * @ejb.interface-method view-type = "service-endpoint"
-		 * @ejb.permission 
-		 * 	role-name = "authenticated"
-		 * 	view-type = "service-endpoint"
-		 */	
-		public WSConceptRevisionMap getConceptsInDataClusterWithRevisions(WSGetConceptsInDataClusterWithRevisions wsGetConceptsInDataClusterWithRevisions) throws RemoteException {
-			return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getConceptsInDataClusterWithRevisions(wsGetConceptsInDataClusterWithRevisions);
-		}
-
-	/***************************************************************************
-	 * View
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-   public WSView getView(WSGetView wsViewGet)
-    throws RemoteException {
-	   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getView(wsViewGet);
-    }
-
-   
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-  public WSBoolean existsView(WSExistsView wsExistsView)
-   throws RemoteException {
-	  return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsView(wsExistsView);
-   }
-   
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */    
+    /*
+     * (non-Javadoc)
+     * 
+     * @see javax.ejb.SessionBean#ejbPassivate()
+     */
+    @Override
+    public void ejbPassivate() throws EJBException, RemoteException {
+    }
+
+    /**
+     * Default create method
+     * 
+     * @throws CreateException
+     * @ejb.create-method
+     */
+    public void ejbCreate() throws CreateException {
+    }
+
+    /***************************************************************************
+     * 
+     * S E R V I C E S
+     * 
+     * **************************************************************************/
+
+    /***************************************************************************
+     * Components Management
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSVersion getComponentVersion(WSGetComponentVersion wsGetComponentVersion) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getComponentVersion(wsGetComponentVersion);
+    }
+
+    /***************************************************************************
+     * Ping
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString ping(WSPing wsPing) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().ping(wsPing);
+    }
+
+    /***************************************************************************
+     * Logout
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString logout(WSLogout logout) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().logout(logout);
+    }
+
+    /***************************************************************************
+     * Initialize
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSInt initMDM(WSInitData initData) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().initMDM(initData);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSMDMConfig getMDMConfiguration() throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMDMConfiguration();
+    }
+
+    /***************************************************************************
+     * Data Model
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataModel getDataModel(WSGetDataModel wsDataModelget) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataModel(wsDataModelget);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsDataModel(WSExistsDataModel wsExistsDataModel) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDataModel(wsExistsDataModel);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     * 
+     */
+    @Override
+    public WSDataModelPKArray getDataModelPKs(WSRegexDataModelPKs regexp) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataModelPKs(regexp);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataModelPK deleteDataModel(WSDeleteDataModel wsDeleteDataModel) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteDataModel(wsDeleteDataModel);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * 
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataModelPK putDataModel(WSPutDataModel wsDataModel) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDataModel(wsDataModel);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * 
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString checkSchema(WSCheckSchema wsSchema) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().checkSchema(wsSchema);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * 
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString putBusinessConcept(WSPutBusinessConcept wsPutBusinessConcept) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBusinessConcept(wsPutBusinessConcept);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * 
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString putBusinessConceptSchema(WSPutBusinessConceptSchema wsPutBusinessConceptSchema) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBusinessConceptSchema(wsPutBusinessConceptSchema);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString deleteBusinessConcept(WSDeleteBusinessConcept wsDeleteBusinessConcept) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteBusinessConcept(wsDeleteBusinessConcept);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getBusinessConcepts(WSGetBusinessConcepts wsGetBusinessConcepts) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConcepts(wsGetBusinessConcepts);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSConceptKey getBusinessConceptKey(WSGetBusinessConceptKey wsGetBusinessConceptKey) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConceptKey(wsGetBusinessConceptKey);
+    }
+
+    /***************************************************************************
+     * DataCluster
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataCluster getDataCluster(WSGetDataCluster wsDataClusterGet) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataCluster(wsDataClusterGet);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsDataCluster(WSExistsDataCluster wsExistsDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDataCluster(wsExistsDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsDBDataCluster(WSExistsDBDataCluster wsExistsDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDBDataCluster(wsExistsDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataClusterPKArray getDataClusterPKs(WSRegexDataClusterPKs regexp) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataClusterPKs(regexp);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataClusterPK deleteDataCluster(WSDeleteDataCluster wsDeleteDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteDataCluster(wsDeleteDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDataClusterPK putDataCluster(WSPutDataCluster wsDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDataCluster(wsDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean putDBDataCluster(WSPutDBDataCluster wsDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDBDataCluster(wsDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getConceptsInDataCluster(WSGetConceptsInDataCluster wsGetConceptsInDataCluster) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getConceptsInDataCluster(wsGetConceptsInDataCluster);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSConceptRevisionMap getConceptsInDataClusterWithRevisions(
+            WSGetConceptsInDataClusterWithRevisions wsGetConceptsInDataClusterWithRevisions) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getConceptsInDataClusterWithRevisions(wsGetConceptsInDataClusterWithRevisions);
+    }
+
+    /***************************************************************************
+     * View
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSView getView(WSGetView wsViewGet) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getView(wsViewGet);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsView(WSExistsView wsExistsView) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsView(wsExistsView);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSViewPKArray getViewPKs(WSGetViewPKs regexp) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getViewPKs(regexp);
-    }
-		    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSViewPK deleteView(WSDeleteView wsDeleteView)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteView(wsDeleteView);
-    }	
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */   
-    public WSViewPK putView(WSPutView wsView)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putView(wsView);
-    }
-
-	/***************************************************************************
-	 * Search
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray viewSearch(WSViewSearch wsViewSearch) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().viewSearch(wsViewSearch);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray xPathsSearch(WSXPathsSearch wsXPathsSearch) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().xPathsSearch(wsXPathsSearch);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray getItemsPivotIndex(WSGetItemsPivotIndex wsGetItemsPivotIndex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItemsPivotIndex(wsGetItemsPivotIndex);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray getChildrenItems(WSGetChildrenItems wsGetChildrenItems) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getChildrenItems(wsGetChildrenItems);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString count(WSCount wsCount) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().count(wsCount);
-	}
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getViewPKs(regexp);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSViewPK deleteView(WSDeleteView wsDeleteView) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteView(wsDeleteView);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSViewPK putView(WSPutView wsView) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putView(wsView);
+    }
 
-	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	public WSStringArray getItems(WSGetItems wsGetItems) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItems(wsGetItems);
-	}
-	
+    /***************************************************************************
+     * Search
+     * **************************************************************************/
     /**
      * @ejb.interface-method view-type = "service-endpoint"
      * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
      */
+    @Override
+    public WSStringArray viewSearch(WSViewSearch wsViewSearch) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().viewSearch(wsViewSearch);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray xPathsSearch(WSXPathsSearch wsXPathsSearch) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().xPathsSearch(wsXPathsSearch);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getItemsPivotIndex(WSGetItemsPivotIndex wsGetItemsPivotIndex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemsPivotIndex(wsGetItemsPivotIndex);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getChildrenItems(WSGetChildrenItems wsGetChildrenItems) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getChildrenItems(wsGetChildrenItems);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString count(WSCount wsCount) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().count(wsCount);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getItems(WSGetItems wsGetItems) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItems(wsGetItems);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSStringArray getItemsSort(WSGetItemsSort wsGetItemsSort) throws RemoteException {
-        return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItemsSort(wsGetItemsSort);
-    }
-    	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	public WSItemPKsByCriteriaResponse getItemPKsByCriteria(WSGetItemPKsByCriteria wsGetItemPKsByCriteria) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItemPKsByCriteria(wsGetItemPKsByCriteria);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	public WSItemPKsByCriteriaResponse getItemPKsByFullCriteria(WSGetItemPKsByFullCriteria wsGetItemPKsByFullCriteria) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItemPKsByFullCriteria(wsGetItemPKsByFullCriteria);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItem getItem(WSGetItem wsGetItem) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItem(wsGetItem);
-	}	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsItem(WSExistsItem wsExistsItem) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsItem(wsExistsItem);
-	}	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray quickSearch(WSQuickSearch wsQuickSearch) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().quickSearch(wsQuickSearch);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */		
-	public WSString getBusinessConceptValue(
-			WSGetBusinessConceptValue wsGetBusinessConceptValue)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getBusinessConceptValue(wsGetBusinessConceptValue);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	public WSStringArray getFullPathValues(WSGetFullPathValues wsGetFullPathValues)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getFullPathValues(wsGetFullPathValues);
-	}
-
-
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putItem(wsPutItem);
-	}	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPKArray putItemArray(WSPutItemArray wsPutItemArray) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putItemArray(wsPutItemArray);
-	}
-	
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPKArray putItemWithReportArray(com.amalto.core.webservice.WSPutItemWithReportArray wsPutItemWithReportArray) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putItemWithReportArray(wsPutItemWithReportArray);
-	}	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPK putItemWithReport(com.amalto.core.webservice.WSPutItemWithReport wsPutItemWithReport) throws RemoteException {
-		
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putItemWithReport(wsPutItemWithReport);
-		
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPK putItemWithCustomReport(com.amalto.core.webservice.WSPutItemWithCustomReport wsPutItemWithCustomReport) throws RemoteException{
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putItemWithCustomReport(wsPutItemWithCustomReport);
-		
-	}
-    
-	/***************************************************************************
-	 *Extract Items
-	 * **************************************************************************/
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSPipeline extractUsingTransformer(WSExtractUsingTransformer wsExtractUsingTransformer) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().extractUsingTransformer(wsExtractUsingTransformer);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSPipeline extractUsingTransformerThruView(WSExtractUsingTransformerThruView wsExtractUsingTransformerThruView) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().extractUsingTransformerThruView(wsExtractUsingTransformerThruView);
-	}
-
-	/***************************************************************************
-	 * Delete Items
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPK deleteItem(WSDeleteItem wsDeleteItem)
-	throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteItem(wsDeleteItem);
-	}    
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-	public WSString deleteItemWithReport(WSDeleteItemWithReport wsDeleteItem)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteItemWithReport(wsDeleteItem);
-	}
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSInt deleteItems(WSDeleteItems wsDeleteItems)
-	throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteItems(wsDeleteItems);
-	} 
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSDroppedItemPK dropItem(WSDropItem wsDropItem)
-		throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().dropItem(wsDropItem);
-	}
-	
-	
-	/***************************************************************************
-	 * DirectQuery
-	 * **************************************************************************/
-    /**
-     * @ejb.interface-method view-type = "service-endpoint"
-     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
-     */
-	public WSStringArray runQuery(WSRunQuery wsRunQuery) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().runQuery(wsRunQuery);
-	}    
-	
-	
-
-	/***************************************************************************
-	 * SERVICES
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSServiceGetDocument getServiceDocument(WSString serviceName) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getServiceDocument(serviceName);
-	}
-
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString getServiceConfiguration(WSServiceGetConfiguration wsGetConfiguration) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getServiceConfiguration(wsGetConfiguration);
-	}
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSCheckServiceConfigResponse checkServiceConfiguration(WSCheckServiceConfigRequest serviceName) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().checkServiceConfiguration(serviceName);
-	}
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString putServiceConfiguration(WSServicePutConfiguration wsPutConfiguration) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putServiceConfiguration(wsPutConfiguration);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().serviceAction(wsServiceAction);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 	 
-	 *  	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSServicesList getServicesList(WSGetServicesList wsGetServicesList) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getServicesList(wsGetServicesList);
-	}
-	
-	
-	
-	/***************************************************************************
-	 * Ping - test that we can authenticate by getting a server response
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString ping()	throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().ping();
-	}    
-	
-    	
-
-	/***************************************************************************
-	 * Xtentis JCA Connector support
-	 * **************************************************************************/
-
-	private transient ConnectionFactory cxFactory = null;
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSConnectorInteractionResponse connectorInteraction(WSConnectorInteraction wsConnectorInteraction) throws RemoteException {
-		// This one does not call an EJB
-		
-		WSConnectorInteractionResponse response = new WSConnectorInteractionResponse();
-		Connection conx = null;
-		try {
-
-			String JNDIName = wsConnectorInteraction.getJNDIName();
-			conx = getConnection(JNDIName);
-			
-			Interaction interaction = conx.createInteraction();
-	    	InteractionSpecImpl interactionSpec = new InteractionSpecImpl();
-	    	
-			MappedRecord recordIn = new RecordFactoryImpl().createMappedRecord(RecordFactoryImpl.RECORD_IN);
-			
-			WSConnectorFunction cf = wsConnectorInteraction.getFunction();
-			if ((WSConnectorFunction.GET_STATUS).equals(cf)) {
-				interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_GET_STATUS);
-			} else 	if ((WSConnectorFunction.PULL).equals(cf)) {
-				interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PULL);
-			} else 	if ((WSConnectorFunction.PUSH).equals(cf)) {
-				interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PUSH);
-			} else 	if ((WSConnectorFunction.START).equals(cf)) {
-				interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_START);
-			} else 	if ((WSConnectorFunction.STOP).equals(cf)) {
-				interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_STOP);
-			}
-			
-			recordIn.put(RecordFactoryImpl.PARAMS_HASHMAP_IN, getMapFromKeyValues(wsConnectorInteraction.getParameters()));
-						
-			MappedRecord recordOut = (MappedRecord)interaction.execute(interactionSpec, recordIn);
-
-			String code = (String)recordOut.get(RecordFactoryImpl.STATUS_CODE_OUT);
-			HashMap map = (HashMap)recordOut.get(RecordFactoryImpl.PARAMS_HASHMAP_OUT);
-			
-			if ("OK".equals(code)) {
-				response.setCode(WSConnectorResponseCode.OK);
-			} else if ("STOPPED".equals(code)) {
-				response.setCode(WSConnectorResponseCode.STOPPED);
-			} else if ("ERROR".equals(code)) {
-				response.setCode(WSConnectorResponseCode.ERROR);
-			} else {
-				throw new RemoteException("Unknown code: "+code);
-			}
-			response.setParameters(getKeyValuesFromMap(map));
-			
-		} catch (ResourceException e) {
-			throw new RemoteException(e.getLocalizedMessage());
-		} catch (Exception e) {
-			throw new RemoteException(e.getClass().getName()+": "+e.getLocalizedMessage());
-		} finally {
-			try {conx.close();} catch (Exception cx) {
-				org.apache.log4j.Category.getInstance(this.getClass()).debug("connectorInteraction() Connection close exception: "+cx.getLocalizedMessage());
-			}
-		}
-		return response;		
-		
-	}
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemsSort(wsGetItemsSort);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPKsByCriteriaResponse getItemPKsByCriteria(WSGetItemPKsByCriteria wsGetItemPKsByCriteria) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemPKsByCriteria(wsGetItemPKsByCriteria);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPKsByCriteriaResponse getItemPKsByFullCriteria(WSGetItemPKsByFullCriteria wsGetItemPKsByFullCriteria)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemPKsByFullCriteria(wsGetItemPKsByFullCriteria);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItem getItem(WSGetItem wsGetItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItem(wsGetItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsItem(WSExistsItem wsExistsItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsItem(wsExistsItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray quickSearch(WSQuickSearch wsQuickSearch) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().quickSearch(wsQuickSearch);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString getBusinessConceptValue(WSGetBusinessConceptValue wsGetBusinessConceptValue) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConceptValue(wsGetBusinessConceptValue);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getFullPathValues(WSGetFullPathValues wsGetFullPathValues) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getFullPathValues(wsGetFullPathValues);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItem(wsPutItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPKArray putItemArray(WSPutItemArray wsPutItemArray) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemArray(wsPutItemArray);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPKArray putItemWithReportArray(com.amalto.core.webservice.WSPutItemWithReportArray wsPutItemWithReportArray)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithReportArray(wsPutItemWithReportArray);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPK putItemWithReport(com.amalto.core.webservice.WSPutItemWithReport wsPutItemWithReport) throws RemoteException {
+
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithReport(wsPutItemWithReport);
+
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPK putItemWithCustomReport(com.amalto.core.webservice.WSPutItemWithCustomReport wsPutItemWithCustomReport)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithCustomReport(wsPutItemWithCustomReport);
+
+    }
+
+    /***************************************************************************
+     * Extract Items
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSPipeline extractUsingTransformer(WSExtractUsingTransformer wsExtractUsingTransformer) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().extractUsingTransformer(wsExtractUsingTransformer);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSPipeline extractUsingTransformerThruView(WSExtractUsingTransformerThruView wsExtractUsingTransformerThruView)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .extractUsingTransformerThruView(wsExtractUsingTransformerThruView);
+    }
+
+    /***************************************************************************
+     * Delete Items
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPK deleteItem(WSDeleteItem wsDeleteItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItem(wsDeleteItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString deleteItemWithReport(WSDeleteItemWithReport wsDeleteItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItemWithReport(wsDeleteItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSInt deleteItems(WSDeleteItems wsDeleteItems) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItems(wsDeleteItems);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDroppedItemPK dropItem(WSDropItem wsDropItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().dropItem(wsDropItem);
+    }
+
+    /***************************************************************************
+     * DirectQuery
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray runQuery(WSRunQuery wsRunQuery) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().runQuery(wsRunQuery);
+    }
+
+    /***************************************************************************
+     * SERVICES
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSServiceGetDocument getServiceDocument(WSString serviceName) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServiceDocument(serviceName);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString getServiceConfiguration(WSServiceGetConfiguration wsGetConfiguration) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServiceConfiguration(wsGetConfiguration);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSCheckServiceConfigResponse checkServiceConfiguration(WSCheckServiceConfigRequest serviceName) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().checkServiceConfiguration(serviceName);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString putServiceConfiguration(WSServicePutConfiguration wsPutConfiguration) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putServiceConfiguration(wsPutConfiguration);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().serviceAction(wsServiceAction);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSServicesList getServicesList(WSGetServicesList wsGetServicesList) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServicesList(wsGetServicesList);
+    }
+
+    /***************************************************************************
+     * Ping - test that we can authenticate by getting a server response
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    public WSString ping() throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().ping();
+    }
+
+    /***************************************************************************
+     * Xtentis JCA Connector support
+     * **************************************************************************/
+
+    private transient ConnectionFactory cxFactory = null;
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSConnectorInteractionResponse connectorInteraction(WSConnectorInteraction wsConnectorInteraction)
+            throws RemoteException {
+        // This one does not call an EJB
+
+        WSConnectorInteractionResponse response = new WSConnectorInteractionResponse();
+        Connection conx = null;
+        try {
+
+            String JNDIName = wsConnectorInteraction.getJNDIName();
+            conx = getConnection(JNDIName);
+
+            Interaction interaction = conx.createInteraction();
+            InteractionSpecImpl interactionSpec = new InteractionSpecImpl();
+
+            MappedRecord recordIn = new RecordFactoryImpl().createMappedRecord(RecordFactoryImpl.RECORD_IN);
+
+            WSConnectorFunction cf = wsConnectorInteraction.getFunction();
+            if ((WSConnectorFunction.GET_STATUS).equals(cf)) {
+                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_GET_STATUS);
+            } else if ((WSConnectorFunction.PULL).equals(cf)) {
+                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PULL);
+            } else if ((WSConnectorFunction.PUSH).equals(cf)) {
+                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PUSH);
+            } else if ((WSConnectorFunction.START).equals(cf)) {
+                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_START);
+            } else if ((WSConnectorFunction.STOP).equals(cf)) {
+                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_STOP);
+            }
+
+            recordIn.put(RecordFactoryImpl.PARAMS_HASHMAP_IN, getMapFromKeyValues(wsConnectorInteraction.getParameters()));
+
+            MappedRecord recordOut = (MappedRecord) interaction.execute(interactionSpec, recordIn);
+
+            String code = (String) recordOut.get(RecordFactoryImpl.STATUS_CODE_OUT);
+            HashMap map = (HashMap) recordOut.get(RecordFactoryImpl.PARAMS_HASHMAP_OUT);
+
+            if ("OK".equals(code)) {
+                response.setCode(WSConnectorResponseCode.OK);
+            } else if ("STOPPED".equals(code)) {
+                response.setCode(WSConnectorResponseCode.STOPPED);
+            } else if ("ERROR".equals(code)) {
+                response.setCode(WSConnectorResponseCode.ERROR);
+            } else {
+                throw new RemoteException("Unknown code: " + code);
+            }
+            response.setParameters(getKeyValuesFromMap(map));
+
+        } catch (ResourceException e) {
+            throw new RemoteException(e.getLocalizedMessage());
+        } catch (Exception e) {
+            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
+        } finally {
+            try {
+                conx.close();
+            } catch (Exception cx) {
+                org.apache.log4j.Category.getInstance(this.getClass()).debug(
+                        "connectorInteraction() Connection close exception: " + cx.getLocalizedMessage());
+            }
+        }
+        return response;
+
+    }
 
     private Connection getConnection(String JNDIName) throws RemoteException {
-    	try {
-    		if (cxFactory == null)
-    			cxFactory = (ConnectionFactory)(new InitialContext()).lookup(JNDIName);
-	    	return cxFactory.getConnection();
-    	} catch (Exception e) {
-    		throw new RemoteException(e.getClass().getName()+": "+e.getLocalizedMessage());
-    	}
-    }
-    
-	private HashMap getMapFromKeyValues(WSBase64KeyValue[] params) throws RemoteException{
-		try {
-	    	HashMap map = new HashMap();
-	    	if (params != null) {
-				for (int i = 0; i < params.length; i++) {
-					if (params[i]!=null) {
-						String key = params[i].getKey();
-						byte[] bytes = (new BASE64Decoder()).decodeBuffer(params[i].getBase64StringValue());
-						if (bytes!=null) {
-							ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
-							ObjectInputStream ois = new ObjectInputStream(bais);
-							map.put(key, ois.readObject());
-						} else {
-							map.put(key, null);
-						}
-					}
-				}
-	    	}
-			return map;
-		} catch (Exception e) {
-			throw new RemoteException(e.getClass().getName()+": "+e.getLocalizedMessage());
-		}    	
-    }
-    
-
-	private WSBase64KeyValue[] getKeyValuesFromMap(HashMap params) throws RemoteException{    	
-    	try {
-    		if (params==null) return null;
-    		WSBase64KeyValue[] keyValues = new WSBase64KeyValue[params.size()];
-    		Set keys = params.keySet();
-    		int i=0;
-    		for (Iterator iter = keys.iterator(); iter.hasNext(); ) {
-				String key = (String) iter.next();
-				Object value = params.get(key);
-				if (value!=null) {
-					ByteArrayOutputStream baos = new ByteArrayOutputStream();
-					ObjectOutputStream oos = new ObjectOutputStream(baos);
-					oos.writeObject(value);
-					String base64Value = Base64Encoder.encode(baos.toByteArray());
-					keyValues[i] = new WSBase64KeyValue();
-					keyValues[i].setKey(key);
-					keyValues[i].setBase64StringValue(base64Value);
-					i++;
-				}
-			}
-			return keyValues;
-		} catch (Exception e) {
-			throw new RemoteException(e.getClass().getName()+": "+e.getLocalizedMessage());
-		}    	
-    }
-    
-    
-
-	/***************************************************************************
-	 * Stored Procedure
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+        try {
+            if (cxFactory == null) {
+                cxFactory = (ConnectionFactory) (new InitialContext()).lookup(JNDIName);
+            }
+            return cxFactory.getConnection();
+        } catch (Exception e) {
+            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
+        }
+    }
+
+    private HashMap getMapFromKeyValues(WSBase64KeyValue[] params) throws RemoteException {
+        try {
+            HashMap map = new HashMap();
+            if (params != null) {
+                for (WSBase64KeyValue param : params) {
+                    if (param != null) {
+                        String key = param.getKey();
+                        byte[] bytes = (new BASE64Decoder()).decodeBuffer(param.getBase64StringValue());
+                        if (bytes != null) {
+                            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+                            ObjectInputStream ois = new ObjectInputStream(bais);
+                            map.put(key, ois.readObject());
+                        } else {
+                            map.put(key, null);
+                        }
+                    }
+                }
+            }
+            return map;
+        } catch (Exception e) {
+            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
+        }
+    }
+
+    private WSBase64KeyValue[] getKeyValuesFromMap(HashMap params) throws RemoteException {
+        try {
+            if (params == null) {
+                return null;
+            }
+            WSBase64KeyValue[] keyValues = new WSBase64KeyValue[params.size()];
+            Set keys = params.keySet();
+            int i = 0;
+            for (Iterator iter = keys.iterator(); iter.hasNext();) {
+                String key = (String) iter.next();
+                Object value = params.get(key);
+                if (value != null) {
+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                    ObjectOutputStream oos = new ObjectOutputStream(baos);
+                    oos.writeObject(value);
+                    String base64Value = Base64Encoder.encode(baos.toByteArray());
+                    keyValues[i] = new WSBase64KeyValue();
+                    keyValues[i].setKey(key);
+                    keyValues[i].setBase64StringValue(base64Value);
+                    i++;
+                }
+            }
+            return keyValues;
+        } catch (Exception e) {
+            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
+        }
+    }
+
+    /***************************************************************************
+     * Stored Procedure
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSStoredProcedurePK deleteStoredProcedure(WSDeleteStoredProcedure wsStoredProcedureDelete) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteStoredProcedure(wsStoredProcedureDelete);
-	}
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStringArray executeStoredProcedure(WSExecuteStoredProcedure wsExecuteStoredProcedure) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().executeStoredProcedure(wsExecuteStoredProcedure);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStoredProcedure getStoredProcedure(WSGetStoredProcedure wsGetStoredProcedure) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getStoredProcedure(wsGetStoredProcedure);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsStoredProcedure(WSExistsStoredProcedure wsExistsStoredProcedure) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsStoredProcedure(wsExistsStoredProcedure);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStoredProcedurePKArray getStoredProcedurePKs(WSRegexStoredProcedure regex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getStoredProcedurePKs(regex);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSStoredProcedurePK putStoredProcedure(WSPutStoredProcedure wsStoredProcedure) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putStoredProcedure(wsStoredProcedure);
-	}
- 	
-	/***************************************************************************
-	 * Menu
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteStoredProcedure(wsStoredProcedureDelete);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray executeStoredProcedure(WSExecuteStoredProcedure wsExecuteStoredProcedure) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().executeStoredProcedure(wsExecuteStoredProcedure);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStoredProcedure getStoredProcedure(WSGetStoredProcedure wsGetStoredProcedure) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getStoredProcedure(wsGetStoredProcedure);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsStoredProcedure(WSExistsStoredProcedure wsExistsStoredProcedure) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsStoredProcedure(wsExistsStoredProcedure);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStoredProcedurePKArray getStoredProcedurePKs(WSRegexStoredProcedure regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getStoredProcedurePKs(regex);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStoredProcedurePK putStoredProcedure(WSPutStoredProcedure wsStoredProcedure) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putStoredProcedure(wsStoredProcedure);
+    }
+
+    /***************************************************************************
+     * Menu
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSMenuPK deleteMenu(WSDeleteMenu wsMenuDelete) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteMenu(wsMenuDelete);
-	}
- 	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSMenu getMenu(WSGetMenu wsGetMenu) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getMenu(wsGetMenu);
-	}
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteMenu(wsMenuDelete);
+    }
 
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSMenu getMenu(WSGetMenu wsGetMenu) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMenu(wsGetMenu);
+    }
 
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsMenu(WSExistsMenu wsExistsMenu) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsMenu(wsExistsMenu);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSMenuPKArray getMenuPKs(WSGetMenuPKs regex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getMenuPKs(regex);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSMenuPK putMenu(WSPutMenu wsMenu) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putMenu(wsMenu);
-	}
-
-
-	/***************************************************************************
-	 * BackgroundJob
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 */    
-	/*
-	public WSBackgroundJobPK deleteBackgroundJob(WSBackgroundJobDelete wsjobpk)
-			throws RemoteException {
-		try {
-			BackgroundJobPK cpk = XtentisUtil.getLocalHome().create().deleteBackgroundJob(new BackgroundJobPK(wsjobpk.getPk()));
-			WSBackgroundJobPK wspk = new WSBackgroundJobPK();
-			wspk.setPk(cpk.getId());
-			return wspk;
-		} catch (Exception e) {
-			throw new EJBException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
-		}
-	}
-	*/
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-   public WSBackgroundJob getBackgroundJob(WSGetBackgroundJob wsBackgroundJobGet)
-    throws RemoteException {
-	   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getBackgroundJob(wsBackgroundJobGet);
-    }
-	    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */    
-    public WSBackgroundJobPKArray findBackgroundJobPKs(WSFindBackgroundJobPKs wsFindBackgroundJobPKs)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().findBackgroundJobPKs(wsFindBackgroundJobPKs);
-    }
-
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */    
-	public WSBackgroundJobPK putBackgroundJob(WSPutBackgroundJob wsputjob)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putBackgroundJob(wsputjob);
-	}
-
-	/***************************************************************************
-	 * Universe
-	 * **************************************************************************/
-		
-    /**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-     */	
-	public WSUniverse getCurrentUniverse(WSGetCurrentUniverse wsGetCurrentUniverse) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getCurrentUniverse(wsGetCurrentUniverse);
-	}
-
-
-	/***************************************************************************
-	 * 
-	 * 
-	 *   D E P R E C A T E D    S T U F F
-	 * 
-	 * 
-	 * **************************************************************************/
-	
-	
-	
-	/***************************************************************************
-	 * Transformer DEPRECATED
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsMenu(WSExistsMenu wsExistsMenu) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsMenu(wsExistsMenu);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSMenuPKArray getMenuPKs(WSGetMenuPKs regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMenuPKs(regex);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSMenuPK putMenu(WSPutMenu wsMenu) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putMenu(wsMenu);
+    }
+
+    /***************************************************************************
+     * BackgroundJob
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     */
+    /*
+     * public WSBackgroundJobPK deleteBackgroundJob(WSBackgroundJobDelete wsjobpk) throws RemoteException { try {
+     * BackgroundJobPK cpk = XtentisUtil.getLocalHome().create().deleteBackgroundJob(new
+     * BackgroundJobPK(wsjobpk.getPk())); WSBackgroundJobPK wspk = new WSBackgroundJobPK(); wspk.setPk(cpk.getId());
+     * return wspk; } catch (Exception e) { throw new EJBException((e.getCause() == null ? e.getLocalizedMessage() :
+     * e.getCause().getLocalizedMessage())); } }
+     */
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJob getBackgroundJob(WSGetBackgroundJob wsBackgroundJobGet) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBackgroundJob(wsBackgroundJobGet);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJobPKArray findBackgroundJobPKs(WSFindBackgroundJobPKs wsFindBackgroundJobPKs) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().findBackgroundJobPKs(wsFindBackgroundJobPKs);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJobPK putBackgroundJob(WSPutBackgroundJob wsputjob) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBackgroundJob(wsputjob);
+    }
+
+    /***************************************************************************
+     * Universe
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSUniverse getCurrentUniverse(WSGetCurrentUniverse wsGetCurrentUniverse) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getCurrentUniverse(wsGetCurrentUniverse);
+    }
+
+    /***************************************************************************
+     * 
+     * 
+     * D E P R E C A T E D S T U F F
+     * 
+     * 
+     * **************************************************************************/
+
+    /***************************************************************************
+     * Transformer DEPRECATED
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSTransformerPK deleteTransformer(WSDeleteTransformer wsTransformerDelete) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteTransformer(wsTransformerDelete);
-	}
-    
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteTransformer(wsTransformerDelete);
+    }
 
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformer getTransformer(WSGetTransformer wsGetTransformer) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformer(wsGetTransformer);
+    }
 
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformer getTransformer(WSGetTransformer wsGetTransformer) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformer(wsGetTransformer);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsTransformer(WSExistsTransformer wsExistsTransformer) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsTransformer(wsExistsTransformer);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerPKArray getTransformerPKs(WSGetTransformerPKs regex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerPKs(regex);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerPK putTransformer(WSPutTransformer wsTransformer) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putTransformer(wsTransformer);
-	}
-    
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsTransformer(WSExistsTransformer wsExistsTransformer) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformer(wsExistsTransformer);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerPKArray getTransformerPKs(WSGetTransformerPKs regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerPKs(regex);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerPK putTransformer(WSPutTransformer wsTransformer) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putTransformer(wsTransformer);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSPipeline processBytesUsingTransformer(WSProcessBytesUsingTransformer wsProjectBytes) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().processBytesUsingTransformer(wsProjectBytes);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSPipeline processFileUsingTransformer(WSProcessFileUsingTransformer wsProcessFile) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().processFileUsingTransformer(wsProcessFile);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBackgroundJobPK processBytesUsingTransformerAsBackgroundJob(WSProcessBytesUsingTransformerAsBackgroundJob wsProcessBytesUsingTransformerAsBackgroundJob) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().processBytesUsingTransformerAsBackgroundJob(wsProcessBytesUsingTransformerAsBackgroundJob);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBackgroundJobPK processFileUsingTransformerAsBackgroundJob(WSProcessFileUsingTransformerAsBackgroundJob wsProcessFileUsingTransformerAsBackgroundJob) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().processFileUsingTransformerAsBackgroundJob(wsProcessFileUsingTransformerAsBackgroundJob);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSDroppedItemPKArray findAllDroppedItemsPKs(WSFindAllDroppedItemsPKs regex)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().findAllDroppedItemsPKs(regex);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSDroppedItem loadDroppedItem(WSLoadDroppedItem wsLoadDroppedItem)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().loadDroppedItem(wsLoadDroppedItem);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSItemPK recoverDroppedItem(WSRecoverDroppedItem wsRecoverDroppedItem)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().recoverDroppedItem(wsRecoverDroppedItem);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSDroppedItemPK removeDroppedItem(WSRemoveDroppedItem wsRemoveDroppedItem)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().removeDroppedItem(wsRemoveDroppedItem);
-	}
-
-	/***************************************************************************
-	 * RoutingRule
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-   public WSRoutingRule getRoutingRule(WSGetRoutingRule wsRoutingRuleGet)
-    throws RemoteException {
-	   return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getRoutingRule(wsRoutingRuleGet);
-    }
-  
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-	  public WSBoolean existsRoutingRule(WSExistsRoutingRule wsExistsRoutingRule)
-	   throws RemoteException {
-		  return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsRoutingRule(wsExistsRoutingRule);
-	   }	    
-
-		    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-    public WSRoutingRulePK deleteRoutingRule(WSDeleteRoutingRule wsDeleteRoutingRule)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteRoutingRule(wsDeleteRoutingRule);
-    }	
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */   
-    public WSRoutingRulePK putRoutingRule(WSPutRoutingRule wsRoutingRule)
-    throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putRoutingRule(wsRoutingRule);
-    }
-    
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingRulePKArray getRoutingRulePKs(WSGetRoutingRulePKs regex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getRoutingRulePKs(regex);
-	}
-
-	/***************************************************************************
-	 * TransformerV2
-	 * **************************************************************************/
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().processBytesUsingTransformer(wsProjectBytes);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSPipeline processFileUsingTransformer(WSProcessFileUsingTransformer wsProcessFile) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().processFileUsingTransformer(wsProcessFile);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJobPK processBytesUsingTransformerAsBackgroundJob(
+            WSProcessBytesUsingTransformerAsBackgroundJob wsProcessBytesUsingTransformerAsBackgroundJob) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .processBytesUsingTransformerAsBackgroundJob(wsProcessBytesUsingTransformerAsBackgroundJob);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJobPK processFileUsingTransformerAsBackgroundJob(
+            WSProcessFileUsingTransformerAsBackgroundJob wsProcessFileUsingTransformerAsBackgroundJob) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .processFileUsingTransformerAsBackgroundJob(wsProcessFileUsingTransformerAsBackgroundJob);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDroppedItemPKArray findAllDroppedItemsPKs(WSFindAllDroppedItemsPKs regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().findAllDroppedItemsPKs(regex);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDroppedItem loadDroppedItem(WSLoadDroppedItem wsLoadDroppedItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().loadDroppedItem(wsLoadDroppedItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSItemPK recoverDroppedItem(WSRecoverDroppedItem wsRecoverDroppedItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().recoverDroppedItem(wsRecoverDroppedItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSDroppedItemPK removeDroppedItem(WSRemoveDroppedItem wsRemoveDroppedItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().removeDroppedItem(wsRemoveDroppedItem);
+    }
+
+    /***************************************************************************
+     * RoutingRule
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingRule getRoutingRule(WSGetRoutingRule wsRoutingRuleGet) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingRule(wsRoutingRuleGet);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsRoutingRule(WSExistsRoutingRule wsExistsRoutingRule) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsRoutingRule(wsExistsRoutingRule);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingRulePK deleteRoutingRule(WSDeleteRoutingRule wsDeleteRoutingRule) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteRoutingRule(wsDeleteRoutingRule);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingRulePK putRoutingRule(WSPutRoutingRule wsRoutingRule) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putRoutingRule(wsRoutingRule);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingRulePKArray getRoutingRulePKs(WSGetRoutingRulePKs regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingRulePKs(regex);
+    }
+
+    /***************************************************************************
+     * TransformerV2
+     * **************************************************************************/
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSTransformerV2PK deleteTransformerV2(WSDeleteTransformerV2 wsTransformerV2Delete) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteTransformerV2(wsTransformerV2Delete);
-	}
-    
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteTransformerV2(wsTransformerV2Delete);
+    }
 
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerV2 getTransformerV2(WSGetTransformerV2 wsGetTransformerV2) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerV2(wsGetTransformerV2);
+    }
 
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerV2 getTransformerV2(WSGetTransformerV2 wsGetTransformerV2) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerV2(wsGetTransformerV2);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsTransformerV2(WSExistsTransformerV2 wsExistsTransformerV2) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsTransformerV2(wsExistsTransformerV2);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerV2PKArray getTransformerV2PKs(WSGetTransformerV2PKs regex) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerV2PKs(regex);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerV2PK putTransformerV2(WSPutTransformerV2 wsTransformerV2) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putTransformerV2(wsTransformerV2);
-	}
-	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerContext executeTransformerV2(WSExecuteTransformerV2 wsExecuteTransformerV2) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().executeTransformerV2(wsExecuteTransformerV2);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBackgroundJobPK executeTransformerV2AsJob(WSExecuteTransformerV2AsJob wsExecuteTransformerV2AsJob) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().executeTransformerV2AsJob(wsExecuteTransformerV2AsJob);
-	}
-	
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerContext extractThroughTransformerV2(WSExtractThroughTransformerV2 wsExtractThroughTransformerV2) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().extractThroughTransformerV2(wsExtractThroughTransformerV2);
-	}
-	
-
-	/***************************************************************************
-	 * TRANSFORMER PLUGINS V2
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 	 
-	 *  	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSBoolean existsTransformerPluginV2(WSExistsTransformerPluginV2 wsExistsTransformerPlugin) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsTransformerPluginV2(wsExistsTransformerPlugin);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString getTransformerPluginV2Configuration(WSTransformerPluginV2GetConfiguration wsGetConfiguration) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerPluginV2Configuration(wsGetConfiguration);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString putTransformerPluginV2Configuration(WSTransformerPluginV2PutConfiguration wsPutConfiguration) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().putTransformerPluginV2Configuration(wsPutConfiguration);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 	 
-	 *  	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerPluginV2Details getTransformerPluginV2Details(WSGetTransformerPluginV2Details wsGetTransformerPluginDetails) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerPluginV2Details(wsGetTransformerPluginDetails);
-	}
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsTransformerV2(WSExistsTransformerV2 wsExistsTransformerV2) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformerV2(wsExistsTransformerV2);
+    }
 
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerV2PKArray getTransformerV2PKs(WSGetTransformerV2PKs regex) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerV2PKs(regex);
+    }
 
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 	 
-	 *  	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSTransformerPluginV2SList getTransformerPluginV2SList(WSGetTransformerPluginV2SList wsGetTransformerPluginsList) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getTransformerPluginV2SList(wsGetTransformerPluginsList);
-	}
-
-	/***************************************************************************
-	 * Routing Order V2
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2 getRoutingOrderV2(WSGetRoutingOrderV2 wsGetRoutingOrder) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getRoutingOrderV2(wsGetRoutingOrder);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2 existsRoutingOrderV2(WSExistsRoutingOrderV2 wsExistsRoutingOrder) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().existsRoutingOrderV2(wsExistsRoutingOrder);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2PK deleteRoutingOrderV2(WSDeleteRoutingOrderV2 wsDeleteRoutingOrder) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().deleteRoutingOrderV2(wsDeleteRoutingOrder);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2PK executeRoutingOrderV2Asynchronously(WSExecuteRoutingOrderV2Asynchronously wsExecuteRoutingOrderAsynchronously) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().executeRoutingOrderV2Asynchronously(wsExecuteRoutingOrderAsynchronously);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSString executeRoutingOrderV2Synchronously(WSExecuteRoutingOrderV2Synchronously wsExecuteRoutingOrderSynchronously) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().executeRoutingOrderV2Synchronously(wsExecuteRoutingOrderSynchronously);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2PKArray getRoutingOrderV2PKsByCriteria(WSGetRoutingOrderV2PKsByCriteria wsGetRoutingOrderV2PKsByCriteria) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getRoutingOrderV2PKsByCriteria(wsGetRoutingOrderV2PKsByCriteria);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingOrderV2Array getRoutingOrderV2SByCriteria(WSGetRoutingOrderV2SByCriteria wsGetRoutingOrderV2SByCriteria) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getRoutingOrderV2SByCriteria(wsGetRoutingOrderV2SByCriteria);
-	}
-	/***************************************************************************
-	 * Routing Engine V2
-	 * **************************************************************************/
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingRulePKArray routeItemV2(WSRouteItemV2 wsRouteItem) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().routeItemV2(wsRouteItem);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
-	public WSRoutingEngineV2Status routingEngineV2Action(WSRoutingEngineV2Action wsRoutingEngineAction) throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().routingEngineV2Action(wsRoutingEngineAction);
-
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerV2PK putTransformerV2(WSPutTransformerV2 wsTransformerV2) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putTransformerV2(wsTransformerV2);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerContext executeTransformerV2(WSExecuteTransformerV2 wsExecuteTransformerV2) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().executeTransformerV2(wsExecuteTransformerV2);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBackgroundJobPK executeTransformerV2AsJob(WSExecuteTransformerV2AsJob wsExecuteTransformerV2AsJob)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .executeTransformerV2AsJob(wsExecuteTransformerV2AsJob);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerContext extractThroughTransformerV2(WSExtractThroughTransformerV2 wsExtractThroughTransformerV2)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .extractThroughTransformerV2(wsExtractThroughTransformerV2);
+    }
+
+    /***************************************************************************
+     * TRANSFORMER PLUGINS V2
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean existsTransformerPluginV2(WSExistsTransformerPluginV2 wsExistsTransformerPlugin) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformerPluginV2(wsExistsTransformerPlugin);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString getTransformerPluginV2Configuration(WSTransformerPluginV2GetConfiguration wsGetConfiguration)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getTransformerPluginV2Configuration(wsGetConfiguration);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString putTransformerPluginV2Configuration(WSTransformerPluginV2PutConfiguration wsPutConfiguration)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .putTransformerPluginV2Configuration(wsPutConfiguration);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerPluginV2Details getTransformerPluginV2Details(
+            WSGetTransformerPluginV2Details wsGetTransformerPluginDetails) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getTransformerPluginV2Details(wsGetTransformerPluginDetails);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSTransformerPluginV2SList getTransformerPluginV2SList(WSGetTransformerPluginV2SList wsGetTransformerPluginsList)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getTransformerPluginV2SList(wsGetTransformerPluginsList);
+    }
+
+    /***************************************************************************
+     * Routing Order V2
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2 getRoutingOrderV2(WSGetRoutingOrderV2 wsGetRoutingOrder) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingOrderV2(wsGetRoutingOrder);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2 existsRoutingOrderV2(WSExistsRoutingOrderV2 wsExistsRoutingOrder) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsRoutingOrderV2(wsExistsRoutingOrder);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2PK deleteRoutingOrderV2(WSDeleteRoutingOrderV2 wsDeleteRoutingOrder) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteRoutingOrderV2(wsDeleteRoutingOrder);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2PK executeRoutingOrderV2Asynchronously(
+            WSExecuteRoutingOrderV2Asynchronously wsExecuteRoutingOrderAsynchronously) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .executeRoutingOrderV2Asynchronously(wsExecuteRoutingOrderAsynchronously);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString executeRoutingOrderV2Synchronously(WSExecuteRoutingOrderV2Synchronously wsExecuteRoutingOrderSynchronously)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .executeRoutingOrderV2Synchronously(wsExecuteRoutingOrderSynchronously);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2PKArray getRoutingOrderV2PKsByCriteria(
+            WSGetRoutingOrderV2PKsByCriteria wsGetRoutingOrderV2PKsByCriteria) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getRoutingOrderV2PKsByCriteria(wsGetRoutingOrderV2PKsByCriteria);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingOrderV2Array getRoutingOrderV2SByCriteria(WSGetRoutingOrderV2SByCriteria wsGetRoutingOrderV2SByCriteria)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getRoutingOrderV2SByCriteria(wsGetRoutingOrderV2SByCriteria);
+    }
+
+    /***************************************************************************
+     * Routing Engine V2
+     * **************************************************************************/
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingRulePKArray routeItemV2(WSRouteItemV2 wsRouteItem) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().routeItemV2(wsRouteItem);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSRoutingEngineV2Status routingEngineV2Action(WSRoutingEngineV2Action wsRoutingEngineAction) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().routingEngineV2Action(wsRoutingEngineAction);
+
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
     public WSCategoryData getMDMCategory(WSCategoryData request) throws RemoteException {
-    	return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getMDMCategory(request);
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMDMCategory(request);
     }
 
-	/**
-	 * **********************JOB***************************************
-	 */
-	
-	public static final String 	MDMTISJOB="MDMTISJOB";
-	public static final String 	JOB="JOB";
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-    public WSBoolean putMDMJob(WSPUTMDMJob job)throws RemoteException {
-    	return ((DefaultXtentisWSDelegator)BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()).putMDMJob(job);
-    }
-	   
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-    public WSBoolean deleteMDMJob(WSDELMDMJob job)throws RemoteException {
-    	return ((DefaultXtentisWSDelegator)BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()).deleteMDMJob(job);
-    }
-    
-    
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */	
-    
-    public WSMDMJobArray getMDMJob(WSMDMNULL job)
-    {
-    	return ((DefaultXtentisWSDelegator)BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()).getMDMJob(job);
-    }
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */   
-	public WSAutoIncrement getAutoIncrement(
-			WSAutoIncrement wsAutoIncrementRequest) throws RemoteException {
-		// TODO Auto-generated method stub
-    	return ((DefaultXtentisWSDelegator)BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()).getAutoIncrement(wsAutoIncrementRequest);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-	public WSBoolean isItemModifiedByOther(WSIsItemModifiedByOther wsItem)
-			throws RemoteException {
-		// TODO Auto-generated method stub
-    	return ((DefaultXtentisWSDelegator)BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()).isItemModifiedByOther(wsItem.getWsItem());
-
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-	public WSString countItemsByCustomFKFilters(
-			WSCountItemsByCustomFKFilters wsCountItemsByCustomFKFilters)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().countItemsByCustomFKFilters(wsCountItemsByCustomFKFilters);
-	}
-
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-	public WSStringArray getItemsByCustomFKFilters(
-			WSGetItemsByCustomFKFilters wsGetItemsByCustomFKFilters)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().getItemsByCustomFKFilters(wsGetItemsByCustomFKFilters);
-	}
-	
-	/**
-	 * @ejb.interface-method view-type = "service-endpoint"
-	 * @ejb.permission 
-	 * 	role-name = "authenticated"
-	 * 	view-type = "service-endpoint"
-	 */ 
-	public WSString refreshCache(WSRefreshCache refreshCache)
-			throws RemoteException {
-		return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator().refreshCache(refreshCache);
-	}
+    /**
+     * **********************JOB***************************************
+     */
+
+    public static final String MDMTISJOB = "MDMTISJOB";
+
+    public static final String JOB = "JOB";
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean putMDMJob(WSPUTMDMJob job) throws RemoteException {
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator()).putMDMJob(job);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean deleteMDMJob(WSDELMDMJob job) throws RemoteException {
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator()).deleteMDMJob(job);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+
+    @Override
+    public WSMDMJobArray getMDMJob(WSMDMNULL job) {
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator()).getMDMJob(job);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSAutoIncrement getAutoIncrement(WSAutoIncrement wsAutoIncrementRequest) throws RemoteException {
+        // TODO Auto-generated method stub
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator())
+                .getAutoIncrement(wsAutoIncrementRequest);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSBoolean isItemModifiedByOther(WSIsItemModifiedByOther wsItem) throws RemoteException {
+        // TODO Auto-generated method stub
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator())
+                .isItemModifiedByOther(wsItem.getWsItem());
+
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString countItemsByCustomFKFilters(WSCountItemsByCustomFKFilters wsCountItemsByCustomFKFilters)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .countItemsByCustomFKFilters(wsCountItemsByCustomFKFilters);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSStringArray getItemsByCustomFKFilters(WSGetItemsByCustomFKFilters wsGetItemsByCustomFKFilters)
+            throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
+                .getItemsByCustomFKFilters(wsGetItemsByCustomFKFilters);
+    }
+
+    /**
+     * @ejb.interface-method view-type = "service-endpoint"
+     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
+     */
+    @Override
+    public WSString refreshCache(WSRefreshCache refreshCache) throws RemoteException {
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().refreshCache(refreshCache);
+    }
 
     /**
      * @ejb.interface-method view-type = "service-endpoint"
      * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
      */
+    @Override
     public WSItemPK partialPutItem(WSPartialPutItem wsPartialPutItem) throws RemoteException {
-        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator())
+        return ((DefaultXtentisWSDelegator) BeanDelegatorContainer.getInstance().getXtentisWSDelegator())
                 .partialPutItem(wsPartialPutItem);
     }
 
@@ -1741,9 +1560,10 @@ public class XtentisWSBean implements SessionBean, XtentisPort {
      * @ejb.interface-method view-type = "service-endpoint"
      * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
      */
+    @Override
     public WSRoutingOrderV2Array getRoutingOrderV2ByCriteriaWithPaging(
             WSGetRoutingOrderV2ByCriteriaWithPaging wsGetRoutingOrderV2ByCriteriaWithPaging) throws RemoteException {
-        return BeanDelegatorContainer.getUniqueInstance().getXtentisWSDelegator()
+        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                 .getRoutingOrderV2ByCriteriaWithPaging(wsGetRoutingOrderV2ByCriteriaWithPaging);
     }
 
diff --git a/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorConfigReader.java b/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorConfigReader.java
index f37d560..60525f0 100644
--- a/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorConfigReader.java
+++ b/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorConfigReader.java
@@ -7,6 +7,7 @@ import java.util.Map;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
+import org.apache.log4j.Logger;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
@@ -14,40 +15,31 @@ import org.w3c.dom.NodeList;
 import com.amalto.core.util.Util;
 
 public class BeanDelegatorConfigReader {
-	
-	private static Map<String,String> beanImplNamesMap=new HashMap<String,String>();
-	
-	public static void init(){
-		
-		try{
-			
-			InputStream in=BeanDelegatorConfigReader.class.getResourceAsStream("/com/amalto/core/delegator/delegator.xml");
-			DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-			Document doc = builder.parse(in);	
-			
-
-			NodeList nodelist = Util.getNodeList(doc.getDocumentElement(), "/bean/delegator/name");
-			for(int i=0; i<nodelist.getLength(); i++){
-				Node node=nodelist.item(i);
-				String textContent=node.getTextContent();
-				String[] tmp=textContent.split("#");
-				beanImplNamesMap.put(tmp[0],tmp[1]);
-			}
-			
-		}catch(Exception e){
-			org.apache.log4j.Logger.getLogger(BeanDelegatorConfigReader.class).error(e.getCause());
-		}
-	}
-	
-	public static Map<String, String> getBeanImplNamesMap() {
-		return beanImplNamesMap;
-	}
-
-	//test
-	public static void main(String[] args) {
-		init();
-		Map<String, String> beanImplNamesMap=BeanDelegatorConfigReader.getBeanImplNamesMap();
-		System.out.println(beanImplNamesMap);
-	}
 
+    private static final Logger LOGGER = Logger.getLogger(BeanDelegatorConfigReader.class);
+
+    private static final Map<String, String> beanImplNamesMap = new HashMap<String, String>();
+
+    public static Map<String, String> readConfiguration() {
+        synchronized (beanImplNamesMap) {
+            if (!beanImplNamesMap.isEmpty()) {
+                return beanImplNamesMap;
+            }
+            try {
+                InputStream in = BeanDelegatorConfigReader.class.getResourceAsStream("/com/amalto/core/delegator/delegator.xml"); //$NON-NLS-1$
+                DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+                Document doc = builder.parse(in);
+                NodeList nodelist = Util.getNodeList(doc.getDocumentElement(), "/bean/delegator/name"); //$NON-NLS-1$
+                for (int i = 0; i < nodelist.getLength(); i++) {
+                    Node node = nodelist.item(i);
+                    String textContent = node.getTextContent();
+                    String[] tmp = textContent.split("#"); //$NON-NLS-1$
+                    beanImplNamesMap.put(tmp[0], tmp[1]);
+                }
+            } catch (Exception e) {
+                LOGGER.error(e);
+            }
+            return beanImplNamesMap;
+        }
+    }
 }
diff --git a/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorContainer.java b/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorContainer.java
index 7cc22c6..5b690d9 100644
--- a/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorContainer.java
+++ b/org.talend.mdm.core/src/com/amalto/core/delegator/BeanDelegatorContainer.java
@@ -3,85 +3,82 @@
  */
 package com.amalto.core.delegator;
 
+import org.apache.log4j.Logger;
+
 import java.lang.reflect.Constructor;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 
 
 public class BeanDelegatorContainer {
 
-	/** unique instance */
-	private static BeanDelegatorContainer sInstance = null;
-	/** delegator instances */
-	private Map<String,IBeanDelegator> delegatorInstancePool = new HashMap<String, IBeanDelegator>();
-
-	/** 
-	 * Private constuctor
-	 */
-	private BeanDelegatorContainer() {
-		super();
-		init();
-	}
-
-	/** 
-	 * Get the unique instance of this class.
-	 * In order to improve the performance, removed synchronized, using pseudo singleton mode
-	 */
-	public static BeanDelegatorContainer getUniqueInstance() {
-
-		if (sInstance == null) {
-			sInstance = new BeanDelegatorContainer();
-		}
-
-		return sInstance;
-
-	}
-	
-	private void init() {
-		
-		BeanDelegatorConfigReader.init();
-		Map<String, String> beanImplNamesMap=BeanDelegatorConfigReader.getBeanImplNamesMap();
-		for (Iterator<String> iterator = beanImplNamesMap.keySet().iterator(); iterator.hasNext();) {
-			String interfaceShortName = iterator.next();
-			String implName=beanImplNamesMap.get(interfaceShortName);
-			
-			//add to pool
-			try {
-				Object[] instanceParams=new Object[0];
-				IBeanDelegator beanDelegator=(IBeanDelegator) newInstance(implName,instanceParams);
-				delegatorInstancePool.put(interfaceShortName, beanDelegator);
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-			
-			
-			org.apache.log4j.Logger.getLogger(this.getClass()).info("Init instance:"+implName);
-		}
-
-	}
-	
-	private Object newInstance(String className, Object[] args) throws Exception {
-        Class newoneClass = Class.forName(className);
-        Class[] argsClass = new Class[args.length];
-        for (int i = 0, j = args.length; i < j; i++) {
-            argsClass[i] = args[i].getClass();
+    private static final Logger LOGGER = Logger.getLogger(BeanDelegatorContainer.class);
+
+    private static final Map<String, IBeanDelegator> delegatorInstancePool = new HashMap<String, IBeanDelegator>();
+
+    private static final String LOCAL_USER = "LocalUser"; //$NON-NLS-1$
+
+    private static final String VALIDATION = "Validation"; //$NON-NLS-1$
+
+    private static final String ITEM_CTRL = "ItemCtrl"; //$NON-NLS-1$
+
+    private static final String XTENTIS_WS = "XtentisWS"; //$NON-NLS-1$
+
+    private static BeanDelegatorContainer instance;
+
+    private BeanDelegatorContainer() {
+        init();
+    }
+
+    /**
+     * Get the unique instance of this class.
+     * In order to improve the performance, removed synchronized, using pseudo singleton mode
+     */
+    public static synchronized BeanDelegatorContainer getInstance() {
+        if (instance == null) {
+            instance = new BeanDelegatorContainer();
+        }
+        return instance;
+    }
+
+    private void init() {
+        synchronized (delegatorInstancePool) {
+            Map<String, String> beanImplNamesMap = BeanDelegatorConfigReader.readConfiguration();
+            for (Map.Entry<String, String> currentBean : beanImplNamesMap.entrySet()) {
+                try {
+                    Class clazz = Class.forName(currentBean.getValue());
+                    Constructor cons = clazz.getConstructor();
+                    IBeanDelegator beanDelegator = (IBeanDelegator) cons.newInstance();
+                    delegatorInstancePool.put(currentBean.getKey(), beanDelegator);
+                    LOGGER.info("Init instance:" + currentBean.getValue());
+                } catch (Exception e) {
+                    LOGGER.error("Init exception for '" + currentBean.getValue() + "'.", e);
+                }
+            }
+        }
+    }
+
+    public ILocalUser getLocalUserDelegator() {
+        synchronized (delegatorInstancePool) {
+            return (ILocalUser) delegatorInstancePool.get(LOCAL_USER);
+        }
+    }
+
+    public IValidation getValidationDelegator() {
+        synchronized (delegatorInstancePool) {
+            return (IValidation) delegatorInstancePool.get(VALIDATION);
+        }
+    }
+
+    public IItemCtrlDelegator getItemCtrlDelegator() {
+        synchronized (delegatorInstancePool) {
+            return (IItemCtrlDelegator) delegatorInstancePool.get(ITEM_CTRL);
+        }
+    }
+
+    public IXtentisWSDelegator getXtentisWSDelegator() {
+        synchronized (delegatorInstancePool) {
+            return (IXtentisWSDelegator) delegatorInstancePool.get(XTENTIS_WS);
         }
-        Constructor cons = newoneClass.getConstructor(argsClass);
-        return cons.newInstance(args);
     }
-	
-	//TODO add more delegator get method
-	public ILocalUser getLocalUserDelegator() {
-		return (ILocalUser) delegatorInstancePool.get("LocalUser");
-	}
-	public IValidation getValidationDelegator() {
-		return (IValidation) delegatorInstancePool.get("Validation");
-	}
-	public IItemCtrlDelegator getItemCtrlDelegator() {
-		return (IItemCtrlDelegator) delegatorInstancePool.get("ItemCtrl");
-	}
-	public IXtentisWSDelegator getXtentisWSDelegator() {
-		return (IXtentisWSDelegator) delegatorInstancePool.get("XtentisWS");
-	}
 }
diff --git a/org.talend.mdm.core/src/com/amalto/core/ejb/DroppedItemPOJO.java b/org.talend.mdm.core/src/com/amalto/core/ejb/DroppedItemPOJO.java
index ace364b..51eb5d3 100644
--- a/org.talend.mdm.core/src/com/amalto/core/ejb/DroppedItemPOJO.java
+++ b/org.talend.mdm.core/src/com/amalto/core/ejb/DroppedItemPOJO.java
@@ -6,16 +6,23 @@ import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import com.amalto.core.metadata.LongString;
+import com.amalto.core.schema.manage.SchemaCoreAgent;
 import com.amalto.core.util.Util;
+
+import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
 import org.exolab.castor.xml.Marshaller;
 import org.exolab.castor.xml.Unmarshaller;
 import org.talend.mdm.commmon.util.bean.ItemCacheKey;
 import org.talend.mdm.commmon.util.core.EDBType;
 import org.talend.mdm.commmon.util.core.MDMConfiguration;
+import org.talend.mdm.commmon.util.datamodel.management.BusinessConcept;
+import org.talend.mdm.commmon.util.datamodel.management.DataModelID;
 import org.talend.mdm.commmon.util.webapp.XObjectType;
 import org.talend.mdm.commmon.util.webapp.XSystemObjects;
 import org.xml.sax.InputSource;
@@ -265,6 +272,7 @@ public class DroppedItemPOJO implements Serializable {
             }
             //build PKs collection
             List<DroppedItemPOJOPK> list = new ArrayList<DroppedItemPOJOPK>();
+            Map<String, BusinessConcept> conceptMap = new HashMap<String, BusinessConcept>();
             for (String uid : ids) {
                 String[] uidValues = uid.split("\\."); //$NON-NLS-1$
                 ItemPOJOPK refItemPOJOPK;
@@ -275,8 +283,19 @@ public class DroppedItemPOJO implements Serializable {
                         }
                         continue;
                     }
-                    refItemPOJOPK = new ItemPOJOPK(new DataClusterPOJOPK(uidValues[0]), uidValues[1], Arrays.copyOfRange(
-                            uidValues, 2, uidValues.length));
+                    // check xsd key's length
+                    String uidPrefix = uidValues[0] + "." + uidValues[1] + ".";  //$NON-NLS-1$//$NON-NLS-2$
+                    String[] idArray = Arrays.copyOfRange(uidValues, 2, uidValues.length);
+                    if (!conceptMap.containsKey(uidPrefix)) {
+                        BusinessConcept businessConcept = SchemaCoreAgent.getInstance().getBusinessConcept(uidValues[1], new DataModelID(uidValues[0], null));
+                        businessConcept.load();
+                        conceptMap.put(uidPrefix, businessConcept);
+                    }
+                    if (conceptMap.get(uidPrefix) != null && conceptMap.get(uidPrefix).getKeyFieldPaths().size() == 1) {
+                        idArray = new String[] {StringUtils.removeStart(uid, uidPrefix)};
+                    }
+                    
+                    refItemPOJOPK = new ItemPOJOPK(new DataClusterPOJOPK(uidValues[0]), uidValues[1], idArray);
                 } else {
                     // XML db format (deprecated)
                     if (uidValues.length < 4) {
diff --git a/org.talend.mdm.core/src/com/amalto/core/ejb/ItemCtrl2Bean.java b/org.talend.mdm.core/src/com/amalto/core/ejb/ItemCtrl2Bean.java
index 9f20031..9a03e76 100644
--- a/org.talend.mdm.core/src/com/amalto/core/ejb/ItemCtrl2Bean.java
+++ b/org.talend.mdm.core/src/com/amalto/core/ejb/ItemCtrl2Bean.java
@@ -74,16 +74,16 @@ import com.amalto.xmlserver.interfaces.XmlServerException;
 
 /**
  * @author Bruno Grieder
- *
+ * 
  * @ejb.bean name="ItemCtrl2" display-name="Name for ItemCtrl2" description="Description for ItemCtrl2"
  * jndi-name="amalto/remote/core/itemctrl2" local-jndi-name = "amalto/local/core/itemctrl2" type="Stateless"
  * view-type="both"
- *
+ * 
  * @ejb.remote-facade
- *
+ * 
  * @ejb.permission view-type = "remote" role-name = "administration"
  * @ejb.permission view-type = "local" unchecked = "true"
- *
+ * 
  */
 
 @SuppressWarnings("deprecation")
@@ -98,15 +98,19 @@ public class ItemCtrl2Bean implements SessionBean {
     public ItemCtrl2Bean() {
     }
 
+    @Override
     public void setSessionContext(SessionContext ctx) throws EJBException, RemoteException {
     }
 
+    @Override
     public void ejbRemove() throws EJBException, RemoteException {
     }
 
+    @Override
     public void ejbActivate() throws EJBException, RemoteException {
     }
 
+    @Override
     public void ejbPassivate() throws EJBException, RemoteException {
     }
 
@@ -125,42 +129,42 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Creates or updates a item
-     *
+     * 
      * @param item The new item, null is not allowed.
      * @param dataModel Null is allowed.
      * @throws XtentisException In case of error in MDM code.
      * @return A PK to the newly created record.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     public ItemPOJOPK putItem(ItemPOJO item, DataModelPOJO dataModel) throws XtentisException {
         String schema = dataModel == null ? null : dataModel.getSchema();
         String dataModelName = dataModel == null ? null : dataModel.getName();
-        return BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator().putItem(item, schema, dataModelName);
+        return BeanDelegatorContainer.getInstance().getItemCtrlDelegator().putItem(item, schema, dataModelName);
     }
 
     /**
      * updates a item taskId. Is equivalent to {@link #putItem(ItemPOJO, DataModelPOJO)}.
-     *
+     * 
      * @param item The item to update
      * @throws XtentisException In case of error in MDM code.
      * @return A PK to the updated item.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     public ItemPOJOPK updateItemMetadata(ItemPOJO item) throws XtentisException {
-        return BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator().putItem(item, null, null);
+        return BeanDelegatorContainer.getInstance().getItemCtrlDelegator().putItem(item, null, null);
     }
 
     /**
      * Get item
-     *
+     * 
      * @param pk The item PK.
      * @return The MDM record for the provided PK.
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -185,9 +189,9 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get item with revisionID
-     *
+     * 
      * @param revisionID The item revision
-     * @param pk         The item PK
+     * @param pk The item PK
      * @return The MDM record for the PK.
      * @throws XtentisException In case of error in MDM code.
      * @ejb.interface-method view-type = "both"
@@ -214,12 +218,12 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Is Item modified by others - no exception is thrown: true|false.
-     *
+     * 
      * @param item A record PK.
      * @param time Time of modification.
      * @return True is last modification of record is after time, false otherwise.
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -230,11 +234,11 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get an item - no exception is thrown: returns null if not found
-     *
+     * 
      * @param pk MDM record PK
      * @return True if item with PK exists in database.
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -245,8 +249,8 @@ public class ItemCtrl2Bean implements SessionBean {
             return null;
         } catch (Exception e) {
             if (LOGGER.isDebugEnabled()) {
-                String info = "Could not check whether this item exists:  " + pk.toString() + ": " + e.getClass().getName() + ": "
-                    + e.getLocalizedMessage();
+                String info = "Could not check whether this item exists:  " + pk.toString() + ": " + e.getClass().getName()
+                        + ": " + e.getLocalizedMessage();
                 LOGGER.debug(info, e);
             }
             return null;
@@ -255,10 +259,10 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Remove an item - returns null if no item was deleted
-     *
-     * @param pk       PK of the item to be deleted.
+     * 
+     * @param pk PK of the item to be deleted.
      * @param override Override FK integrity when deleting instance. Please note that this parameter is only taken into
-     *                 account if the data model allows override.
+     * account if the data model allows override.
      * @return The PK of the deleted item.
      * @throws XtentisException In case of error in MDM code.
      * @ejb.interface-method view-type = "both"
@@ -273,7 +277,8 @@ public class ItemCtrl2Bean implements SessionBean {
         }
         boolean allowDelete = FKIntegrityChecker.getInstance().allowDelete(dataClusterName, conceptName, ids, override);
         if (!allowDelete) {
-            throw new RuntimeException("Cannot delete instance '" + pk.getUniqueID() + "' (concept name: " + conceptName + ") due to FK integrity constraints.");
+            throw new RuntimeException("Cannot delete instance '" + pk.getUniqueID() + "' (concept name: " + conceptName
+                    + ") due to FK integrity constraints.");
         }
         try {
             return ItemPOJO.remove(pk);
@@ -289,7 +294,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Delete items in a stateless mode: open a connection --> perform delete --> close the connection
-     *
+     * 
      * @param dataClusterPOJOPK Data cluster where items will be deleted.
      * @param conceptName Concept name of the soon-to-be-deleted items.
      * @param search A condition for items to be deleted.
@@ -298,13 +303,13 @@ public class ItemCtrl2Bean implements SessionBean {
      * account if the data model allows override.
      * @return Number of deleted items.
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     // TODO override is not taken into account here?
-    public int deleteItems(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, IWhereItem search, int spellThreshold, boolean override)
-            throws XtentisException {
+    public int deleteItems(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, IWhereItem search, int spellThreshold,
+            boolean override) throws XtentisException {
         // get the universe and revision ID
         UniversePOJO universe = LocalUser.getLocalUser().getUniverse();
         if (universe == null) {
@@ -323,7 +328,7 @@ public class ItemCtrl2Bean implements SessionBean {
         XmlServerSLWrapperLocal server = Util.getXmlServerCtrlLocal();
         try {
             int count = server.deleteItems(patternsToRevisionID, patternsToClusterName, conceptName, search);
-            if (count > 0){
+            if (count > 0) {
                 ItemPOJO.clearCache();
             }
             return count;
@@ -338,14 +343,15 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Drop an item - returns null if no item was dropped. This is logical delete (i.e. send to trash)
-     *
+     * 
      * @param itemPOJOPK PK of item to be sent to trash.
-     * @param partPath Use this parameter too only drop a part of the document (a XPath evaluated from the document's root).
+     * @param partPath Use this parameter too only drop a part of the document (a XPath evaluated from the document's
+     * root).
      * @param override Override FK integrity when deleting instance. Please note that this parameter is only taken into
      * account if the data model allows override.
      * @return A PK to the item in the MDM trash.
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -359,7 +365,8 @@ public class ItemCtrl2Bean implements SessionBean {
         }
         boolean allowDelete = FKIntegrityChecker.getInstance().allowDelete(dataClusterName, conceptName, ids, override);
         if (!allowDelete) {
-            throw new RuntimeException("Cannot delete instance '" + itemPOJOPK.getUniqueID() + "' (concept name: " + conceptName + ") due to FK integrity constraints.");
+            throw new RuntimeException("Cannot delete instance '" + itemPOJOPK.getUniqueID() + "' (concept name: " + conceptName
+                    + ") due to FK integrity constraints.");
         }
         try {
             return ItemPOJO.drop(itemPOJOPK, partPath);
@@ -373,10 +380,9 @@ public class ItemCtrl2Bean implements SessionBean {
         }
     }
 
-
     /**
      * Search Items through a view in a cluster and specifying a condition
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param viewPOJOPK The View
      * @param whereItem The condition
@@ -385,7 +391,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param limit The maximum number of items to return
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -396,7 +402,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Search ordered Items through a view in a cluster and specifying a condition
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param viewPOJOPK The View
      * @param whereItem The condition
@@ -408,13 +414,13 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param limit The maximum number of items to return
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     public ArrayList<String> viewSearch(DataClusterPOJOPK dataClusterPOJOPK, ViewPOJOPK viewPOJOPK, IWhereItem whereItem,
             int spellThreshold, String orderBy, String direction, int start, int limit) throws XtentisException {
-        return BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator()
+        return BeanDelegatorContainer.getInstance().getItemCtrlDelegator()
                 .viewSearch(dataClusterPOJOPK, viewPOJOPK, whereItem, spellThreshold, orderBy, direction, start, limit);
 
     }
@@ -422,7 +428,7 @@ public class ItemCtrl2Bean implements SessionBean {
     /**
      * Returns an ordered collection of results searched in a cluster and specifying an optional condition<br/>
      * The results are xml objects made of elements constituted by the specified viewablePaths
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param forceMainPivot An optional pivot that will appear first in the list of pivots in the query<br>
      * : This allows forcing cartesian products: for instance Order Header vs Order Line
@@ -434,20 +440,21 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param returnCount True if total search count should be returned as first result.
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     public ArrayList<String> xPathsSearch(DataClusterPOJOPK dataClusterPOJOPK, String forceMainPivot,
             ArrayList<String> viewablePaths, IWhereItem whereItem, int spellThreshold, int start, int limit, boolean returnCount)
             throws XtentisException {
-        return xPathsSearch(dataClusterPOJOPK, forceMainPivot, viewablePaths, whereItem, spellThreshold, null, null, start, limit, returnCount);
+        return xPathsSearch(dataClusterPOJOPK, forceMainPivot, viewablePaths, whereItem, spellThreshold, null, null, start,
+                limit, returnCount);
     }
 
     /**
      * Returns an ordered collection of results searched in a cluster and specifying an optional condition<br/>
      * The results are xml objects made of elements constituted by the specified viewablePaths
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param forceMainPivot An optional pivot that will appear first in the list of pivots in the query<br>
      * : This allows forcing cartesian products: for instance Order Header vs Order Line
@@ -462,7 +469,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param returnCount True if total search count should be returned as first result.
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -484,8 +491,8 @@ public class ItemCtrl2Bean implements SessionBean {
                 authorized = true;
             }
             if (!authorized) {
-                throw new XtentisException("Unauthorized read access on data cluster '" + dataClusterPOJOPK.getUniqueId() + "' by user '"
-                        + user.getUsername() + "'");
+                throw new XtentisException("Unauthorized read access on data cluster '" + dataClusterPOJOPK.getUniqueId()
+                        + "' by user '" + user.getUsername() + "'");
             }
             // get the universe and revision ID
             UniversePOJO universe = LocalUser.getLocalUser().getUniverse();
@@ -510,7 +517,8 @@ public class ItemCtrl2Bean implements SessionBean {
                 conceptPatternsToClusterName.put(".*", dataClusterPOJOPK.getUniqueId());
                 XmlServerSLWrapperLocal xmlServer = Util.getXmlServerCtrlLocal();
                 String query = xmlServer.getItemsQuery(conceptPatternsToRevisionID, conceptPatternsToClusterName, forceMainPivot,
-                        viewablePaths, whereItem, orderBy, direction, start, limit, spellThreshold, returnCount, Collections.<String, ArrayList<String>>emptyMap());
+                        viewablePaths, whereItem, orderBy, direction, start, limit, spellThreshold, returnCount,
+                        Collections.<String, ArrayList<String>> emptyMap());
                 return xmlServer.runQuery(null, null, query, null);
             } else {
                 MetadataRepository repository = storage.getMetadataRepository();
@@ -520,7 +528,8 @@ public class ItemCtrl2Bean implements SessionBean {
                 qb.start(start);
                 qb.limit(limit);
                 if (orderBy != null) {
-                    TypedExpression field = UserQueryHelper.getField(repository, typeName, StringUtils.substringAfter(orderBy, "/")); //$NON-NLS-1$
+                    TypedExpression field = UserQueryHelper.getField(repository, typeName,
+                            StringUtils.substringAfter(orderBy, "/")); //$NON-NLS-1$
                     if (field == null) {
                         throw new IllegalArgumentException("Field '" + orderBy + "' does not exist.");
                     }
@@ -539,7 +548,8 @@ public class ItemCtrl2Bean implements SessionBean {
                     if (!viewableFieldName.isEmpty()) {
                         qb.select(repository.getComplexType(viewableTypeName), viewableFieldName);
                     } else {
-                        qb.selectId(repository.getComplexType(viewableTypeName)); // Select id if xPath is 'typeName' and not 'typeName/field'
+                        qb.selectId(repository.getComplexType(viewableTypeName)); // Select id if xPath is 'typeName'
+                                                                                  // and not 'typeName/field'
                     }
                 }
                 StorageResults results;
@@ -549,7 +559,7 @@ public class ItemCtrl2Bean implements SessionBean {
                     resultsAsString.add("<totalCount>" + results.getCount() + "</totalCount>"); //$NON-NLS-1$ //$NON-NLS-2$
                 }
                 results = storage.fetch(qb.getSelect());
-                DataRecordWriter writer = new DataRecordDefaultWriter(); 
+                DataRecordWriter writer = new DataRecordDefaultWriter();
                 ByteArrayOutputStream output = new ByteArrayOutputStream();
                 for (DataRecord result : results) {
                     try {
@@ -574,7 +584,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get items hierarchical tree according to pivots
-     *
+     * 
      * @param clusterName The Data Cluster where to run the query
      * @param mainPivotName The main Business Concept name
      * @param pivotWithKeys The pivots with their IDs which selected to be the catalog of the hierarchical tree
@@ -588,7 +598,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param limit The maximum number of items to return
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -596,7 +606,7 @@ public class ItemCtrl2Bean implements SessionBean {
             LinkedHashMap<String, String[]> pivotWithKeys, String[] indexPaths, IWhereItem whereItem, String[] pivotDirections,
             String[] indexDirections, int start, int limit) throws XtentisException {
         return BeanDelegatorContainer
-                .getUniqueInstance()
+                .getInstance()
                 .getItemCtrlDelegator()
                 .getItemsPivotIndex(clusterName, mainPivotName, pivotWithKeys, indexPaths, whereItem, pivotDirections,
                         indexDirections, start, limit);
@@ -613,20 +623,20 @@ public class ItemCtrl2Bean implements SessionBean {
      */
     public ArrayList<String> getChildrenItems(String clusterName, String conceptName, String PKXpaths[], String FKXpath,
             String labelXpath, String fatherPK, IWhereItem whereItem, int start, int limit) throws XtentisException {
-        return BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator()
+        return BeanDelegatorContainer.getInstance().getItemCtrlDelegator()
                 .getChildrenItems(clusterName, conceptName, PKXpaths, FKXpath, labelXpath, fatherPK, whereItem, start, limit);
     }
 
     /**
      * Count the items denoted by concept name meeting the optional condition whereItem
-     *
+     * 
      * @param dataClusterPOJOPK A data cluster PK.
      * @param conceptName A concept name.
      * @param whereItem A condition on returned count.
      * @param spellThreshold Unused parameter.
      * @return The number of items found
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -647,8 +657,9 @@ public class ItemCtrl2Bean implements SessionBean {
                 // build the patterns to revision ID map
                 LinkedHashMap<String, String> conceptPatternsToRevisionID = new LinkedHashMap<String, String>(
                         universe.getItemsRevisionIDs());
-                if (universe.getDefaultItemRevisionID() != null)
+                if (universe.getDefaultItemRevisionID() != null) {
                     conceptPatternsToRevisionID.put(".*", universe.getDefaultItemRevisionID());
+                }
 
                 // build the patterns to cluster map - only one cluster at this stage
                 LinkedHashMap<String, String> conceptPatternsToClusterName = new LinkedHashMap<String, String>();
@@ -690,14 +701,14 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Search ordered Items through a view in a cluster and specifying a condition
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param viewPOJOPK The View
-     * @param searchValue The value searched. If empty, null or equals to "*", this method is equivalent to a view search
-     * with no filter.
-     * @param matchWholeSentence If <code>false</code>, the searchValue is separated into keywords using " " (white space) as
-     * separator. Match will be done with a OR condition on each field. If <code>true</code>, the keyword is considered
-     * as a whole sentence and matching is done on the whole sentence (not each word).
+     * @param searchValue The value searched. If empty, null or equals to "*", this method is equivalent to a view
+     * search with no filter.
+     * @param matchWholeSentence If <code>false</code>, the searchValue is separated into keywords using " " (white
+     * space) as separator. Match will be done with a OR condition on each field. If <code>true</code>, the keyword is
+     * considered as a whole sentence and matching is done on the whole sentence (not each word).
      * @param spellThreshold The condition spell checking threshold. A negative value de-activates spell
      * @param orderBy An optional full path of the item used to order results.
      * @param direction One of {@link IXmlServerSLWrapper#ORDER_ASCENDING} or
@@ -706,7 +717,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param limit The maximum number of items to return
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -715,7 +726,8 @@ public class ItemCtrl2Bean implements SessionBean {
             throws XtentisException {
         try {
             // check if there actually is a search value
-            if ((searchValue == null) || "".equals(searchValue) || "*".equals(searchValue)) { // $NON-NLS-1$ // $NON-NLS-2$
+            if ((searchValue == null) || "".equals(searchValue) || "*".equals(searchValue)) { // $NON-NLS-1$ //
+                                                                                              // $NON-NLS-2$
                 return viewSearch(dataClusterPOJOPK, viewPOJOPK, null, spellThreshold, orderBy, direction, start, limit);
             } else {
                 ViewPOJO view = Util.getViewCtrlLocal().getView(viewPOJOPK);
@@ -746,7 +758,8 @@ public class ItemCtrl2Bean implements SessionBean {
                     for (String fieldName : searchableFields) {
                         WhereOr nestedOr = new WhereOr();
                         for (String keyword : keywords) {
-                            WhereCondition nestedCondition = new WhereCondition(fieldName, WhereCondition.CONTAINS, keyword.trim(), WhereCondition.PRE_OR, false);
+                            WhereCondition nestedCondition = new WhereCondition(fieldName, WhereCondition.CONTAINS,
+                                    keyword.trim(), WhereCondition.PRE_OR, false);
                             nestedOr.add(nestedCondition);
                         }
                         whereOr.add(nestedOr);
@@ -768,7 +781,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get the possible value for the business Element Path, optionally filtered by a condition
-     *
+     * 
      * @param dataClusterPOJOPK The data cluster where to run the query
      * @param businessElementPath The business element path. Must be of the form
      * <code>ConceptName/[optional sub elements]/element</code>
@@ -779,14 +792,13 @@ public class ItemCtrl2Bean implements SessionBean {
      * {@link IXmlServerSLWrapper#ORDER_DESCENDING}
      * @return The list of values
      * @throws XtentisException In case of error in MDM code.
-     *
-     *
+     * 
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
-    public ArrayList<String> getFullPathValues(DataClusterPOJOPK dataClusterPOJOPK,
-            String businessElementPath, IWhereItem whereItem, int spellThreshold, String orderBy, String direction)
-            throws XtentisException {
+    public ArrayList<String> getFullPathValues(DataClusterPOJOPK dataClusterPOJOPK, String businessElementPath,
+            IWhereItem whereItem, int spellThreshold, String orderBy, String direction) throws XtentisException {
 
         ArrayList<String> res = new ArrayList<String>();
         try {
@@ -799,16 +811,17 @@ public class ItemCtrl2Bean implements SessionBean {
             }
 
             ArrayList<String> col = xPathsSearch(dataClusterPOJOPK, null,
-                    new ArrayList<String>(Arrays.asList(businessElementPath)), whereItem, spellThreshold,
-                    orderBy, direction, 0, -1, false);
+                    new ArrayList<String>(Arrays.asList(businessElementPath)), whereItem, spellThreshold, orderBy, direction, 0,
+                    -1, false);
 
             Pattern p = Pattern.compile("<.*>(.*?)</.*>", Pattern.DOTALL);
             for (String li : col) {
                 Matcher m = p.matcher(li);
-                if (m.matches())
+                if (m.matches()) {
                     res.add(StringEscapeUtils.unescapeXml(m.group(1)));
-                else
+                } else {
                     throw new XtentisException("Result values were not understood for business element: " + conceptName);
+                }
             }
 
             return res;
@@ -824,7 +837,7 @@ public class ItemCtrl2Bean implements SessionBean {
     /**
      * Extract results through a view and transform them using a transformer<br/>
      * This call is asynchronous and results will be pushed via the passed {@link TransformerCallBack}
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param context The {@link TransformerContext} contains the initial context and the transformer name
      * @param globalCallBack The callback function called by the transformer when it completes a step
@@ -837,7 +850,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param start The first item index (starts at zero)
      * @param limit The maximum number of items to return
      * @throws com.amalto.core.util.XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -852,20 +865,16 @@ public class ItemCtrl2Bean implements SessionBean {
             context.put("com.amalto.core.ejb.itemctrl.globalCallBack", globalCallBack); //$NON-NLS-1$
             context.put("com.amalto.core.ejb.itemctrl.count", 0); //$NON-NLS-1$
             // perform search
-            ArrayList<String> rows = viewSearch(dataClusterPOJOPK,
-                    viewPOJOPK,
-                    whereItem,
-                    spellThreshold,
-                    orderBy,
-                    direction,
-                    start,
-                    limit);
+            ArrayList<String> rows = viewSearch(dataClusterPOJOPK, viewPOJOPK, whereItem, spellThreshold, orderBy, direction,
+                    start, limit);
 
             // transform
             for (String raw : rows) {
                 Util.getTransformerV2CtrlLocal().execute(context,
                         new TypedContent(raw.getBytes("utf-8"), "text/xml; charset=\"utf-8\""), //$NON-NLS-1$ //$NON-NLS-2$
                         new TransformerCallBack() {
+
+                            @Override
                             public void contentIsReady(TransformerContext context) throws XtentisException {
                                 // add numbered content to the pipeline
                                 TypedContent content = context.getFromPipeline(DEFAULT_VARIABLE);
@@ -878,6 +887,7 @@ public class ItemCtrl2Bean implements SessionBean {
                                 globalCallBack.contentIsReady(context);
                             }
 
+                            @Override
                             public void done(TransformerContext context) throws XtentisException {
                                 // do not notify
                             }
@@ -899,7 +909,7 @@ public class ItemCtrl2Bean implements SessionBean {
     /**
      * Extract results through a view and transform them using a transformer<br/>
      * This call is asynchronous and results will be pushed via the passed {@link TransformerCallBack}
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param transformerPOJOPK The transformer to use
      * @param viewPOJOPK A filtering view
@@ -910,7 +920,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * {@link IXmlServerSLWrapper#ORDER_DESCENDING}
      * @param start The first item index (starts at zero)
      * @param limit The maximum number of items to return
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -926,23 +936,18 @@ public class ItemCtrl2Bean implements SessionBean {
             context.put("com.amalto.core.itemctrl2.content", content); //$NON-NLS-1$
             context.put("com.amalto.core.itemctrl2.ready", false); //$NON-NLS-1$
             TransformerCallBack globalCallBack = new TransformerCallBack() {
+
+                @Override
                 public void contentIsReady(TransformerContext context) throws XtentisException {
                 }
 
+                @Override
                 public void done(TransformerContext context) throws XtentisException {
                     context.put("com.amalto.core.itemctrl2.ready", true); //$NON-NLS-1$
                 }
             };
-            extractUsingTransformerThroughView(dataClusterPOJOPK,
-                    context,
-                    globalCallBack,
-                    viewPOJOPK,
-                    whereItem,
-                    spellThreshold,
-                    orderBy,
-                    direction,
-                    start,
-                    limit);
+            extractUsingTransformerThroughView(dataClusterPOJOPK, context, globalCallBack, viewPOJOPK, whereItem, spellThreshold,
+                    orderBy, direction, start, limit);
             while (!(Boolean) context.get("com.amalto.core.itemctrl2.ready")) {
                 try {
                     Thread.sleep(50);
@@ -967,7 +972,7 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param query The query in the native language
      * @param parameters Optional parameter values to replace the %n in the query before execution
      * @return Query results as list of String.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -975,8 +980,8 @@ public class ItemCtrl2Bean implements SessionBean {
             throws XtentisException {
         XmlServerSLWrapperLocal server = Util.getXmlServerCtrlLocal();
         try {
-            return server.runQuery(revisionID,
-                    (dataClusterPOJOPK == null ? null : dataClusterPOJOPK.getUniqueId()), query, parameters);
+            return server.runQuery(revisionID, (dataClusterPOJOPK == null ? null : dataClusterPOJOPK.getUniqueId()), query,
+                    parameters);
         } catch (Exception e) {
             String err = "Unable to perform a direct query: " + ": " + e.getClass().getName() + ": " + e.getLocalizedMessage();
             LOGGER.error(err, e);
@@ -997,11 +1002,11 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Returns a map with keys being the concepts found in the Data Cluster and as value the revisionID
-     *
+     * 
      * @param dataClusterPOJOPK A data cluster PK.
      * @return A {@link TreeMap} of concept names to revision IDs
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
@@ -1011,7 +1016,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Returns a map with keys being the concepts found in the Data Cluster and as value the revisionID
-     *
+     * 
      * @param dataClusterPOJOPK A data cluster PK.
      * @param universe Universe
      * @return A {@link TreeMap} of concept names to revision IDs
@@ -1044,8 +1049,8 @@ public class ItemCtrl2Bean implements SessionBean {
                 if (totalItemsInDataContainer > threshold) {
                     if (LOGGER.isDebugEnabled()) {
                         LOGGER.debug("Won't calculate concepts in DataCluster \"" + dataClusterPOJOPK.getUniqueId() //$NON-NLS-1$
-                        + "\", because total items in data container " + totalItemsInDataContainer //$NON-NLS-1$
-                        + " is over the limit " + threshold + "! "); //$NON-NLS-1$ //$NON-NLS-2$
+                                + "\", because total items in data container " + totalItemsInDataContainer //$NON-NLS-1$
+                                + " is over the limit " + threshold + "! "); //$NON-NLS-1$ //$NON-NLS-2$
                     }
                     return null;
                 }
@@ -1122,7 +1127,7 @@ public class ItemCtrl2Bean implements SessionBean {
     public long countItemsByCustomFKFilters(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, String injectedXpath)
             throws XtentisException {
         try {
-            IWhereItem whereItem = new WhereAnd(Arrays.<IWhereItem>asList(new CustomWhereCondition(injectedXpath)));
+            IWhereItem whereItem = new WhereAnd(Arrays.<IWhereItem> asList(new CustomWhereCondition(injectedXpath)));
             return count(dataClusterPOJOPK, conceptName, whereItem, 0);
         } catch (Exception e) {
             String err = "Unable to count the elements! "; //$NON-NLS-1$
@@ -1133,23 +1138,23 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * @param dataClusterPOJOPK A data cluster name
-     * @param viewablePaths     Viewable paths in the result
-     * @param customXPath       A custom XPath-based condition to be added as-is to the XQuery (no validation)
-     * @param whereItem         A addition where condition
-     * @param start             A start position for paging results
-     * @param limit             Size of results page.
-     * @param orderBy           A optional order by
-     * @param direction         Direction for the order by.
-     * @param returnCount       If true, returns total match count as first result.
-     * @return The equivalent of a {@link #xPathsSearch(com.amalto.core.objects.datacluster.ejb.DataClusterPOJOPK, String, java.util.ArrayList, com.amalto.xmlserver.interfaces.IWhereItem, int, String, String, int, int, boolean)} using a
-     *         custom XPath as additional condition.
+     * @param viewablePaths Viewable paths in the result
+     * @param customXPath A custom XPath-based condition to be added as-is to the XQuery (no validation)
+     * @param whereItem A addition where condition
+     * @param start A start position for paging results
+     * @param limit Size of results page.
+     * @param orderBy A optional order by
+     * @param direction Direction for the order by.
+     * @param returnCount If true, returns total match count as first result.
+     * @return The equivalent of a
+     * {@link #xPathsSearch(com.amalto.core.objects.datacluster.ejb.DataClusterPOJOPK, String, java.util.ArrayList, com.amalto.xmlserver.interfaces.IWhereItem, int, String, String, int, int, boolean)}
+     * using a custom XPath as additional condition.
      * @throws XtentisException In case of MDM server error.
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
      */
     public ArrayList<String> getItemsByCustomFKFilters(DataClusterPOJOPK dataClusterPOJOPK, ArrayList<String> viewablePaths,
-                                                       String customXPath, IWhereItem whereItem, int start, int limit,
-                                                       String orderBy, String direction, boolean returnCount)
+            String customXPath, IWhereItem whereItem, int start, int limit, String orderBy, String direction, boolean returnCount)
             throws XtentisException {
         IWhereItem customWhereCondition = new CustomWhereCondition(customXPath);
         IWhereItem xPathSearchCondition;
@@ -1158,7 +1163,8 @@ public class ItemCtrl2Bean implements SessionBean {
         } else {
             xPathSearchCondition = customWhereCondition;
         }
-        return xPathsSearch(dataClusterPOJOPK, null, viewablePaths, xPathSearchCondition, 0, orderBy, direction, start, limit, returnCount);
+        return xPathsSearch(dataClusterPOJOPK, null, viewablePaths, xPathSearchCondition, 0, orderBy, direction, start, limit,
+                returnCount);
     }
 
     public ArrayList<String> getItems(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, IWhereItem whereItem,
@@ -1173,7 +1179,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get unordered items of a Concept using an optional where condition
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param conceptName The name of the concept
      * @param whereItem The condition
@@ -1183,10 +1189,10 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param totalCountOnFirstRow If true, return total search count as first result.
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
-     *
+     * 
      */
     public ArrayList<String> getItems(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, IWhereItem whereItem,
             int spellThreshold, int start, int limit, boolean totalCountOnFirstRow) throws XtentisException {
@@ -1195,7 +1201,7 @@ public class ItemCtrl2Bean implements SessionBean {
 
     /**
      * Get potentially ordered items of a Concept using an optional where condition
-     *
+     * 
      * @param dataClusterPOJOPK The Data Cluster where to run the query
      * @param conceptName The name of the concept
      * @param whereItem The condition
@@ -1208,15 +1214,19 @@ public class ItemCtrl2Bean implements SessionBean {
      * @param totalCountOnFirstRow If true, return total search count as first result.
      * @return The ordered list of results
      * @throws XtentisException In case of error in MDM code.
-     *
+     * 
      * @ejb.interface-method view-type = "both"
      * @ejb.facade-method
-     *
+     * 
      */
     public ArrayList<String> getItems(DataClusterPOJOPK dataClusterPOJOPK, String conceptName, IWhereItem whereItem,
             int spellThreshold, String orderBy, String direction, int start, int limit, boolean totalCountOnFirstRow)
             throws XtentisException {
-    	return BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator().getItems(dataClusterPOJOPK, conceptName, whereItem, spellThreshold, orderBy, direction, start, limit, totalCountOnFirstRow);
+        return BeanDelegatorContainer
+                .getInstance()
+                .getItemCtrlDelegator()
+                .getItems(dataClusterPOJOPK, conceptName, whereItem, spellThreshold, orderBy, direction, start, limit,
+                        totalCountOnFirstRow);
     }
 
     public FKIntegrityCheckResult checkFKIntegrity(String dataCluster, String concept, String[] ids) throws XtentisException {
diff --git a/org.talend.mdm.core/src/com/amalto/core/objects/configurationinfo/assemble/ResendFaildMessageSubProc.java b/org.talend.mdm.core/src/com/amalto/core/objects/configurationinfo/assemble/ResendFaildMessageSubProc.java
index a8bf75d..61aae18 100644
--- a/org.talend.mdm.core/src/com/amalto/core/objects/configurationinfo/assemble/ResendFaildMessageSubProc.java
+++ b/org.talend.mdm.core/src/com/amalto/core/objects/configurationinfo/assemble/ResendFaildMessageSubProc.java
@@ -4,13 +4,14 @@ import com.amalto.core.delegator.BeanDelegatorContainer;
 
 /**
  * resend the failed autocommittosvn message
+ * 
  * @author achen
- *
+ * 
  */
-public class ResendFaildMessageSubProc extends AssembleSubProc{
+public class ResendFaildMessageSubProc extends AssembleSubProc {
 
-	@Override
-	public void run() throws Exception {
-		BeanDelegatorContainer.getUniqueInstance().getItemCtrlDelegator().resendFailtSvnMessage();
-	}
+    @Override
+    public void run() throws Exception {
+        BeanDelegatorContainer.getInstance().getItemCtrlDelegator().resendFailtSvnMessage();
+    }
 }
diff --git a/org.talend.mdm.core/src/com/amalto/core/storage/ItemPKCriteriaResultsWriter.java b/org.talend.mdm.core/src/com/amalto/core/storage/ItemPKCriteriaResultsWriter.java
index b9e7cb2..2d271b9 100644
--- a/org.talend.mdm.core/src/com/amalto/core/storage/ItemPKCriteriaResultsWriter.java
+++ b/org.talend.mdm.core/src/com/amalto/core/storage/ItemPKCriteriaResultsWriter.java
@@ -13,6 +13,8 @@ package com.amalto.core.storage;
 
 import com.amalto.core.storage.record.DataRecord;
 import com.amalto.core.storage.record.DataRecordWriter;
+
+import org.apache.commons.lang.StringEscapeUtils;
 import org.talend.mdm.commmon.metadata.ComplexTypeMetadata;
 import org.talend.mdm.commmon.metadata.FieldMetadata;
 
@@ -62,7 +64,7 @@ class ItemPKCriteriaResultsWriter implements DataRecordWriter {
             writer.write("<ids>"); //$NON-NLS-1$
             Collection<FieldMetadata> keyFields = itemType.getKeyFields();
             for (FieldMetadata keyField : keyFields) {
-                writer.write("<i>" + record.get(keyField) + "</i>"); //$NON-NLS-1$ //$NON-NLS-2$
+                writer.write("<i>" + StringEscapeUtils.escapeXml(String.valueOf(record.get(keyField))) + "</i>"); //$NON-NLS-1$ //$NON-NLS-2$
             }
             writer.write("</ids>"); //$NON-NLS-1$
         }
diff --git a/org.talend.mdm.core/src/com/amalto/core/storage/StorageWrapper.java b/org.talend.mdm.core/src/com/amalto/core/storage/StorageWrapper.java
index 3e04181..f03f2b4 100644
--- a/org.talend.mdm.core/src/com/amalto/core/storage/StorageWrapper.java
+++ b/org.talend.mdm.core/src/com/amalto/core/storage/StorageWrapper.java
@@ -25,6 +25,7 @@ import com.amalto.xmlserver.interfaces.ItemPKCriteria;
 import com.amalto.xmlserver.interfaces.XmlServerException;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.NotImplementedException;
+import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
 import org.talend.mdm.commmon.metadata.*;
@@ -37,6 +38,7 @@ import java.io.*;
 import java.util.*;
 
 import static com.amalto.core.query.user.UserQueryBuilder.*;
+import static com.amalto.core.query.user.UserQueryBuilder.eq;
 
 public class StorageWrapper implements IXmlServerSLWrapper {
 
@@ -49,7 +51,7 @@ public class StorageWrapper implements IXmlServerSLWrapper {
     public StorageWrapper() {
     }
 
-    private static Select getSelectTypeById(ComplexTypeMetadata type, String revisionId, String[] splitUniqueId) {
+    private static Select getSelectTypeById(ComplexTypeMetadata type, String revisionId, String[] splitUniqueId, String uniqueID) {
         ComplexTypeMetadata typeForSelect = type;
         while (typeForSelect.getSuperTypes() != null && !typeForSelect.getSuperTypes().isEmpty() && typeForSelect.getSuperTypes().size() > 0) {
             typeForSelect = (ComplexTypeMetadata) typeForSelect.getSuperTypes().iterator().next();
@@ -63,11 +65,16 @@ public class StorageWrapper implements IXmlServerSLWrapper {
                 builder.append(currentId).append('.');
             }
             throw new IllegalArgumentException("Id '" + builder.toString() + "' does not contain all required values for key of type '" + type.getName() + "'.");
-        }
-
-        int currentIndex = 2;
-        for (FieldMetadata keyField : keyFields) {
-            qb.where(eq(keyField, splitUniqueId[currentIndex++]));
+        } else if (keyFields.size() == 1) {
+            // Split unique id > keyField: if # of key elements is 1, consider all remaining value as a single value (with '.' separators).
+            String uniqueIdPrefix = splitUniqueId[0] + '.' + splitUniqueId[1] + '.';
+            String key = StringUtils.removeStart(uniqueID, uniqueIdPrefix);
+            qb.where(eq(keyFields.iterator().next(), key));
+        } else {
+            int currentIndex = 2;
+            for (FieldMetadata keyField : keyFields) {
+                qb.where(eq(keyField, splitUniqueId[currentIndex++]));
+            }
         }
         qb.getSelect().setRevisionId(revisionId);
         return qb.getSelect();
@@ -228,7 +235,7 @@ public class StorageWrapper implements IXmlServerSLWrapper {
         MetadataRepository repository = storage.getMetadataRepository();
         String typeName = splitUniqueId[1];
         ComplexTypeMetadata type = repository.getComplexType(typeName);
-        Select select = getSelectTypeById(type, revisionID, splitUniqueId);
+        Select select = getSelectTypeById(type, revisionID, splitUniqueId, uniqueID);
         StorageResults records = storage.fetch(select);
         ByteArrayOutputStream output = new ByteArrayOutputStream(1024);
         try {
@@ -239,7 +246,7 @@ public class StorageWrapper implements IXmlServerSLWrapper {
                 DataRecord result = iterator.next();
                 long timestamp = result.getRecordMetadata().getLastModificationTime();
                 String taskId = result.getRecordMetadata().getTaskId();
-                byte[] start = ("<ii><c>" + clusterName + "</c><dmn>" + clusterName + "</dmn><dmr/><sp/><t>" + timestamp + "</t><taskId>" + taskId + "</taskId><i>" + splitUniqueId[2] + "</i><p>").getBytes(); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$
+                byte[] start = ("<ii><c>" + clusterName + "</c><dmn>" + clusterName + "</dmn><dmr/><sp/><t>" + timestamp + "</t><taskId>" + taskId + "</taskId><i>" + StringEscapeUtils.escapeXml(splitUniqueId[2]) + "</i><p>").getBytes(); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$
                 output.write(start);
                 dataRecordXmlWriter.write(result, output);
                 if (iterator.hasNext()) {
@@ -308,7 +315,7 @@ public class StorageWrapper implements IXmlServerSLWrapper {
             String[] splitUniqueID = uniqueID.split("\\."); //$NON-NLS-1$
             Storage storage = getStorage(clusterName, revisionID);
             ComplexTypeMetadata type = storage.getMetadataRepository().getComplexType(typeName);
-            Select select = getSelectTypeById(type, revisionID, splitUniqueID);
+            Select select = getSelectTypeById(type, revisionID, splitUniqueID, uniqueID);
             try {
                 storage.begin();
                 storage.delete(select);
diff --git a/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/DefaultStorageClassLoader.java b/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/DefaultStorageClassLoader.java
index 204a3bc..52f9fee 100644
--- a/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/DefaultStorageClassLoader.java
+++ b/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/DefaultStorageClassLoader.java
@@ -57,7 +57,7 @@ public class DefaultStorageClassLoader extends StorageClassLoader {
             DocumentBuilder documentBuilder = factory.newDocumentBuilder();
             Document document = documentBuilder.parse(this.getClass().getResourceAsStream(EHCACHE_XML_CONFIG));
             // <diskStore path="java.io.tmpdir"/>
-            XPathExpression compile = pathFactory.compile("ehcache/diskStore"); //$NON-NLS-1$ //$NON-NLS-2$
+            XPathExpression compile = pathFactory.compile("ehcache/diskStore"); //$NON-NLS-1$
             Node node = (Node) compile.evaluate(document, XPathConstants.NODE);
             node.getAttributes().getNamedItem("path").setNodeValue(dataSource.getCacheDirectory() + '/' + dataSource.getName()); //$NON-NLS-1$
             OutputFormat format = new OutputFormat(document);
@@ -216,6 +216,8 @@ public class DefaultStorageClassLoader extends StorageClassLoader {
             case H2:
                 // Default Hibernate configuration for Hibernate forgot some JDBC type mapping.
                 return H2CustomDialect.class.getName();
+            case MYSQL:
+                return "org.hibernate.dialect.MySQLDialect"; //$NON-NLS-1$
             default:
                 throw new IllegalArgumentException("Not supported database type '" + dialectType + "'");
         }
diff --git a/org.talend.mdm.core/src/com/amalto/core/storage/record/DataRecordXmlWriter.java b/org.talend.mdm.core/src/com/amalto/core/storage/record/DataRecordXmlWriter.java
index 3055241..9aa8be9 100644
--- a/org.talend.mdm.core/src/com/amalto/core/storage/record/DataRecordXmlWriter.java
+++ b/org.talend.mdm.core/src/com/amalto/core/storage/record/DataRecordXmlWriter.java
@@ -11,6 +11,7 @@
 
 package com.amalto.core.storage.record;
 
+import com.amalto.core.metadata.MetadataUtils;
 import com.amalto.core.query.user.DateConstant;
 import com.amalto.core.query.user.DateTimeConstant;
 import com.amalto.core.query.user.TimeConstant;
@@ -248,8 +249,13 @@ public class DataRecordXmlWriter implements DataRecordWriter {
         private String getFK(DataRecord record) {
             StringBuilder builder = new StringBuilder();
             Collection<FieldMetadata> keyFields = record.getType().getKeyFields();
+            Object keyFieldValue = null;
             for (FieldMetadata keyField : keyFields) {
-                builder.append('[').append(record.get(keyField)).append(']');
+                keyFieldValue = record.get(keyField);
+                if (Types.STRING.equals(MetadataUtils.getSuperConcreteType(keyField.getType()).getName())){
+                    keyFieldValue = StringEscapeUtils.escapeXml((String)keyFieldValue);
+                }
+                builder.append('[').append(keyFieldValue).append(']');
             }
             return builder.toString();
         }
diff --git a/org.talend.mdm.core/src/com/amalto/core/util/LocalUser.java b/org.talend.mdm.core/src/com/amalto/core/util/LocalUser.java
index fa3029c..3b57096 100644
--- a/org.talend.mdm.core/src/com/amalto/core/util/LocalUser.java
+++ b/org.talend.mdm.core/src/com/amalto/core/util/LocalUser.java
@@ -15,6 +15,7 @@ import com.amalto.core.ejb.ItemPOJO;
 import com.amalto.core.objects.universe.ejb.UniversePOJO;
 
 public class LocalUser {
+
     /*
      * A very special user that is triggered by scheduled, timeout or startup processes
      */
@@ -24,7 +25,7 @@ public class LocalUser {
 
     private static ILocalUser findLocalUser() {
         if (localUser == null) {
-            localUser = BeanDelegatorContainer.getUniqueInstance().getLocalUserDelegator();
+            localUser = BeanDelegatorContainer.getInstance().getLocalUserDelegator();
         }
         return localUser;
     }
@@ -55,7 +56,7 @@ public class LocalUser {
 
     /**
      * The User in XML form as stored in the DB
-     *
+     * 
      * @return The user in the DB XML form
      */
     public String getUserXML() {
@@ -67,8 +68,8 @@ public class LocalUser {
     }
 
     /**
-     * Fetch the current user and its roles -  check XtentisLoginModule
-     *
+     * Fetch the current user and its roles - check XtentisLoginModule
+     * 
      * @return The Local User
      */
     public static ILocalUser getLocalUser() throws XtentisException {
@@ -85,7 +86,7 @@ public class LocalUser {
 
     /**
      * Logs out the user by removing it from the cache an invalidating the session
-     *
+     * 
      * @throws XtentisException
      */
     public void logout() throws XtentisException {
@@ -93,9 +94,9 @@ public class LocalUser {
     }
 
     /*****************************************************************************************
-     *
+     * 
      * Roles Checking
-     *
+     * 
      * ****************************************************************************************/
 
     /**
@@ -114,8 +115,7 @@ public class LocalUser {
     }
 
     /**
-     * Checks if the user can change the instance of the object specified
-     * Ability to change implies ability to read
+     * Checks if the user can change the instance of the object specified Ability to change implies ability to read
      */
     public boolean userCanWrite(Class<?> objectTypeClass, String instanceId) throws XtentisException {
         return findLocalUser().userCanWrite(objectTypeClass, instanceId);
@@ -123,6 +123,7 @@ public class LocalUser {
 
     /**
      * Checks if the user can read the instance of the object specified
+     * 
      * @return true is the user can read
      */
     public boolean userCanRead(Class<?> objectTypeClass, String instanceId) throws XtentisException {
diff --git a/org.talend.mdm.core/src/com/amalto/core/util/Util.java b/org.talend.mdm.core/src/com/amalto/core/util/Util.java
index e16b197..ec7144e 100644
--- a/org.talend.mdm.core/src/com/amalto/core/util/Util.java
+++ b/org.talend.mdm.core/src/com/amalto/core/util/Util.java
@@ -359,7 +359,7 @@ public class Util {
     }
 
     public static Document validate(Element element, String schema) throws Exception {
-        return BeanDelegatorContainer.getUniqueInstance().getValidationDelegator().validation(element, schema);
+        return BeanDelegatorContainer.getInstance().getValidationDelegator().validation(element, schema);
     }
 
     public static void removeXpathFromDocument(Document document, String xpath, boolean reservedRoot) throws Exception {
@@ -1607,8 +1607,8 @@ public class Util {
                 } else {
                     xml = pojo.getProjectionAsString();
                 }
-                String resultUpdateReport = Util.createUpdateReport(ids, concept, UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE, null, //$NON-NLS-1$
-                        "", clusterName); //$NON-NLS-1$
+                String resultUpdateReport = Util.createUpdateReport(ids, concept,
+                        UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE, null, "", clusterName); //$NON-NLS-1$
                 String exchangeData = mergeExchangeData(xml, resultUpdateReport);
                 final String RUNNING = "XtentisWSBean.executeTransformerV2.beforeDeleting.running";
                 TransformerContext context = new TransformerContext(new TransformerV2POJOPK("beforeDeleting_" + concept));
diff --git a/org.talend.mdm.core/test/com/amalto/core/query/DataRecordCreationTest.java b/org.talend.mdm.core/test/com/amalto/core/query/DataRecordCreationTest.java
index 4631ab2..04b1a2a 100644
--- a/org.talend.mdm.core/test/com/amalto/core/query/DataRecordCreationTest.java
+++ b/org.talend.mdm.core/test/com/amalto/core/query/DataRecordCreationTest.java
@@ -181,7 +181,7 @@ public class DataRecordCreationTest extends StorageTestCase {
         assertEquals(1, ((List) o).size());
         assertTrue(((DataRecord) ((List) o).get(0)) instanceof DataRecord);
         assertEquals("Supplier", ((DataRecord) ((List) o).get(0)).getType().getName());
-        assertEquals(1, ((DataRecord) ((List) o).get(0)).get("Id"));
+        assertEquals("1", ((DataRecord) ((List) o).get(0)).get("Id"));
 
         o = dataRecord.get("Family");
         assertNotNull(o);
diff --git a/org.talend.mdm.core/test/com/amalto/core/query/StorageFullTextTest.java b/org.talend.mdm.core/test/com/amalto/core/query/StorageFullTextTest.java
index d37ea8a..a883c7e 100644
--- a/org.talend.mdm.core/test/com/amalto/core/query/StorageFullTextTest.java
+++ b/org.talend.mdm.core/test/com/amalto/core/query/StorageFullTextTest.java
@@ -146,7 +146,7 @@ public class StorageFullTextTest extends StorageTestCase {
             assertEquals(2, records.getCount());
             int currentId = -1;
             for (DataRecord record : records) {
-                Integer id = (Integer) record.get("Id");
+                Integer id = Integer.parseInt((String) record.get("Id"));
                 assertTrue(id > currentId);
                 currentId = id;
             }
@@ -164,7 +164,7 @@ public class StorageFullTextTest extends StorageTestCase {
             assertEquals(2, records.getCount());
             int currentId = Integer.MAX_VALUE;
             for (DataRecord record : records) {
-                Integer id = (Integer) record.get("Id");
+                Integer id = Integer.parseInt((String) record.get("Id"));
                 assertTrue(id < currentId);
                 currentId = id;
             }
diff --git a/org.talend.mdm.core/test/com/amalto/core/query/StorageQueryTest.java b/org.talend.mdm.core/test/com/amalto/core/query/StorageQueryTest.java
index c8e8ac8..b488490 100644
--- a/org.talend.mdm.core/test/com/amalto/core/query/StorageQueryTest.java
+++ b/org.talend.mdm.core/test/com/amalto/core/query/StorageQueryTest.java
@@ -35,11 +35,6 @@ import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
 
-import com.amalto.core.query.optimization.ConfigurableContainsOptimizer;
-import com.amalto.core.query.optimization.RangeOptimizer;
-import com.amalto.core.query.user.*;
-import com.amalto.core.storage.datasource.DataSource;
-import com.amalto.core.storage.datasource.RDBMSDataSource;
 import org.apache.commons.io.output.NullOutputStream;
 import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.lang.StringUtils;
@@ -48,11 +43,34 @@ import org.talend.mdm.commmon.metadata.ContainedTypeFieldMetadata;
 import org.talend.mdm.commmon.metadata.FieldMetadata;
 
 import com.amalto.core.metadata.MetadataUtils;
+import com.amalto.core.query.optimization.ConfigurableContainsOptimizer;
+import com.amalto.core.query.optimization.RangeOptimizer;
 import com.amalto.core.query.optimization.UpdateReportOptimizer;
+import com.amalto.core.query.user.Alias;
+import com.amalto.core.query.user.BinaryLogicOperator;
+import com.amalto.core.query.user.Compare;
+import com.amalto.core.query.user.Condition;
+import com.amalto.core.query.user.Expression;
+import com.amalto.core.query.user.Field;
+import com.amalto.core.query.user.FieldFullText;
+import com.amalto.core.query.user.IntegerConstant;
+import com.amalto.core.query.user.LongConstant;
+import com.amalto.core.query.user.OrderBy;
+import com.amalto.core.query.user.Predicate;
+import com.amalto.core.query.user.Range;
+import com.amalto.core.query.user.Select;
+import com.amalto.core.query.user.StringConstant;
+import com.amalto.core.query.user.Timestamp;
+import com.amalto.core.query.user.TypedExpression;
+import com.amalto.core.query.user.UserQueryBuilder;
+import com.amalto.core.query.user.UserQueryHelper;
 import com.amalto.core.server.ServerContext;
 import com.amalto.core.storage.Storage;
 import com.amalto.core.storage.StorageResults;
 import com.amalto.core.storage.StorageType;
+import com.amalto.core.storage.StorageWrapper;
+import com.amalto.core.storage.datasource.DataSource;
+import com.amalto.core.storage.datasource.RDBMSDataSource;
 import com.amalto.core.storage.hibernate.HibernateStorage;
 import com.amalto.core.storage.record.DataRecord;
 import com.amalto.core.storage.record.DataRecordReader;
@@ -162,6 +180,18 @@ public class StorageQueryTest extends StorageTestCase {
                 + "    <SupplierName>Renault</SupplierName>\n" + "    <Contact>" + "        <Name>Jean Voiture</Name>\n"
                 + "        <Phone>33123456789</Phone>\n" + "        <Email>test@test.org</Email>\n" + "    </Contact>\n"
                 + "</Supplier>"));
+        allRecords.add(factory.read("1", repository, supplier, "<Supplier>\n" + "    <Id>.127</Id>\n"
+                + "    <SupplierName>Renault</SupplierName>\n" + "    <Contact>" + "        <Name>Jean Voiture</Name>\n"
+                + "        <Phone>33123456789</Phone>\n" + "        <Email>test@test.org</Email>\n" + "    </Contact>\n"
+                + "</Supplier>"));
+        allRecords.add(factory.read("1", repository, supplier, "<Supplier>\n" + "    <Id>127.</Id>\n"
+                + "    <SupplierName>Renault</SupplierName>\n" + "    <Contact>" + "        <Name>Jean Voiture</Name>\n"
+                + "        <Phone>33123456789</Phone>\n" + "        <Email>test@test.org</Email>\n" + "    </Contact>\n"
+                + "</Supplier>"));
+        allRecords.add(factory.read("1", repository, supplier, "<Supplier>\n" + "    <Id>127.0.0.1</Id>\n"
+                + "    <SupplierName>Renault</SupplierName>\n" + "    <Contact>" + "        <Name>Jean Voiture</Name>\n"
+                + "        <Phone>33123456789</Phone>\n" + "        <Email>test@test.org</Email>\n" + "    </Contact>\n"
+                + "</Supplier>"));
         allRecords.add(factory.read("1", repository, supplier, "<Supplier>\n" + "    <Id>2</Id>\n"
                 + "    <SupplierName>Starbucks Talend</SupplierName>\n" + "    <Contact>" + "        <Name>Jean Cafe</Name>\n"
                 + "        <Phone>33234567890</Phone>\n" + "        <Email>test@testfactory.org</Email>\n" + "    </Contact>\n"
@@ -330,6 +360,153 @@ public class StorageQueryTest extends StorageTestCase {
         }
     }
 
+    public void testSelectByIdIncludingDots() throws Exception {
+        Collection<FieldMetadata> keyFields = supplier.getKeyFields();
+        assertEquals(1, keyFields.size());
+        FieldMetadata keyField = keyFields.iterator().next();
+
+        UserQueryBuilder qb = from(supplier).where(eq(supplier.getField("Id"), "127.0.0.1"));
+
+        StorageResults results = storage.fetch(qb.getSelect());
+        try {
+            assertEquals(1, results.getSize());
+            assertEquals(1, results.getCount());
+            for (DataRecord result : results) {
+                assertNotNull(result.get(keyField));
+            }
+        } finally {
+            results.close();
+        }
+        // Wrapper test
+        StorageWrapper wrapper = new StorageWrapper() {
+
+            @Override
+            protected Storage getStorage(String dataClusterName, String revisionId) {
+                return storage;
+            }
+
+            @Override
+            protected Storage getStorage(String dataClusterName) {
+                return storage;
+            }
+        };
+        // Get document by id
+        String documentAsString = wrapper.getDocumentAsString(null, "Test", "Test.Supplier.127.0.0.1");
+        assertNotNull(documentAsString);
+        // Get cluster ids
+        String[] ids = wrapper.getAllDocumentsUniqueID(null, "Test");
+        boolean found = false;
+        for (String id : ids) {
+            if ("Test.Supplier.127.0.0.1".equals(id)) {
+                found = true;
+                break;
+            }
+        }
+        assertTrue(found);
+        // Delete document
+        long result = wrapper.deleteDocument(null, "Test", "Test.Supplier.127.0.0.1", "");
+        assertTrue(result >= 0);
+        wrapper.getAllDocumentsUniqueID(null, "Test");
+    }
+
+    public void testSelectByIdIncludingDots2() throws Exception {
+        Collection<FieldMetadata> keyFields = supplier.getKeyFields();
+        assertEquals(1, keyFields.size());
+        FieldMetadata keyField = keyFields.iterator().next();
+
+        UserQueryBuilder qb = from(supplier).where(eq(supplier.getField("Id"), ".127"));
+
+        StorageResults results = storage.fetch(qb.getSelect());
+        try {
+            assertEquals(1, results.getSize());
+            assertEquals(1, results.getCount());
+            for (DataRecord result : results) {
+                assertNotNull(result.get(keyField));
+            }
+        } finally {
+            results.close();
+        }
+        // Wrapper test
+        StorageWrapper wrapper = new StorageWrapper() {
+
+            @Override
+            protected Storage getStorage(String dataClusterName, String revisionId) {
+                return storage;
+            }
+
+            @Override
+            protected Storage getStorage(String dataClusterName) {
+                return storage;
+            }
+        };
+        // Get document by id
+        String documentAsString = wrapper.getDocumentAsString(null, "Test", "Test.Supplier..127");
+        assertNotNull(documentAsString);
+        // Get cluster ids
+        String[] ids = wrapper.getAllDocumentsUniqueID(null, "Test");
+        boolean found = false;
+        for (String id : ids) {
+            if ("Test.Supplier..127".equals(id)) {
+                found = true;
+                break;
+            }
+        }
+        assertTrue(found);
+        // Delete document
+        long result = wrapper.deleteDocument(null, "Test", "Test.Supplier..127", "");
+        assertTrue(result >= 0);
+        wrapper.getAllDocumentsUniqueID(null, "Test");
+    }
+
+    public void testSelectByIdIncludingDots3() throws Exception {
+        Collection<FieldMetadata> keyFields = supplier.getKeyFields();
+        assertEquals(1, keyFields.size());
+        FieldMetadata keyField = keyFields.iterator().next();
+
+        UserQueryBuilder qb = from(supplier).where(eq(supplier.getField("Id"), "127."));
+
+        StorageResults results = storage.fetch(qb.getSelect());
+        try {
+            assertEquals(1, results.getSize());
+            assertEquals(1, results.getCount());
+            for (DataRecord result : results) {
+                assertNotNull(result.get(keyField));
+            }
+        } finally {
+            results.close();
+        }
+        // Wrapper test
+        StorageWrapper wrapper = new StorageWrapper() {
+
+            @Override
+            protected Storage getStorage(String dataClusterName, String revisionId) {
+                return storage;
+            }
+
+            @Override
+            protected Storage getStorage(String dataClusterName) {
+                return storage;
+            }
+        };
+        // Get document by id
+        String documentAsString = wrapper.getDocumentAsString(null, "Test", "Test.Supplier.127.");
+        assertNotNull(documentAsString);
+        // Get cluster ids
+        String[] ids = wrapper.getAllDocumentsUniqueID(null, "Test");
+        boolean found = false;
+        for (String id : ids) {
+            if ("Test.Supplier.127.".equals(id)) {
+                found = true;
+                break;
+            }
+        }
+        assertTrue(found);
+        // Delete document
+        long result = wrapper.deleteDocument(null, "Test", "Test.Supplier.127.", "");
+        assertTrue(result >= 0);
+        wrapper.getAllDocumentsUniqueID(null, "Test");
+    }
+
     public void testSelectByIdExclusion() throws Exception {
         Collection<FieldMetadata> keyFields = person.getKeyFields();
         assertEquals(1, keyFields.size());
@@ -1315,9 +1492,9 @@ public class StorageQueryTest extends StorageTestCase {
     }
 
     public void testRangeOnTimestampWithCondition() throws Exception {
-        UserQueryBuilder qb = UserQueryBuilder.from(person).where(or(
-                and(gte(timestamp(), "0"), lte(timestamp(), String.valueOf(System.currentTimeMillis()))),
-                eq(person.getField("id"), "1")));
+        UserQueryBuilder qb = UserQueryBuilder.from(person).where(
+                or(and(gte(timestamp(), "0"), lte(timestamp(), String.valueOf(System.currentTimeMillis()))),
+                        eq(person.getField("id"), "1")));
         StorageResults results = storage.fetch(qb.getSelect());
         try {
             assertEquals(3, results.getCount());
@@ -1325,9 +1502,9 @@ public class StorageQueryTest extends StorageTestCase {
             results.close();
         }
 
-        qb = UserQueryBuilder.from(person).where(and(
-                and(gte(timestamp(), "0"), lte(timestamp(), String.valueOf(System.currentTimeMillis()))),
-                eq(person.getField("id"), "1")));
+        qb = UserQueryBuilder.from(person).where(
+                and(and(gte(timestamp(), "0"), lte(timestamp(), String.valueOf(System.currentTimeMillis()))),
+                        eq(person.getField("id"), "1")));
         results = storage.fetch(qb.getSelect());
         try {
             assertEquals(1, results.getCount());
@@ -1561,7 +1738,7 @@ public class StorageQueryTest extends StorageTestCase {
         storage.delete(qb.getSelect());
         storage.commit();
     }
-    
+
     public void testUpdateReportContentKeyWordsQuery() throws Exception {
         StringBuilder builder = new StringBuilder();
         InputStream testResource = this.getClass().getResourceAsStream("UpdateReportCreationTest.xml");
@@ -1586,7 +1763,9 @@ public class StorageQueryTest extends StorageTestCase {
         criteria.setClusterName("UpdateReport");
         criteria.setContentKeywords("Product");
         String contentKeywords = criteria.getContentKeywords();
-        // build Storage whereCondition, the codes come from com.amalto.core.storage.StorageWrapper.buildQueryBuilder(UserQueryBuilder, ItemPKCriteria, ComplexTypeMetadata)
+        // build Storage whereCondition, the codes come from
+        // com.amalto.core.storage.StorageWrapper.buildQueryBuilder(UserQueryBuilder, ItemPKCriteria,
+        // ComplexTypeMetadata)
         Condition condition = null;
         UserQueryBuilder qb = from(updateReport);
         for (FieldMetadata field : updateReport.getFields()) {
@@ -1611,9 +1790,9 @@ public class StorageQueryTest extends StorageTestCase {
 
         storage.begin();
         storage.delete(qb.getSelect());
-        storage.commit();        
+        storage.commit();
     }
-    
+
     public void testUpdateReportTimeInMillisQuery() throws Exception {
         StringBuilder builder = new StringBuilder();
         InputStream testResource = this.getClass().getResourceAsStream("UpdateReportCreationTest.xml");
@@ -1638,7 +1817,9 @@ public class StorageQueryTest extends StorageTestCase {
         criteria.setClusterName("UpdateReport");
         criteria.setContentKeywords("1307525701796");
         String contentKeywords = criteria.getContentKeywords();
-        // build Storage whereCondition, the codes come from com.amalto.core.storage.StorageWrapper.buildQueryBuilder(UserQueryBuilder, ItemPKCriteria, ComplexTypeMetadata)
+        // build Storage whereCondition, the codes come from
+        // com.amalto.core.storage.StorageWrapper.buildQueryBuilder(UserQueryBuilder, ItemPKCriteria,
+        // ComplexTypeMetadata)
         Condition condition = null;
         UserQueryBuilder qb = from(updateReport);
         for (FieldMetadata field : updateReport.getFields()) {
@@ -1663,9 +1844,9 @@ public class StorageQueryTest extends StorageTestCase {
 
         storage.begin();
         storage.delete(qb.getSelect());
-        storage.commit();        
+        storage.commit();
     }
-    
+
     public void testUpdateReportQueryByKeys() throws Exception {
         StringBuilder builder = new StringBuilder();
         InputStream testResource = this.getClass().getResourceAsStream("UpdateReportCreationTest.xml");
@@ -1687,7 +1868,8 @@ public class StorageQueryTest extends StorageTestCase {
         }
 
         UserQueryBuilder qb = from(updateReport).where(
-                and(eq(updateReport.getField("Source"), "genericUI"), eq(updateReport.getField("TimeInMillis"), String.valueOf(1307525701796L))));
+                and(eq(updateReport.getField("Source"), "genericUI"),
+                        eq(updateReport.getField("TimeInMillis"), String.valueOf(1307525701796L))));
         StorageResults results = storage.fetch(qb.getSelect());
         StringWriter storedDocument = new StringWriter();
         try {
@@ -2173,7 +2355,7 @@ public class StorageQueryTest extends StorageTestCase {
         LongConstant value = (LongConstant) compare.getRight();
         assertEquals(Long.valueOf(1364227200000L), value.getValue());
     }
-    
+
     public void testDuplicateFieldNames() {
         UserQueryBuilder qb = from(product);
 
@@ -2271,7 +2453,7 @@ public class StorageQueryTest extends StorageTestCase {
         sb.append("\t<ProductFamily_Name/>\n");
         sb.append("</result>");
         assertEquals(sb.toString(), resultsAsString.get(1));
-        
+
         // Test Fetch Product by whereCondition = (Product/Id Equals 1) and (Product/Family Joins ProductFamily/Id)
         WhereCondition condition = new WhereCondition("Product/Id", "=", "1", "&", false);
         fullWhere.add(condition);
@@ -2422,16 +2604,14 @@ public class StorageQueryTest extends StorageTestCase {
         assertEquals(0, results.getCount());
 
         qb = from(product);
-        qb.where(UserQueryHelper.buildCondition(qb,
-                new WhereCondition("Product/Features/Sizes/Size[2]", WhereCondition.EQUALS, "Medium", WhereCondition.PRE_NONE),
-                repository));
+        qb.where(UserQueryHelper.buildCondition(qb, new WhereCondition("Product/Features/Sizes/Size[2]", WhereCondition.EQUALS,
+                "Medium", WhereCondition.PRE_NONE), repository));
         results = storage.fetch(qb.getSelect());
         assertEquals(1, results.getCount());
 
         qb = from(product);
-        qb.where(UserQueryHelper.buildCondition(qb,
-                new WhereCondition("Product/Features/Sizes/Size[1]", WhereCondition.EQUALS, "Medium", WhereCondition.PRE_NONE),
-                repository));
+        qb.where(UserQueryHelper.buildCondition(qb, new WhereCondition("Product/Features/Sizes/Size[1]", WhereCondition.EQUALS,
+                "Medium", WhereCondition.PRE_NONE), repository));
         results = storage.fetch(qb.getSelect());
         assertEquals(0, results.getCount());
     }
@@ -2548,22 +2728,22 @@ public class StorageQueryTest extends StorageTestCase {
 
     public void testJoinOptimization() throws Exception {
         DataRecordReader<String> factory = new XmlStringDataRecordReader();
-                List<DataRecord> allRecords = new LinkedList<DataRecord>();
-                allRecords.add(factory.read("1", repository, person,
-                        "<Person><id>5</id><score>200000.00</score><lastname>Leblanc</lastname><middlename>John"
-                                + "</middlename><firstname>Juste</firstname><addresses><address>[3][false]"
-                                + "</address><address>[1][false]</address></addresses><age>30</age>"
-                                + "<knownAddresses><knownAddress><Street>Street 1</Street><City>City 1</City>"
-                                + "<Phone>012345</Phone></knownAddress>"
-                                + "<knownAddress><Street>Street 2</Street><City>City 2</City><Phone>567890"
-                                + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>" + "<Status>Friend</Status></Person>"));
-                storage.begin();
-                storage.update(allRecords);
-                storage.commit();
-
-
-        UserQueryBuilder qb = UserQueryBuilder.from(person)
-                .where(eq(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"));
+        List<DataRecord> allRecords = new LinkedList<DataRecord>();
+        allRecords.add(factory.read("1", repository, person,
+                "<Person><id>5</id><score>200000.00</score><lastname>Leblanc</lastname><middlename>John"
+                        + "</middlename><firstname>Juste</firstname><addresses><address>[3][false]"
+                        + "</address><address>[1][false]</address></addresses><age>30</age>"
+                        + "<knownAddresses><knownAddress><Street>Street 1</Street><City>City 1</City>"
+                        + "<Phone>012345</Phone></knownAddress>"
+                        + "<knownAddress><Street>Street 2</Street><City>City 2</City><Phone>567890"
+                        + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>"
+                        + "<Status>Friend</Status></Person>"));
+        storage.begin();
+        storage.update(allRecords);
+        storage.commit();
+
+        UserQueryBuilder qb = UserQueryBuilder.from(person).where(
+                eq(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"));
         StorageResults results = storage.fetch(qb.getSelect());
         for (DataRecord result : results) {
             assertEquals(5, result.get("id"));
@@ -2580,7 +2760,8 @@ public class StorageQueryTest extends StorageTestCase {
                         + "<knownAddresses><knownAddress><Street>Street 1</Street><City>City 1</City>"
                         + "<Phone>012345</Phone></knownAddress>"
                         + "<knownAddress><Street>Street 2</Street><City>City 2</City><Phone>567890"
-                        + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>" + "<Status>Friend</Status></Person>"));
+                        + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>"
+                        + "<Status>Friend</Status></Person>"));
         allRecords.add(factory.read("1", repository, person,
                 "<Person><id>6</id><score>666.00</score><lastname>Leblanc</lastname><middlename>John"
                         + "</middlename><firstname>Juste</firstname><addresses><address>[3][false]"
@@ -2588,13 +2769,15 @@ public class StorageQueryTest extends StorageTestCase {
                         + "<knownAddresses><knownAddress><Street>Street 1</Street><City>City 1</City>"
                         + "<Phone>012345</Phone></knownAddress>"
                         + "<knownAddress><Street>Street 2</Street><City>City 2</City><Phone>567890"
-                        + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>" + "<Status>Friend</Status></Person>"));
+                        + "</Phone><Notes><Note>test note</Note></Notes></knownAddress></knownAddresses>"
+                        + "<Status>Friend</Status></Person>"));
         storage.begin();
         storage.update(allRecords);
         storage.commit();
 
-        UserQueryBuilder qb = UserQueryBuilder.from(person)
-                .where(or(eq(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"), eq(person.getField("score"), "666")));
+        UserQueryBuilder qb = UserQueryBuilder.from(person).where(
+                or(eq(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"),
+                        eq(person.getField("score"), "666")));
         StorageResults results = storage.fetch(qb.getSelect());
         // assertEquals(2, results.getCount()); -> should be 3
         assertEquals(3, results.getCount());
@@ -2603,11 +2786,10 @@ public class StorageQueryTest extends StorageTestCase {
         }
 
         /*
-        qb = UserQueryBuilder.from(person)
-                .where(and(eq(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"), eq(person.getField("score"), "777")));
-        results = storage.fetch(qb.getSelect());
-        assertEquals(0, results.getCount());
-        */
+         * qb = UserQueryBuilder.from(person) .where(and(eq(person.getField("knownAddresses/knownAddress/Notes/Note"),
+         * "test note"), eq(person.getField("score"), "777"))); results = storage.fetch(qb.getSelect()); assertEquals(0,
+         * results.getCount());
+         */
     }
 
     public void testContainsOptimization() throws Exception {
@@ -2619,8 +2801,8 @@ public class StorageQueryTest extends StorageTestCase {
         testDataSource.setSupportFullText(true);
         ConfigurableContainsOptimizer optimizer = new ConfigurableContainsOptimizer(testDataSource);
         // Default optimization
-        UserQueryBuilder qb = UserQueryBuilder.from(person)
-                .where(contains(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"));
+        UserQueryBuilder qb = UserQueryBuilder.from(person).where(
+                contains(person.getField("knownAddresses/knownAddress/Notes/Note"), "test note"));
         Select select = qb.getSelect();
         assertTrue(select.getCondition() instanceof Compare);
         assertTrue(((Compare) select.getCondition()).getPredicate() == Predicate.CONTAINS);
@@ -2652,9 +2834,10 @@ public class StorageQueryTest extends StorageTestCase {
         assertTrue(select.getCondition() instanceof FieldFullText);
         assertEquals("test note", ((FieldFullText) select.getCondition()).getValue());
     }
-    
+
     public void testQueryWithFK() throws Exception {
-        UserQueryBuilder qb = from(product).where(and(contains(product.getField("Id"), "1"), eq(product.getField("Family"), "[2]")));
+        UserQueryBuilder qb = from(product).where(
+                and(contains(product.getField("Id"), "1"), eq(product.getField("Family"), "[2]")));
         StorageResults results = storage.fetch(qb.getSelect());
         try {
             assertEquals(1, results.getCount());
@@ -2666,8 +2849,8 @@ public class StorageQueryTest extends StorageTestCase {
     public void testRangeOptimization() throws Exception {
         RangeOptimizer optimizer = new RangeOptimizer();
         // No optimization
-        UserQueryBuilder qb = UserQueryBuilder.from(person)
-                .where(and(gte(person.getField("id"), "0"), lte(person.getField("id"), "1")));
+        UserQueryBuilder qb = UserQueryBuilder.from(person).where(
+                and(gte(person.getField("id"), "0"), lte(person.getField("id"), "1")));
         Select select = qb.getSelect();
         assertTrue(select.getCondition() instanceof BinaryLogicOperator);
         // Optimization
@@ -2676,23 +2859,22 @@ public class StorageQueryTest extends StorageTestCase {
         assertEquals(new IntegerConstant(0), ((Range) select.getCondition()).getStart());
         assertEquals(new IntegerConstant(1), ((Range) select.getCondition()).getEnd());
         // Optimization
-        qb = UserQueryBuilder.from(person)
-                .where(and(lte(person.getField("id"), "1"), gte(person.getField("id"), "0")));
+        qb = UserQueryBuilder.from(person).where(and(lte(person.getField("id"), "1"), gte(person.getField("id"), "0")));
         select = qb.getSelect();
         optimizer.optimize(select);
         assertTrue(select.getCondition() instanceof Range);
         assertEquals(new IntegerConstant(0), ((Range) select.getCondition()).getStart());
         assertEquals(new IntegerConstant(1), ((Range) select.getCondition()).getEnd());
         // No optimization (not applicable)
-        qb = UserQueryBuilder.from(person)
-                .where(and(and(gte(person.getField("id"), "0"), eq(person.getField("score"), "0")), lte(person.getField("id"), "1")));
+        qb = UserQueryBuilder.from(person).where(
+                and(and(gte(person.getField("id"), "0"), eq(person.getField("score"), "0")), lte(person.getField("id"), "1")));
         select = qb.getSelect();
         optimizer.optimize(select);
         assertTrue(select.getCondition() instanceof BinaryLogicOperator);
         assertFalse(((BinaryLogicOperator) select.getCondition()).getLeft() instanceof Range);
         // Optimization
-        qb = UserQueryBuilder.from(person)
-                .where(and(and(gte(person.getField("id"), "0"), lte(person.getField("id"), "1")), eq(person.getField("score"), "0")));
+        qb = UserQueryBuilder.from(person).where(
+                and(and(gte(person.getField("id"), "0"), lte(person.getField("id"), "1")), eq(person.getField("score"), "0")));
         select = qb.getSelect();
         optimizer.optimize(select);
         assertTrue(select.getCondition() instanceof BinaryLogicOperator);
diff --git a/org.talend.mdm.core/test/com/amalto/core/query/TestDataRecordCreator.java b/org.talend.mdm.core/test/com/amalto/core/query/TestDataRecordCreator.java
index cde0364..567934a 100644
--- a/org.talend.mdm.core/test/com/amalto/core/query/TestDataRecordCreator.java
+++ b/org.talend.mdm.core/test/com/amalto/core/query/TestDataRecordCreator.java
@@ -11,6 +11,7 @@
 
 package com.amalto.core.query;
 
+import com.amalto.core.metadata.MetadataUtils;
 import org.talend.mdm.commmon.metadata.*;
 import com.amalto.core.storage.record.DataRecord;
 import com.amalto.core.storage.record.metadata.UnsupportedDataRecordMetadata;
@@ -25,6 +26,8 @@ class TestDataRecordCreator extends DefaultMetadataVisitor<DataRecord> {
 
     private Stack<DataRecord> records = new Stack<DataRecord>();
 
+    private int currentId;
+
     @Override
     public DataRecord visit(ComplexTypeMetadata complexType) {
         records.push(new DataRecord(complexType, UnsupportedDataRecordMetadata.INSTANCE));
@@ -66,18 +69,15 @@ class TestDataRecordCreator extends DefaultMetadataVisitor<DataRecord> {
 
     private Object createSimpleValue(FieldMetadata field) {
         if (field.isKey()) {
-            TypeMetadata type = field.getType();
-            while (!type.getSuperTypes().isEmpty()) {
-                type = type.getSuperTypes().iterator().next();
-            }
+            TypeMetadata type = MetadataUtils.getSuperConcreteType(field.getType());
             if ("string".equals(type.getName())) {
-                return "1";
+                return String.valueOf(currentId++);
             } else if ("int".equals(type.getName())
                     || "integer".equals(type.getName())
                     || "unsignedInt".equals(type.getName())) {
-                return 1;
+                return currentId++;
             } else if ("unsignedShort".equals(type.getName())) {
-                return ((short) 1);
+                return ((short) currentId++);
             } else if ("boolean".equals(type.getName())) {
                 return false;
             } else {
@@ -87,11 +87,7 @@ class TestDataRecordCreator extends DefaultMetadataVisitor<DataRecord> {
 
         // Move up the inheritance tree to find the "most generic" type (used when simple types inherits from XSD types,
         // in this case, the XSD type is interesting, not the custom one).
-        TypeMetadata type = field.getType();
-        while (!type.getSuperTypes().isEmpty()) {
-            type = type.getSuperTypes().iterator().next();
-        }
-
+        TypeMetadata type = MetadataUtils.getSuperConcreteType(field.getType());
         Random random = new Random(System.currentTimeMillis());
         if (!(field instanceof ContainedTypeFieldMetadata)) { // Don't set contained (anonymous types) values
             if ("string".equals(type.getName())) {
diff --git a/org.talend.mdm.core/test/com/amalto/core/query/metadata.xsd b/org.talend.mdm.core/test/com/amalto/core/query/metadata.xsd
index 45eadeb..2d45930 100644
--- a/org.talend.mdm.core/test/com/amalto/core/query/metadata.xsd
+++ b/org.talend.mdm.core/test/com/amalto/core/query/metadata.xsd
@@ -673,7 +673,7 @@
         </xsd:annotation>
         <xsd:complexType>
             <xsd:all>
-                <xsd:element maxOccurs="1" minOccurs="1" name="Id" type="xsd:integer">
+                <xsd:element maxOccurs="1" minOccurs="1" name="Id" type="xsd:string">
                     <xsd:annotation>
                         <xsd:appinfo source="X_Create">System_Admin</xsd:appinfo>
                         <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
diff --git a/org.talend.mdm.core/test/com/amalto/core/storage/ItemPKCriteriaResultsWriterTest.java b/org.talend.mdm.core/test/com/amalto/core/storage/ItemPKCriteriaResultsWriterTest.java
new file mode 100644
index 0000000..973e7cb
--- /dev/null
+++ b/org.talend.mdm.core/test/com/amalto/core/storage/ItemPKCriteriaResultsWriterTest.java
@@ -0,0 +1,142 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package com.amalto.core.storage;
+
+import static com.amalto.core.query.user.UserQueryBuilder.*;
+
+import java.util.Collection;
+import java.util.Iterator;
+
+import junit.framework.TestCase;
+
+import org.talend.mdm.commmon.metadata.ComplexTypeMetadata;
+import org.talend.mdm.commmon.metadata.FieldMetadata;
+import org.talend.mdm.commmon.metadata.MetadataRepository;
+
+import com.amalto.core.load.io.ResettableStringWriter;
+import com.amalto.core.query.StorageTestCase;
+import com.amalto.core.query.user.Select;
+import com.amalto.core.query.user.UserQueryBuilder;
+import com.amalto.core.server.MockServerLifecycle;
+import com.amalto.core.server.ServerContext;
+import com.amalto.core.storage.hibernate.HibernateStorage;
+import com.amalto.core.storage.record.DataRecord;
+import com.amalto.core.storage.record.DataRecordWriter;
+
+/**
+ * created by suplch on 2013-7-1 Detailled comment
+ * 
+ */
+public class ItemPKCriteriaResultsWriterTest extends TestCase {
+
+    public ItemPKCriteriaResultsWriterTest() {
+        ServerContext.INSTANCE.get(new MockServerLifecycle());
+    }
+
+    public void testWriter() throws Exception {
+
+        final MetadataRepository repository = prepareMetadata("Product.xsd"); //$NON-NLS-1$
+        final Storage storage = prepareStorage(repository);
+
+        StorageWrapper wrapper = new StorageWrapper() {
+
+            @Override
+            protected Storage getStorage(String dataClusterName) {
+                return storage;
+            }
+
+            @Override
+            protected Storage getStorage(String dataClusterName, String revisionId) {
+                return storage;
+            }
+        };
+
+        String xml = "<ii><c>Product</c><n>Product</n><dmn>Product</dmn><i>333</i><t>1372654669313</t><taskId></taskId><p> <Product><Id>333</Id><Name>333</Name><Description>333</Description><Price>333</Price></Product></p></ii>"; //$NON-NLS-1$
+        wrapper.putDocumentFromString(xml, "Product.Product.333", "Product", null); //$NON-NLS-1$ //$NON-NLS-2$
+
+        ComplexTypeMetadata typeForSelect = repository.getComplexType("Product"); //$NON-NLS-1$
+        Select select = getSelectTypeById(typeForSelect, null, new String[] { "Product", "Product", "333" }); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
+
+        StorageResults records = storage.fetch(select);
+        Iterator<DataRecord> iterator = records.iterator();
+
+        DataRecordWriter writer = new ItemPKCriteriaResultsWriter(typeForSelect.getName(), typeForSelect);
+
+        assertTrue(iterator.hasNext());
+        ResettableStringWriter stringWriter = new ResettableStringWriter();
+        DataRecord record = iterator.next();
+        writer.write(record, stringWriter);
+        String resultXml = stringWriter.toString();
+        assertNotNull(resultXml);
+        assertTrue(resultXml.contains("<i>333</i>")); //$NON-NLS-1$
+
+        xml = "<ii><c>Product</c><n>Product</n><dmn>Product</dmn><i>&quot;5&lt;6&gt;4&quot;&amp;7</i><t>1372654669313</t><taskId></taskId><p> <Product><Id>&quot;5&lt;6&gt;4&quot;&amp;7</Id><Name>333</Name><Description>333</Description><Price>333</Price></Product></p></ii>"; //$NON-NLS-1$
+        wrapper.putDocumentFromString(xml, "Product.Product.\"5<6>4\"&7", "Product", null); //$NON-NLS-1$ //$NON-NLS-2$
+
+        typeForSelect = repository.getComplexType("Product"); //$NON-NLS-1$
+        select = getSelectTypeById(typeForSelect, null, new String[] { "Product", "Product", "\"5<6>4\"&7" }); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
+
+        records = storage.fetch(select);
+        iterator = records.iterator();
+
+        writer = new ItemPKCriteriaResultsWriter(typeForSelect.getName(), typeForSelect);
+
+        assertTrue(iterator.hasNext());
+
+        stringWriter = new ResettableStringWriter();
+        record = iterator.next();
+        writer.write(record, stringWriter);
+        resultXml = stringWriter.toString();
+        assertNotNull(resultXml);
+        assertTrue(resultXml.contains("<i>&quot;5&lt;6&gt;4&quot;&amp;7</i>")); //$NON-NLS-1$
+    }
+
+    private static Select getSelectTypeById(ComplexTypeMetadata type, String revisionId, String[] splitUniqueId) {
+        ComplexTypeMetadata typeForSelect = type;
+        while (typeForSelect.getSuperTypes() != null && !typeForSelect.getSuperTypes().isEmpty()
+                && typeForSelect.getSuperTypes().size() > 0) {
+            typeForSelect = (ComplexTypeMetadata) typeForSelect.getSuperTypes().iterator().next();
+        }
+        UserQueryBuilder qb = UserQueryBuilder.from(typeForSelect);
+        Collection<FieldMetadata> keyFields = type.getKeyFields();
+
+        if (splitUniqueId.length < (2 + keyFields.size())) {
+            StringBuilder builder = new StringBuilder();
+            for (String currentId : splitUniqueId) {
+                builder.append(currentId).append('.');
+            }
+            throw new IllegalArgumentException("Id '" + builder.toString() //$NON-NLS-1$
+                    + "' does not contain all required values for key of type '" + type.getName() + "'."); //$NON-NLS-1$ //$NON-NLS-2$
+        }
+
+        int currentIndex = 2;
+        for (FieldMetadata keyField : keyFields) {
+            qb.where(eq(keyField, splitUniqueId[currentIndex++]));
+        }
+        qb.getSelect().setRevisionId(revisionId);
+        return qb.getSelect();
+    }
+
+    private MetadataRepository prepareMetadata(String dataModelFile) {
+        MetadataRepository repository = new MetadataRepository();
+        repository.load(StorageWrapperTest.class.getResourceAsStream(dataModelFile));
+        return repository;
+    }
+
+    private Storage prepareStorage(MetadataRepository repository) {
+        Storage storage = new HibernateStorage("Product"); //$NON-NLS-1$
+        storage.init(ServerContext.INSTANCE.get().getDataSource(StorageTestCase.DATABASE + "-Default", "MDM", StorageType.MASTER)); //$NON-NLS-1$ //$NON-NLS-2$
+        storage.prepare(repository, true);
+        return storage;
+    }
+}
diff --git a/org.talend.mdm.core/test/com/amalto/core/storage/Product.xsd b/org.talend.mdm.core/test/com/amalto/core/storage/Product.xsd
new file mode 100644
index 0000000..57815d0
--- /dev/null
+++ b/org.talend.mdm.core/test/com/amalto/core/storage/Product.xsd
@@ -0,0 +1,396 @@
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
+  <xsd:import namespace="http://www.w3.org/2001/XMLSchema"/>  
+  <xsd:element name="Product"> 
+    <xsd:annotation> 
+      <xsd:appinfo source="X_Label_EN">Product</xsd:appinfo>  
+      <xsd:appinfo source="X_Label_FR">Produit</xsd:appinfo>  
+        
+        
+      <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+      <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+      <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+    
+
+
+
+
+
+
+<xsd:appinfo source="X_Lookup_Field">Product/Availability</xsd:appinfo>
+<xsd:appinfo source="X_PrimaryKeyInfo">Product/Name</xsd:appinfo>
+<xsd:appinfo source="X_PrimaryKeyInfo">Product/Description</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation>  
+    <xsd:complexType> 
+      <xsd:all maxOccurs="1" minOccurs="1"> 
+        <xsd:element maxOccurs="1" minOccurs="0" name="Picture" type="PICTURE"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Picture</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Image</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="1" name="Id" type="xsd:string"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Unique Id</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Id unique</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="1" name="Name" type="xsd:string"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Name</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Nom</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="1" name="Description" type="xsd:string"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Description</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Description</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="0" name="Features"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Features</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Caract脙漏ristiques</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation>  
+          <xsd:complexType> 
+            <xsd:all> 
+              <xsd:element maxOccurs="1" minOccurs="0" name="Sizes"> 
+                <xsd:annotation> 
+                  <xsd:appinfo source="X_Label_EN">Sizes</xsd:appinfo>  
+                  <xsd:appinfo source="X_Label_FR">Tailles</xsd:appinfo>  
+                  <xsd:appinfo source="X_Description_EN">A product may be available in more than one size.</xsd:appinfo>  
+                  <xsd:appinfo source="X_Description_FR">Un produit peut 脙陋tre disponible dans plusieurs tailles.</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+                <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation>  
+                <xsd:complexType> 
+                  <xsd:sequence> 
+                    <xsd:element maxOccurs="unbounded" name="Size" type="Size"> 
+                      <xsd:annotation> 
+                        <xsd:appinfo source="X_Label_EN">Size</xsd:appinfo>  
+                        <xsd:appinfo source="X_Label_FR">Taille</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+                      <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+                    </xsd:element> 
+                  </xsd:sequence> 
+                </xsd:complexType> 
+              </xsd:element>  
+              <xsd:element maxOccurs="1" minOccurs="0" name="Colors"> 
+                <xsd:annotation> 
+                  <xsd:appinfo source="X_Label_EN">Colors</xsd:appinfo>  
+                  <xsd:appinfo source="X_Label_FR">Couleurs</xsd:appinfo>  
+                  <xsd:appinfo source="X_Description_EN">A product can be available in more than one color.</xsd:appinfo>  
+                  <xsd:appinfo source="X_Description_FR">Un produit peut 脙陋tre disponible dans plusieurs couleurs.</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+                  <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+                <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation>  
+                <xsd:complexType> 
+                  <xsd:sequence> 
+                    <xsd:element maxOccurs="unbounded" name="Color" type="Color"> 
+                      <xsd:annotation> 
+                        <xsd:appinfo source="X_Label_EN">Color</xsd:appinfo>  
+                        <xsd:appinfo source="X_Label_FR">Couleur</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+                        <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+                      <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+                    </xsd:element> 
+                  </xsd:sequence> 
+                </xsd:complexType> 
+              </xsd:element> 
+            </xsd:all> 
+          </xsd:complexType> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="0" name="Availability" type="xsd:boolean"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Availability</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Disponibilit脙漏</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="1" name="Price" type="xsd:decimal"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Price</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Prix</xsd:appinfo>  
+            <xsd:appinfo source="X_Description_EN">Run a price request to change this price</xsd:appinfo>  
+            <xsd:appinfo source="X_Description_FR">Faites une demande de changement de prix pour modifier</xsd:appinfo>  
+              
+              
+             
+          <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Writable</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Writable</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+                <xsd:element maxOccurs="1" minOccurs="0" name="Family" type="xsd:string"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_ForeignKey">ProductFamily/Id</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_EN">Family</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Famille</xsd:appinfo>  
+            <xsd:appinfo source="X_ForeignKeyInfo">ProductFamily/Name</xsd:appinfo>  
+            <xsd:appinfo source="X_Retrieve_FKinfos">true</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          <xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>
+                <xsd:element maxOccurs="1" minOccurs="0" name="OnlineStore" type="URL"> 
+          <xsd:annotation> 
+              
+              
+             
+          <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>
+                <xsd:element maxOccurs="1" minOccurs="0" name="Stores"> 
+          <xsd:annotation> 
+              
+              
+              
+            <xsd:appinfo source="X_Label_EN">Stores</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Magasins</xsd:appinfo> 
+          <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_User</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation>  
+          <xsd:complexType> 
+            <xsd:sequence> 
+              <xsd:element maxOccurs="unbounded" minOccurs="0" name="Store" type="xsd:string"> 
+                <xsd:annotation> 
+                  <xsd:appinfo source="X_Label_EN">Store</xsd:appinfo>  
+                  <xsd:appinfo source="X_Label_FR">Magasin</xsd:appinfo>  
+                  <xsd:appinfo source="X_ForeignKey">Store/Id</xsd:appinfo>  
+                  <xsd:appinfo source="X_ForeignKeyInfo">Store/Address</xsd:appinfo>  
+                  <xsd:appinfo source="X_Retrieve_FKinfos">true</xsd:appinfo> 
+                <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_User</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+</xsd:annotation> 
+              </xsd:element> 
+            </xsd:sequence> 
+          </xsd:complexType> 
+        </xsd:element>     
+                <xsd:element maxOccurs="1" minOccurs="0" name="f1" type="xsd:string">
+<xsd:annotation>
+<xsd:appinfo source="X_Workflow">Demo_User#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Workflow">Demo_Manager#Product_Product_1.0#Read-only</xsd:appinfo>
+<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_User</xsd:appinfo>
+</xsd:annotation>
+</xsd:element>
+            </xsd:all> 
+    </xsd:complexType>  
+    <xsd:unique name="Product"> 
+      <xsd:selector xpath="."/>  
+      <xsd:field xpath="Id"/> 
+    </xsd:unique> 
+  </xsd:element>  
+  <xsd:simpleType name="Size"> 
+    <xsd:restriction base="xsd:string"> 
+      <xsd:enumeration value="Small"/>  
+      <xsd:enumeration value="Medium"/>  
+      <xsd:enumeration value="Large"/>  
+      <xsd:enumeration value="X-Large"/> 
+    </xsd:restriction> 
+  </xsd:simpleType>  
+  <xsd:simpleType name="Color"> 
+    <xsd:restriction base="xsd:string"> 
+      <xsd:enumeration value="White"/>  
+      <xsd:enumeration value="Light Blue"/>  
+      <xsd:enumeration value="Light Pink"/>  
+      <xsd:enumeration value="Lemon"/>  
+      <xsd:enumeration value="Khaki"/> 
+    </xsd:restriction> 
+  </xsd:simpleType>  
+  <xsd:simpleType name="PICTURE"> 
+    <xsd:restriction base="xsd:string"/> 
+  </xsd:simpleType>  
+  <xsd:element name="ProductFamily"> 
+    <xsd:annotation> 
+      <xsd:appinfo source="X_Label_EN">Product Family</xsd:appinfo>  
+      <xsd:appinfo source="X_Label_FR">Famille Produit</xsd:appinfo>  
+      <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+      <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+      <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+    <xsd:appinfo source="X_PrimaryKeyInfo">ProductFamily/Name</xsd:appinfo>
+</xsd:annotation>  
+    <xsd:complexType> 
+      <xsd:all maxOccurs="1" minOccurs="1"> 
+        <xsd:element maxOccurs="1" minOccurs="1" name="Id" type="AUTO_INCREMENT"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Id (sequence)</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Id (s脙漏quence)</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          </xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="1" name="Name" type="xsd:string"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Name</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Nom</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          </xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="0" name="ChangeStatus" type="Status"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Hide">Demo_User</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>  
+            <xsd:appinfo source="X_Write">Demo_User</xsd:appinfo> 
+          </xsd:annotation> 
+        </xsd:element> 
+      </xsd:all> 
+    </xsd:complexType>  
+    <xsd:unique name="ProductFamily"> 
+      <xsd:selector xpath="."/>  
+      <xsd:field xpath="Id"/> 
+    </xsd:unique> 
+  </xsd:element>  
+  <xsd:simpleType name="AUTO_INCREMENT"> 
+    <xsd:restriction base="xsd:string"/> 
+  </xsd:simpleType>  
+  <xsd:simpleType name="URL"> 
+    <xsd:restriction base="xsd:string"/> 
+  </xsd:simpleType>  
+  <xsd:simpleType name="UUID"> 
+    <xsd:restriction base="xsd:string"/> 
+  </xsd:simpleType>  
+  <xsd:simpleType name="Status"> 
+    <xsd:restriction base="xsd:string"> 
+      <xsd:enumeration value="Pending"/>  
+      <xsd:enumeration value="Rejected"/>  
+      <xsd:enumeration value="Approved"/> 
+    </xsd:restriction> 
+  </xsd:simpleType>  
+  <xsd:element name="Store"> 
+    <xsd:annotation> 
+        
+        
+      <xsd:appinfo source="X_Label_EN">Store</xsd:appinfo>  
+      <xsd:appinfo source="X_Label_FR">Magasin</xsd:appinfo> 
+    <xsd:appinfo source="X_PrimaryKeyInfo">Store/Address</xsd:appinfo>
+<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+</xsd:annotation>  
+    <xsd:complexType> 
+      <xsd:all> 
+        <xsd:element maxOccurs="1" minOccurs="1" name="Id" type="xsd:string"> 
+          <xsd:annotation> 
+              
+              
+            <xsd:appinfo source="X_Label_EN">Store Id</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Id Magasin</xsd:appinfo> 
+          <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+        <xsd:element maxOccurs="1" minOccurs="0" name="Address" type="xsd:string"> 
+          <xsd:annotation> 
+              
+              
+            <xsd:appinfo source="X_Label_EN">Address</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Addresse</xsd:appinfo>  
+            <xsd:appinfo source="X_Description_EN">Enter the complete address of the store</xsd:appinfo>  
+            <xsd:appinfo source="X_Description_FR">Entrer l'adresse compl脙拧te du magasin</xsd:appinfo> 
+          <xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+<xsd:appinfo source="X_Write">Demo_Manager</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element>  
+                <xsd:element maxOccurs="1" minOccurs="0" name="Lat" type="xsd:double">
+<xsd:annotation>
+
+
+<xsd:appinfo source="X_Label_EN">Latitude</xsd:appinfo>
+<xsd:appinfo source="X_Label_FR">Latitude</xsd:appinfo>
+
+
+<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+</xsd:annotation>
+</xsd:element>
+                <xsd:element maxOccurs="1" minOccurs="0" name="Long" type="xsd:double">
+<xsd:annotation>
+
+
+<xsd:appinfo source="X_Label_EN">Longitude</xsd:appinfo>
+<xsd:appinfo source="X_Label_FR">Longitude</xsd:appinfo>
+
+
+<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+</xsd:annotation>
+</xsd:element>
+                <xsd:element maxOccurs="1" minOccurs="0" name="Map" type="URL"> 
+          <xsd:annotation> 
+            <xsd:appinfo source="X_Label_EN">Location</xsd:appinfo>  
+            <xsd:appinfo source="X_Label_FR">Localisation</xsd:appinfo>  
+             
+          
+
+
+
+<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+</xsd:annotation> 
+        </xsd:element> 
+            </xsd:all> 
+    </xsd:complexType>  
+    <xsd:unique name="Store"> 
+      <xsd:selector xpath="."/>  
+      <xsd:field xpath="Id"/> 
+    </xsd:unique> 
+  </xsd:element> 
+</xsd:schema>
diff --git a/org.talend.mdm.core/test/com/amalto/core/storage/StorageWrapperTest.java b/org.talend.mdm.core/test/com/amalto/core/storage/StorageWrapperTest.java
new file mode 100644
index 0000000..bd373e3
--- /dev/null
+++ b/org.talend.mdm.core/test/com/amalto/core/storage/StorageWrapperTest.java
@@ -0,0 +1,81 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package com.amalto.core.storage;
+
+import junit.framework.TestCase;
+
+import org.talend.mdm.commmon.metadata.MetadataRepository;
+
+import com.amalto.core.query.StorageTestCase;
+import com.amalto.core.server.MockServerLifecycle;
+import com.amalto.core.server.ServerContext;
+import com.amalto.core.storage.hibernate.HibernateStorage;
+
+/**
+ * created by suplch on 2013-6-28 Detailled comment
+ * 
+ */
+public class StorageWrapperTest extends TestCase {
+
+    public StorageWrapperTest() {
+        ServerContext.INSTANCE.get(new MockServerLifecycle());
+    }
+
+    public void testGetDocumentAsString() throws Exception {
+        final MetadataRepository repository = prepareMetadata("Product.xsd"); //$NON-NLS-1$
+        final Storage storage = prepareStorage(repository);
+
+        StorageWrapper wrapper = new StorageWrapper() {
+
+            @Override
+            protected Storage getStorage(String dataClusterName) {
+                return storage;
+            }
+
+            @Override
+            protected Storage getStorage(String dataClusterName, String revisionId) {
+                return storage;
+            }
+        };
+        String xml = "<ii><c>Product</c><n>Product</n><dmn>Product</dmn><i>333</i><t>1372654669313</t><taskId></taskId><p> <Product><Id>333</Id><Name>333</Name><Description>333</Description><Price>333</Price></Product></p></ii>"; //$NON-NLS-1$
+        wrapper.putDocumentFromString(xml, "Product.Product.333", "Product", null); //$NON-NLS-1$ //$NON-NLS-2$
+        String item = wrapper.getDocumentAsString(null, "Product", "Product.Product.333"); //$NON-NLS-1$ //$NON-NLS-2$
+        assertNotNull(item);
+        assertTrue(item.contains("<i>333</i>")); //$NON-NLS-1$
+
+        xml = "<ii><c>Product</c><n>Product</n><dmn>Product</dmn><i>33&amp;44</i><t>1372654669313</t><taskId></taskId><p> <Product><Id>33&amp;44</Id><Name>333</Name><Description>333</Description><Price>333</Price></Product></p></ii>"; //$NON-NLS-1$
+        wrapper.putDocumentFromString(xml, "Product.Product.33&44", "Product", null); //$NON-NLS-1$ //$NON-NLS-2$
+        item = wrapper.getDocumentAsString(null, "Product", "Product.Product.33&44"); //$NON-NLS-1$ //$NON-NLS-2$
+        assertNotNull(item);
+        assertTrue(item.contains("<i>33&amp;44</i>")); //$NON-NLS-1$
+
+        xml = "<ii><c>Product</c><n>Product</n><dmn>Product</dmn><i>&quot;555&lt;666&gt;444&quot;</i><t>1372654669313</t><taskId></taskId><p> <Product><Id>&quot;555&lt;666&gt;444&quot;</Id><Name>333</Name><Description>333</Description><Price>333</Price></Product></p></ii>"; //$NON-NLS-1$
+        wrapper.putDocumentFromString(xml, "Product.Product.\"555<666>444\"", "Product", null); //$NON-NLS-1$ //$NON-NLS-2$
+        item = wrapper.getDocumentAsString(null, "Product", "Product.Product.\"555<666>444\""); //$NON-NLS-1$ //$NON-NLS-2$
+        assertNotNull(item);
+        assertTrue(item.contains("<i>&quot;555&lt;666&gt;444&quot;</i>")); //$NON-NLS-1$
+    }
+
+    private MetadataRepository prepareMetadata(String dataModelFile) {
+        MetadataRepository repository = new MetadataRepository();
+        repository.load(StorageWrapperTest.class.getResourceAsStream(dataModelFile));
+        return repository;
+    }
+
+    private Storage prepareStorage(MetadataRepository repository) {
+        Storage storage = new HibernateStorage("Product"); //$NON-NLS-1$
+        storage.init(ServerContext.INSTANCE.get().getDataSource(StorageTestCase.DATABASE + "-Default", "MDM", StorageType.MASTER)); //$NON-NLS-1$//$NON-NLS-2$
+        storage.prepare(repository, true);
+        return storage;
+    }
+}
diff --git a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/ExceptionConstants.java b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/ExceptionConstants.java
new file mode 100644
index 0000000..1648085
--- /dev/null
+++ b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/ExceptionConstants.java
@@ -0,0 +1,25 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package org.talend.mdm.webapp.base.server.exception;
+
+
+/**
+ * created by talend2 on 2013-8-1
+ * Detailled comment
+ *
+ */
+public class ExceptionConstants {
+    
+    public static final String ID_FORMAT_EXCEPTION = "label_exception_id_malform"; //$NON-NLS-1$
+
+}
diff --git a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/WebBaseException.java b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/WebBaseException.java
new file mode 100644
index 0000000..17cccd9
--- /dev/null
+++ b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/exception/WebBaseException.java
@@ -0,0 +1,50 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package org.talend.mdm.webapp.base.server.exception;
+
+
+/**
+ * created by talend2 on 2013-8-1
+ * Detailled comment
+ *
+ */
+public class WebBaseException extends Exception {
+    
+    private static final long serialVersionUID = -7606775304360127841L;
+
+    private String message;
+    
+    private Object[] args;
+    
+    public WebBaseException(String message,Object... args){
+        this.message = message;
+        this.args = args;
+    }
+    
+    /**
+     * Getter for message.
+     * @return the message
+     */
+    public String getMessage() {
+        return this.message;
+    }
+    
+    /**
+     * Getter for args.
+     * @return the args
+     */
+    public Object[] getArgs() {
+        return this.args;
+    }
+    
+}
diff --git a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/i18n/BaseMessagesImpl.java b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/i18n/BaseMessagesImpl.java
index c3a9253..b3b801b 100644
--- a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/i18n/BaseMessagesImpl.java
+++ b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/i18n/BaseMessagesImpl.java
@@ -25,116 +25,147 @@ public final class BaseMessagesImpl implements BaseMessages {
     private static final Messages MESSAGES = MessagesFactory.getMessages("org.talend.mdm.webapp.base.client.i18n.BaseMessages",
             BaseMessagesImpl.class.getClassLoader());
 
+    @Override
     public String exception_parse_illegalChar(int beginIndex) {
         return MESSAGES.getMessage("exception_parse_illegalChar", beginIndex);
     }
 
+    @Override
     public String exception_parse_unknownOperator(String value) {
         return MESSAGES.getMessage("exception_parse_unknownOperator", value);
     }
 
+    @Override
     public String exception_parse_missEndBlock(char endBlock, int i) {
         return MESSAGES.getMessage("exception_parse_missEndBlock", endBlock, i);
     }
 
+    @Override
     public String exception_parse_tooManyEndBlock(char endBlock, int i) {
         return MESSAGES.getMessage("exception_parse_tooManyEndBlock", endBlock, i);
     }
 
+    @Override
     public String page_size_label() {
         return MESSAGES.getMessage("page_size_label");
     }
 
+    @Override
     public String page_size_notice() {
         return MESSAGES.getMessage("page_size_notice");
     }
 
+    @Override
     public String info_title() {
         return MESSAGES.getMessage("info_title");
     }
 
+    @Override
     public String error_title() {
         return MESSAGES.getMessage("error_title");
     }
 
+    @Override
     public String warning_title() {
         return MESSAGES.getMessage("warning_title");
     }
 
+    @Override
     public String confirm_title() {
         return MESSAGES.getMessage("confirm_title");
     }
 
+    @Override
     public String unknown_error() {
         return MESSAGES.getMessage("unknown_error");
     }
 
+    @Override
     public String session_timeout_error() {
         return MESSAGES.getMessage("session_timeout_error");
     }
 
     public String typemode_notfound_error(String typePath, String language) {
-        if (typePath == null)
+        if (typePath == null) {
             typePath = "";
-        if (language != null)
+        }
+        if (language != null) {
             return MESSAGES.getMessage(new Locale(language), "typemode_notfound_error", typePath);
-        else
+        } else {
             return MESSAGES.getMessage("typemode_notfound_error", typePath);
+        }
     }
 
     public String typemode_notfound_error(String typePath) {
         return typemode_notfound_error(typePath, null);
     }
 
+    @Override
     public String open_mls_title() {
         return MESSAGES.getMessage("open_mls_title");
     }
 
+    @Override
     public String language_title() {
         return MESSAGES.getMessage("language_title");
     }
 
+    @Override
     public String value_title() {
         return MESSAGES.getMessage("value_title");
     }
 
+    @Override
     public String multiLanguage_edit_failure() {
         return MESSAGES.getMessage("multiLanguage_edit_failure");
     }
 
+    @Override
     public String multiLangauge_language_duplicate() {
         return MESSAGES.getMessage("multiLangauge_language_duplicate");
     }
 
+    @Override
     public String edit_success_info() {
         return MESSAGES.getMessage("edit_success_info");
     }
 
+    @Override
     public String message_success() {
         return MESSAGES.getMessage("message_success");
     }
 
+    @Override
     public String message_fail() {
         return MESSAGES.getMessage("message_fail");
     }
 
+    @Override
     public String edititem() {
         return MESSAGES.getMessage("edititem");
     }
 
+    @Override
     public String add_btn() {
         return MESSAGES.getMessage("add_btn");
     }
 
+    @Override
     public String remove_btn() {
         return MESSAGES.getMessage("remove_btn");
     }
-    
+
+    @Override
     public String exception_fk_malform(String fk) {
-        return MESSAGES.getMessage("exception_fk_malform",fk);
+        return MESSAGES.getMessage("exception_fk_malform", fk);
     }
 
+    @Override
     public String overwrite_confirm() {
         return MESSAGES.getMessage("overwrite_confirm");
     }
+
+    public String label_exception_id_malform(String id) {
+        return MESSAGES.getMessage("label_exception_id_malform");
+    }
 }
diff --git a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/util/CommonUtil.java b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/util/CommonUtil.java
index e1da0a3..63151cb 100644
--- a/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/util/CommonUtil.java
+++ b/org.talend.mdm.webapp.base/src/main/java/org/talend/mdm/webapp/base/server/util/CommonUtil.java
@@ -15,6 +15,7 @@ package org.talend.mdm.webapp.base.server.util;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
+import java.util.StringTokenizer;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -24,6 +25,8 @@ import org.talend.mdm.webapp.base.client.model.MultipleCriteria;
 import org.talend.mdm.webapp.base.client.model.SimpleCriterion;
 import org.talend.mdm.webapp.base.client.util.Parser;
 import org.talend.mdm.webapp.base.server.BaseConfiguration;
+import org.talend.mdm.webapp.base.server.exception.ExceptionConstants;
+import org.talend.mdm.webapp.base.server.exception.WebBaseException;
 import org.talend.mdm.webapp.base.server.mockup.FakeData;
 
 import com.amalto.core.util.Messages;
@@ -47,10 +50,10 @@ public class CommonUtil {
 
     public static final String OR = "OR"; //$NON-NLS-1$ 
 
-    public static final String EQUALS = "EQUALS";  //$NON-NLS-1$
+    public static final String EQUALS = "EQUALS"; //$NON-NLS-1$
 
     private static final Pattern extractIdPattern = Pattern.compile("\\[.*?\\]"); //$NON-NLS-1$
-    
+
     private static final Messages MESSAGES = MessagesFactory.getMessages(
             "org.talend.mdm.webapp.base.client.i18n.BaseMessages", CommonUtil.class.getClassLoader()); //$NON-NLS-1$    
 
@@ -186,11 +189,11 @@ public class CommonUtil {
             BusinessConcept businessConcept = SchemaWebAgent.getInstance().getBusinessConcept(concept);
             businessConcept.load();
             String type = businessConcept.getXpathTypeMap().get(filterXpaths);
-            if(type != null && type.equals("xsd:boolean")) { //$NON-NLS-1$
+            if (type != null && type.equals("xsd:boolean")) { //$NON-NLS-1$
                 wc.setStringPredicate(WSStringPredicate.OR);
                 conditions.add(new WSWhereItem(new WSWhereCondition(filterXpaths, Util.getOperator("EMPTY_NULL"),//$NON-NLS-1$ 
                         filterValues, WSStringPredicate.NONE, false), null, null));
-            }        
+            }
         }
 
         if (conditions.size() == 0) {
@@ -214,8 +217,8 @@ public class CommonUtil {
                 .getStrings();
         return results;
     }
-    
-    public static String[] extractFKRefValue(String ids,String language) {
+
+    public static String[] extractFKRefValue(String ids, String language) {
         List<String> idList = new ArrayList<String>();
         Matcher matcher = extractIdPattern.matcher(ids);
         boolean hasMatchedOnce = false;
@@ -234,13 +237,29 @@ public class CommonUtil {
     }
 
     public static String buildCriteriaByIds(String[] keys, String[] ids) {
-        if(keys == null || ids == null)
+        if (keys == null || ids == null) {
             return null;
-        
+        }
+        if (keys.length > 0 && keys.length < ids.length) {
+            // See TMDM-5943: Id may contain '.' characters
+            // (in this case: concatenate all ids[i] where i > keys.length into a single value separated with '.').
+            String[] newIds = new String[keys.length];
+            System.arraycopy(ids, 0, newIds, 0, keys.length - 1);
+            StringBuilder idConcatenation = new StringBuilder();
+            for (int i = keys.length - 1; i < ids.length; i++) {
+                idConcatenation.append(ids[i]);
+                if (i < ids.length - 1) {
+                    idConcatenation.append('.');
+                }
+            }
+            newIds[newIds.length - 1] = idConcatenation.toString();
+            ids = newIds; // Update ids with the newly computed id values.
+        }
+
         StringBuilder criteria = new StringBuilder();
-        if(keys.length == 1 && ids.length == 1) {
+        if (keys.length == 1 && ids.length == 1) {
             criteria.append(keys[0]).append(" ").append(EQUALS).append(" ").append(ids[0]); //$NON-NLS-1$ //$NON-NLS-2$
-            return criteria.toString(); 
+            return criteria.toString();
         }
 
         criteria.append("((").append(keys[0]).append(" ").append(EQUALS).append(" ").append(ids[0]).append(")"); //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
@@ -250,4 +269,20 @@ public class CommonUtil {
         criteria.append(")"); //$NON-NLS-1$
         return criteria.toString();
     }
+
+    public static String[] extractIdWithDots(String[] keys, String ids) throws WebBaseException {
+        List<String> idList = new ArrayList<String>();
+        if (keys.length == 1) {
+            idList.add(ids);
+        } else {
+            StringTokenizer tokenizer = new StringTokenizer(ids, "."); //$NON-NLS-1$
+            if (!tokenizer.hasMoreTokens()) {
+                throw new WebBaseException(ExceptionConstants.ID_FORMAT_EXCEPTION, ids);
+            }
+            while (tokenizer.hasMoreTokens()) {
+                idList.add(tokenizer.nextToken());
+            }    
+        }
+        return idList.toArray(new String[idList.size()]);
+    }
 }
diff --git a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/client/widget/ItemDetailToolBar.java b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/client/widget/ItemDetailToolBar.java
index bc46749..d3b0dc9 100644
--- a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/client/widget/ItemDetailToolBar.java
+++ b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/client/widget/ItemDetailToolBar.java
@@ -82,6 +82,7 @@ import com.extjs.gxt.ui.client.widget.toolbar.FillToolItem;
 import com.extjs.gxt.ui.client.widget.toolbar.LabelToolItem;
 import com.extjs.gxt.ui.client.widget.toolbar.SeparatorToolItem;
 import com.extjs.gxt.ui.client.widget.toolbar.ToolBar;
+import com.google.gwt.http.client.URL;
 import com.google.gwt.user.client.Element;
 import com.google.gwt.user.client.ui.AbstractImagePrototype;
 import com.google.gwt.user.client.ui.Widget;
@@ -870,7 +871,7 @@ public class ItemDetailToolBar extends ToolBar {
                 public void selectionChanged(SelectionChangedEvent<ItemBaseModel> se) {
                     if (itemsDetailPanel.getFirstTabWidget() instanceof ItemPanel) {
                         ItemPanel itemPanel = (ItemPanel) itemsDetailPanel.getFirstTabWidget();
-                        String frameUrl = "/browserecords/secure/SmartViewServlet?ids=" + itemBean.getIds() + "&concept=" //$NON-NLS-1$ //$NON-NLS-2$
+                        String frameUrl = "/browserecords/secure/SmartViewServlet?ids=" + URL.encodeQueryString(itemBean.getIds()) + "&concept=" //$NON-NLS-1$ //$NON-NLS-2$
                                 + itemBean.getConcept() + "&language=" + Locale.getLanguage(); //$NON-NLS-1$
                         if (se.getSelectedItem().get("key") != null) //$NON-NLS-1$
                             frameUrl += ("&name=" + se.getSelectedItem().get("key"));//$NON-NLS-1$ //$NON-NLS-2$
@@ -878,7 +879,7 @@ public class ItemDetailToolBar extends ToolBar {
                         itemPanel.getSmartPanel().layout(true);
                     }
                 }
-
+                
             });
         }
 
@@ -896,7 +897,7 @@ public class ItemDetailToolBar extends ToolBar {
         });
         add(smartViewCombo);
     }
-
+    
     private void addPrintButton() {
         Button printBtn = new Button(MessagesFactory.getMessages().print_btn());
         printBtn.setId("printBtn"); //$NON-NLS-1$
@@ -908,7 +909,7 @@ public class ItemDetailToolBar extends ToolBar {
 
                     StringBuilder url = new StringBuilder();
                     url.append("/browserecords/secure/SmartViewServlet?ids=") //$NON-NLS-1$
-                            .append(itemBean.getIds()).append("&concept=") //$NON-NLS-1$
+                            .append(URL.encodeQueryString(itemBean.getIds())).append("&concept=") //$NON-NLS-1$
                             .append(itemBean.getConcept()).append("&language=") //$NON-NLS-1$
                             .append(Locale.getLanguage()).append("&name=") //$NON-NLS-1$
                             .append(smartViewCombo.getSelection().get(0).get("value")); //$NON-NLS-1$
diff --git a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsAction.java b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsAction.java
index 9fbbc65..4f7cead 100644
--- a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsAction.java
+++ b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsAction.java
@@ -42,6 +42,7 @@ import javax.xml.transform.TransformerException;
 import javax.xml.transform.TransformerFactoryConfigurationError;
 import javax.xml.xpath.XPathExpressionException;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
 import org.dom4j.DocumentHelper;
@@ -56,7 +57,6 @@ import org.talend.mdm.webapp.base.client.model.DataTypeConstants;
 import org.talend.mdm.webapp.base.client.model.ForeignKeyBean;
 import org.talend.mdm.webapp.base.client.model.ItemBaseModel;
 import org.talend.mdm.webapp.base.client.model.ItemBasePageLoadResult;
-import org.talend.mdm.webapp.base.client.util.FormatUtil;
 import org.talend.mdm.webapp.base.client.util.MultilanguageMessageParser;
 import org.talend.mdm.webapp.base.server.BaseConfiguration;
 import org.talend.mdm.webapp.base.server.ForeignKeyHelper;
@@ -100,7 +100,6 @@ import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
 
-import com.amalto.core.ejb.ItemPOJO;
 import com.amalto.core.ejb.ItemPOJOPK;
 import com.amalto.core.ejb.UpdateReportPOJO;
 import com.amalto.core.integrity.FKIntegrityCheckResult;
@@ -119,6 +118,7 @@ import com.amalto.webapp.core.util.XmlUtil;
 import com.amalto.webapp.core.util.XtentisWebappException;
 import com.amalto.webapp.util.webservices.WSBoolean;
 import com.amalto.webapp.util.webservices.WSByteArray;
+import com.amalto.webapp.util.webservices.WSConceptKey;
 import com.amalto.webapp.util.webservices.WSDataClusterPK;
 import com.amalto.webapp.util.webservices.WSDataModel;
 import com.amalto.webapp.util.webservices.WSDataModelPK;
@@ -127,6 +127,7 @@ import com.amalto.webapp.util.webservices.WSDropItem;
 import com.amalto.webapp.util.webservices.WSDroppedItemPK;
 import com.amalto.webapp.util.webservices.WSExecuteTransformerV2;
 import com.amalto.webapp.util.webservices.WSExistsItem;
+import com.amalto.webapp.util.webservices.WSGetBusinessConceptKey;
 import com.amalto.webapp.util.webservices.WSGetBusinessConcepts;
 import com.amalto.webapp.util.webservices.WSGetDataModel;
 import com.amalto.webapp.util.webservices.WSGetItem;
@@ -182,7 +183,9 @@ public class BrowseRecordsAction implements BrowseRecordsService {
         try {
             String dataClusterPK = getCurrentDataCluster();
             String concept = item.getConcept();
-            String[] ids = extractIdWithDots(item.getIds());
+            WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                    new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), concept));
+            String[] ids = extractIdWithDots(key.getFields(), item.getIds());
             String outputErrorMessage = com.amalto.core.util.Util.beforeDeleting(dataClusterPK, concept, ids);
 
             String message = null;
@@ -199,7 +202,7 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                     WSItemPK wsItem = CommonUtil.getPort().deleteItem(
                             new WSDeleteItem(new WSItemPK(new WSDataClusterPK(dataClusterPK), concept, ids), override));
                     if (wsItem != null) {
-                        pushUpdateReport(ids, concept,UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE);
+                        pushUpdateReport(ids, concept, UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE);
                     } else {
                         throw new ServiceException(MESSAGES.getMessage("delete_record_failure")); //$NON-NLS-1$
                     }
@@ -260,10 +263,14 @@ public class BrowseRecordsAction implements BrowseRecordsService {
 
         try {
             Map<ItemBean, FKIntegrityResult> itemBeanToResult = new HashMap<ItemBean, FKIntegrityResult>(selectedItems.size());
-
+            WSConceptKey key = null;
             for (ItemBean selectedItem : selectedItems) {
                 String concept = selectedItem.getConcept();
-                String[] ids = extractIdWithDots(selectedItem.getIds());
+                if (key == null) {
+                    key = CommonUtil.getPort().getBusinessConceptKey(
+                            new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), concept));
+                }
+                String[] ids = extractIdWithDots(key.getFields(), selectedItem.getIds());
 
                 WSItemPK wsItemPK = new WSItemPK(new WSDataClusterPK(getCurrentDataCluster()), concept, ids);
                 WSDeleteItem deleteItem = new WSDeleteItem(wsItemPK, false);
@@ -307,122 +314,6 @@ public class BrowseRecordsAction implements BrowseRecordsService {
         }
     }
 
-    private List<String> getPKInfoList(EntityModel entityModel, TypeModel model, String ids, Document document, String language)
-            throws Exception {
-        List<String> xpathPKInfos = model.getPrimaryKeyInfo();
-        List<String> xPathList = new ArrayList<String>();
-        if (xpathPKInfos != null && xpathPKInfos.size() > 0 && ids != null) {
-            for (String pkInfoPath : xpathPKInfos) {
-                if (pkInfoPath != null && pkInfoPath.length() > 0) {
-                    String pkInfo = Util.getFirstTextNode(document, pkInfoPath);
-                    if (pkInfo != null) {
-                        if (entityModel.getTypeModel(pkInfoPath).getType().equals(DataTypeConstants.MLS)) {
-                            String value = MultilanguageMessageParser.getValueByLanguage(pkInfo, language);
-                            if (value != null) {
-                                xPathList.add(value);
-                            }
-                        } else {
-                            xPathList.add(pkInfo);
-                        }
-                    }
-                }
-            }
-        } else {
-            xPathList.add(model.getLabel(language));
-        }
-        return xPathList;
-    }
-
-    private String getPKInfos(List<String> xPathList) {
-        StringBuilder gettedValue = new StringBuilder();
-        for (String pkInfo : xPathList) {
-            if (pkInfo != null) {
-                if (gettedValue.length() == 0) {
-                    gettedValue.append(pkInfo);
-                } else {
-                    gettedValue.append("-").append(pkInfo); //$NON-NLS-1$
-                }
-            }
-        }
-        return gettedValue.toString();
-    }
-
-    private ForeignKeyBean getForeignKeyDesc(TypeModel model, String ids, boolean isNeedExceptionMessage, String modelType,
-            EntityModel entityModel, String language) throws Exception {
-        String xpathForeignKey = model.getForeignkey();
-        if (xpathForeignKey == null) {
-            return null;
-        }
-        if (ids == null || ids.trim().length() == 0) {
-            return null;
-        }
-
-        ForeignKeyBean bean = new ForeignKeyBean();
-        bean.setId(ids);
-        bean.setForeignKeyPath(model.getXpath());
-        try {
-            if (!model.isRetrieveFKinfos()) {
-                return bean;
-            } else {
-                ItemPOJOPK pk = new ItemPOJOPK();
-                String[] itemId = CommonUtil.extractFKRefValue(ids, language);
-                pk.setIds(itemId);
-                String conceptName = model.getForeignkey().split("/")[0]; //$NON-NLS-1$
-                // get deriveType's conceptName, otherwise getItem() method will throw exception.
-                if (modelType != null && modelType.trim().length() > 0) {
-                    conceptName = modelType;
-                    bean.setConceptName(conceptName);
-                }
-                pk.setConceptName(conceptName);
-                pk.setDataClusterPOJOPK(new DataClusterPOJOPK(getCurrentDataCluster()));
-                ItemPOJO item = com.amalto.core.util.Util.getItemCtrl2Local().getItem(pk);
-
-                if (item != null) {
-                    org.w3c.dom.Document document = item.getProjection().getOwnerDocument();
-                    List<String> foreignKeyInfo = model.getForeignKeyInfo();
-                    String formattedId = ""; // Id formatted using foreign key info //$NON-NLS-1$
-                    for (String foreignKeyPath : foreignKeyInfo) {
-                        NodeList nodes = com.amalto.core.util.Util.getNodeList(document,
-                                StringUtils.substringAfter(foreignKeyPath, "/")); //$NON-NLS-1$
-                        if (nodes.getLength() == 1) {
-                            String value = nodes.item(0).getTextContent();
-                            TypeModel typeModel = entityModel.getTypeModel(foreignKeyPath);
-                            if (typeModel != null) {
-                                if (typeModel.getForeignKeyInfo() != null && typeModel.getForeignKeyInfo().size() > 0
-                                        && !"".equals(value)) { //$NON-NLS-1$
-                                    value = ForeignKeyHelper.getDisplayValue(value, foreignKeyPath, getCurrentDataCluster(),
-                                            entityModel, language);
-                                }
-
-                                if (typeModel.getType().equals(DataTypeConstants.MLS)) {
-                                    value = MultilanguageMessageParser.getValueByLanguage(value, language);
-                                }
-                            }
-                            bean.getForeignKeyInfo().put(foreignKeyPath, value);
-                            if (formattedId.equals("")) { //$NON-NLS-1$
-                                formattedId += value;
-                            } else {
-                                formattedId += "-" + value; //$NON-NLS-1$
-                            }
-                        }
-                    }
-
-                    bean.setDisplayInfo(formattedId);
-                    return bean;
-                } else {
-                    return null;
-                }
-            }
-        } catch (EntityNotFoundException e) {
-            if (!isNeedExceptionMessage) {
-                return null;
-            }
-            // fix bug TMDM-2757
-            bean.set("foreignKeyDeleteMessage", e.getMessage()); //$NON-NLS-1$
-            return bean;
-        }
-    }
-
     @Override
     public List<Restriction> getForeignKeyPolymTypeList(String xpathForeignKey, String language) throws ServiceException {
         try {
@@ -491,7 +382,7 @@ public class BrowseRecordsAction implements BrowseRecordsService {
             String concept = itemBean.getConcept();
             // get item
             WSDataClusterPK wsDataClusterPK = new WSDataClusterPK(dataCluster);
-            String[] ids = extractIdWithDots(itemBean.getIds());
+            String[] ids = extractIdWithDots(entityModel.getKeys(), itemBean.getIds());
 
             // parse schema firstly, then use element declaration (DataModelHelper.getEleDecl)
             DataModelHelper.parseSchema(dataModel, concept, entityModel, RoleHelper.getUserRoles());
@@ -606,10 +497,11 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                 TypeModel typeModel = types.get(path);
                 // set pkinfo and description on entity
                 if (path.equals(itemBean.getConcept())) {
-                    List<String> pkInfoList = getPKInfoList(entityModel, typeModel, itemBean.getIds(), docXml, language);
+                    List<String> pkInfoList = org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getPKInfoList(
+                            entityModel, typeModel, itemBean.getIds(), docXml, language);
                     itemBean.setPkInfoList(pkInfoList);
                     itemBean.setLabel(typeModel.getLabel(language));
-                    itemBean.setDisplayPKInfo(getPKInfos(pkInfoList));
+                    itemBean.setDisplayPKInfo(org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getPKInfos(pkInfoList));
                     itemBean.setDescription(typeModel.getDescriptionMap().get(language));
                 }
 
@@ -626,7 +518,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                                 for (int t = 0; t < nodes.getLength(); t++) {
                                     if (nodes.item(t) instanceof Element) {
                                         Node node = nodes.item(t);
-                                        migrationMultiLingualFieldValue(itemBean, typeModel, node, path, true, null);
+                                        org.talend.mdm.webapp.browserecords.server.util.CommonUtil
+                                                .migrationMultiLingualFieldValue(itemBean, typeModel, node, path, true, null);
                                         list.add(node.getTextContent());
                                     }
 
@@ -638,11 +531,12 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                                     String modelType = value.getAttribute("tmdm:type"); //$NON-NLS-1$
                                     itemBean.set(path, path + "-" + value.getTextContent()); //$NON-NLS-1$
                                     itemBean.setForeignkeyDesc(
-                                            path + "-" + value.getTextContent(), getForeignKeyDesc(typeModel, value.getTextContent(), false, modelType, getEntityModel(typeModel.getForeignkey().split("/")[0], language), language)); //$NON-NLS-1$ //$NON-NLS-2$    
+                                            path + "-" + value.getTextContent(), org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getForeignKeyDesc(typeModel, value.getTextContent(), false, modelType, getEntityModel(typeModel.getForeignkey().split("/")[0], language), language)); //$NON-NLS-1$ //$NON-NLS-2$    
 
                                 } else {
                                     itemBean.set(path, value.getTextContent());
-                                    migrationMultiLingualFieldValue(itemBean, typeModel, value, path, false, null);
+                                    org.talend.mdm.webapp.browserecords.server.util.CommonUtil.migrationMultiLingualFieldValue(
+                                            itemBean, typeModel, value, path, false, null);
                                 }
                             }
                         }
@@ -656,63 +550,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
 
     public void dynamicAssembleByResultOrder(ItemBean itemBean, ViewBean viewBean, EntityModel entityModel,
             Map<String, EntityModel> map, String language) throws Exception {
-        if (itemBean.getItemXml() != null) {
-            org.dom4j.Document docXml = DocumentHelper.parseText(itemBean.getItemXml());
-            int i = 0;
-            List els = docXml.getRootElement().elements();
-            for (String path : viewBean.getViewableXpaths()) {
-                String leafPath = path.substring(path.lastIndexOf('/') + 1);
-                if (leafPath.startsWith("@")) { //$NON-NLS-1$
-                    String[] xsiType = leafPath.substring(leafPath.indexOf("@") + 1).split(":"); //$NON-NLS-1$//$NON-NLS-2$
-                    itemBean.set(
-                            path,
-                            docXml.getRootElement()
-                                    .element(
-                                            new QName(xsiType[1], new Namespace(xsiType[0],
-                                                    "http://www.w3.org/2001/XMLSchema-instance"))).getText()); //$NON-NLS-1$
-                    continue;
-                }
-
-                TypeModel typeModel = entityModel.getMetaDataTypes().get(path);
-                org.dom4j.Element el = (org.dom4j.Element) els.get(i);
-                if (typeModel != null && typeModel.getForeignkey() != null) {
-                    String modelType = el.attributeValue(new QName("type", new Namespace("tmdm", "http://www.talend.com/mdm"))); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
-                    itemBean.set(path, path + "-" + el.getText()); //$NON-NLS-1$
-                    itemBean.setForeignkeyDesc(
-                            path + "-" + el.getText(), getForeignKeyDesc(typeModel, el.getText(), false, modelType, map.get(typeModel.getXpath()), language)); //$NON-NLS-1$
-                } else {
-                    itemBean.set(path, el.getText());
-                }
-                i++;
-            }
-        }
-    }
-
-    private void migrationMultiLingualFieldValue(ItemBean itemBean, TypeModel typeModel, Node node, String path,
-            boolean isMultiOccurence, ItemNodeModel nodeModel) {
-        String value = node.getTextContent();
-        if (typeModel != null && typeModel.getType().equals(DataTypeConstants.MLS)
-                && BrowseRecordsConfiguration.dataMigrationMultiLingualFieldAuto()) {
-            if (value != null && value.trim().length() > 0) {
-                if (!MultilanguageMessageParser.isExistMultiLanguageFormat(value)) {
-                    String defaultLanguage = com.amalto.core.util.Util.getDefaultSystemLocale();
-                    String newValue = MultilanguageMessageParser.getFormatValueByDefaultLanguage(value,
-                            defaultLanguage != null ? defaultLanguage : "en");//$NON-NLS-1$
-                    if (nodeModel == null) {
-                        if (isMultiOccurence) {
-                            node.setTextContent(newValue);
-                        } else {
-                            itemBean.set(path, newValue);
-                        }
-                    } else {
-                        nodeModel.setObjectValue(newValue);
-                    }
-                } else if (nodeModel != null) {
-                    nodeModel.setObjectValue(FormatUtil.multiLanguageEncode(value));
-                }
-
-            }
-        }
+        org.talend.mdm.webapp.browserecords.server.util.CommonUtil.dynamicAssembleByResultOrder(itemBean,
+                viewBean.getViewableXpaths(), entityModel, map, language);
     }
 
     @Override
@@ -800,7 +639,9 @@ public class BrowseRecordsAction implements BrowseRecordsService {
         try {
             String dataClusterPK = getCurrentDataCluster();
             String concept = item.getConcept();
-            String[] ids = extractIdWithDots(item.getIds());
+            WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                    new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), concept));
+            String[] ids = extractIdWithDots(key.getFields(), item.getIds());
 
             WSItemPK wsItemPK = new WSItemPK(new WSDataClusterPK(dataClusterPK), concept, ids);
             WSItem item1 = CommonUtil.getPort().getItem(new WSGetItem(wsItemPK));
@@ -893,7 +734,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
     public ItemBean queryItemBeanById(String dataClusterPK, ViewBean viewBean, EntityModel entityModel, String ids,
             String language) throws ServiceException {
         try {
-            String[] idArr = ids.split("\\."); //$NON-NLS-1$
+            String[] idArr = StringUtils.splitPreserveAllTokens(ids, '.'); // String.split() omits the last '' if ends
+                                                                           // with delimiter
             String criteria = CommonUtil.buildCriteriaByIds(entityModel.getKeys(), idArr);
             Object[] result = getItemBeans(dataClusterPK, viewBean, entityModel, criteria, -1, 20,
                     ItemHelper.SEARCH_DIRECTION_ASC, null, language);
@@ -1433,16 +1275,21 @@ public class BrowseRecordsAction implements BrowseRecordsService {
      * @param ids Expect a id like "value0.value1.value2"
      * @return Returns an array with ["value0", "value1", "value2"]
      */
-    private static String[] extractIdWithDots(String ids) {
+    public static String[] extractIdWithDots(String[] keys, String ids) {
         List<String> idList = new ArrayList<String>();
-        StringTokenizer tokenizer = new StringTokenizer(ids, "."); //$NON-NLS-1$
-        if (!tokenizer.hasMoreTokens()) {
-            throw new IllegalArgumentException(MESSAGES.getMessage("label_exception_id_malform", ids)); //$NON-NLS-1$
-        }
+        if (keys.length == 1) {
+            idList.add(ids);
+        } else {
+            StringTokenizer tokenizer = new StringTokenizer(ids, "."); //$NON-NLS-1$
+            if (!tokenizer.hasMoreTokens()) {
+                throw new IllegalArgumentException(MESSAGES.getMessage("label_exception_id_malform", ids)); //$NON-NLS-1$
+            }
 
-        while (tokenizer.hasMoreTokens()) {
-            idList.add(tokenizer.nextToken());
+            while (tokenizer.hasMoreTokens()) {
+                idList.add(tokenizer.nextToken());
+            }
         }
+
         return idList.toArray(new String[idList.size()]);
     }
 
@@ -1451,7 +1298,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
             LOG.trace("pushUpdateReport() concept " + concept + " operation " + operationType);//$NON-NLS-1$ //$NON-NLS-2$
         }
 
-        if (!(UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE.equals(operationType) || UpdateReportPOJO.OPERATION_TYPE_LOGICAL_DELETE.equals(operationType))) {
+        if (!(UpdateReportPOJO.OPERATION_TYPE_PHYSICAL_DELETE.equals(operationType) || UpdateReportPOJO.OPERATION_TYPE_LOGICAL_DELETE
+                .equals(operationType))) {
             throw new UnsupportedOperationException();
         }
 
@@ -1495,7 +1343,7 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                 .append(operationType).append("</OperationType><RevisionID>").append(revisionId) //$NON-NLS-1$
                 .append("</RevisionID><DataCluster>").append(dataClusterPK).append("</DataCluster><DataModel>") //$NON-NLS-1$ //$NON-NLS-2$
                 .append(dataModelPK).append("</DataModel><Concept>").append(concept) //$NON-NLS-1$
-                .append("</Concept><Key>").append(key).append("</Key>"); //$NON-NLS-1$ //$NON-NLS-2$
+                .append("</Concept><Key>").append(StringEscapeUtils.escapeXml(key)).append("</Key>"); //$NON-NLS-1$ //$NON-NLS-2$
 
         if (UpdateReportPOJO.OPERATION_TYPE_UPDATE.equals(operationType)) {
             // Important: Leave update report creation to MDM server
@@ -1752,8 +1600,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
             if (modelType != null && modelType.trim().length() > 0) {
                 nodeModel.setTypeName(modelType);
             }
-            ForeignKeyBean fkBean = getForeignKeyDesc(model, el.getTextContent(), true, modelType,
-                    getEntityModel(foreignKey.split("/")[0], language), language); //$NON-NLS-1$
+            ForeignKeyBean fkBean = org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getForeignKeyDesc(model,
+                    el.getTextContent(), true, modelType, getEntityModel(foreignKey.split("/")[0], language), language); //$NON-NLS-1$
             if (fkBean != null) {
                 String fkNotFoundMessage = fkBean.get("foreignKeyDeleteMessage"); //$NON-NLS-1$
                 if (fkNotFoundMessage != null) {// fix bug TMDM-2757
@@ -1766,7 +1614,8 @@ public class BrowseRecordsAction implements BrowseRecordsService {
             }
         } else if (model.isSimpleType()) {
             nodeModel.setObjectValue(el.getTextContent());
-            migrationMultiLingualFieldValue(null, model, el, typePath, false, nodeModel);
+            org.talend.mdm.webapp.browserecords.server.util.CommonUtil.migrationMultiLingualFieldValue(null, model, el, typePath,
+                    false, nodeModel);
         }
         if (isCreate && model.getDefaultValueExpression() != null && model.getDefaultValueExpression().trim().length() > 0) {
             nodeModel.setChangeValue(true);
@@ -1899,7 +1748,9 @@ public class BrowseRecordsAction implements BrowseRecordsService {
             } else {
                 String[] pk = wsi.getIds();
                 if (pk == null || pk.length == 0) {
-                    pk = extractIdWithDots(ids);
+                    WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                            new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), concept));
+                    pk = extractIdWithDots(key.getFields(), ids);
                 }
                 WSItem wsItem = CommonUtil.getPort().getItem(
                         new WSGetItem(new WSItemPK(new WSDataClusterPK(getCurrentDataCluster()), concept, pk)));
@@ -1941,7 +1792,9 @@ public class BrowseRecordsAction implements BrowseRecordsService {
                 String dataCluster = getCurrentDataCluster();
                 // get item
                 WSDataClusterPK wsDataClusterPK = new WSDataClusterPK(dataCluster);
-                String[] idArray = extractIdWithDots(ids);
+                WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                        new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), concept));
+                String[] idArray = extractIdWithDots(key.getFields(), ids);
 
                 WSItem wsItem = CommonUtil.getPort().getItem(new WSGetItem(new WSItemPK(wsDataClusterPK, concept, idArray)));
                 doc = org.talend.mdm.webapp.base.server.util.XmlUtil.parseText(wsItem.getContent());
@@ -1998,8 +1851,10 @@ public class BrowseRecordsAction implements BrowseRecordsService {
     @Override
     public boolean isItemModifiedByOthers(ItemBean itemBean) throws ServiceException {
         try {
+            WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                    new WSGetBusinessConceptKey(new WSDataModelPK(getCurrentDataModel()), itemBean.getConcept()));
             ItemPOJOPK itempk = new ItemPOJOPK(new DataClusterPOJOPK(getCurrentDataCluster()), itemBean.getConcept(),
-                    extractIdWithDots(itemBean.getIds()));
+                    extractIdWithDots(key.getFields(), itemBean.getIds()));
             boolean isModified = com.amalto.core.util.Util.getItemCtrl2Local().isItemModifiedByOther(itempk,
                     itemBean.getLastUpdateTime());
             return isModified;
diff --git a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/util/CommonUtil.java b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/util/CommonUtil.java
index a42c95a..2ff9279 100644
--- a/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/util/CommonUtil.java
+++ b/org.talend.mdm.webapp.browserecords/src/main/java/org/talend/mdm/webapp/browserecords/server/util/CommonUtil.java
@@ -23,20 +23,35 @@ import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
 import org.dom4j.DocumentHelper;
+import org.dom4j.Namespace;
+import org.dom4j.QName;
 import org.talend.mdm.webapp.base.client.exception.ServiceException;
 import org.talend.mdm.webapp.base.client.model.DataTypeConstants;
+import org.talend.mdm.webapp.base.client.model.ForeignKeyBean;
+import org.talend.mdm.webapp.base.client.util.FormatUtil;
 import org.talend.mdm.webapp.base.client.util.MultilanguageMessageParser;
+import org.talend.mdm.webapp.base.server.ForeignKeyHelper;
 import org.talend.mdm.webapp.base.server.util.XmlUtil;
 import org.talend.mdm.webapp.base.shared.ComplexTypeModel;
+import org.talend.mdm.webapp.base.shared.EntityModel;
 import org.talend.mdm.webapp.base.shared.TypeModel;
+import org.talend.mdm.webapp.browserecords.client.model.ItemBean;
 import org.talend.mdm.webapp.browserecords.client.model.ItemNodeModel;
+import org.talend.mdm.webapp.browserecords.server.bizhelpers.DataModelHelper;
+import org.talend.mdm.webapp.browserecords.server.bizhelpers.RoleHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
+import com.amalto.core.ejb.ItemPOJO;
+import com.amalto.core.ejb.ItemPOJOPK;
+import com.amalto.core.objects.datacluster.ejb.DataClusterPOJOPK;
+import com.amalto.core.util.EntityNotFoundException;
+import com.amalto.webapp.core.bean.Configuration;
 import com.amalto.webapp.core.util.Util;
 
 /**
@@ -47,41 +62,49 @@ public class CommonUtil {
     private static final Logger LOG = Logger.getLogger(CommonUtil.class);
 
     public static List<ItemNodeModel> getDefaultTreeModel(TypeModel model, boolean isCreate, String language) {
-        return org.talend.mdm.webapp.browserecords.client.util.CommonUtil.getDefaultTreeModel(model, language, false, isCreate, true);
+        return org.talend.mdm.webapp.browserecords.client.util.CommonUtil.getDefaultTreeModel(model, language, false, isCreate,
+                true);
     }
 
-    public static int getFKFormatType(String str){
-        if(str == null)
+    public static int getFKFormatType(String str) {
+        if (str == null) {
             return 0;
-        
-        if(str.trim().equalsIgnoreCase("")) //$NON-NLS-1$
+        }
+
+        if (str.trim().equalsIgnoreCase("")) {
             return 0;
-        
+        }
+
         Pattern p = Pattern.compile("^\\[.+\\]$"); //$NON-NLS-1$
         Matcher m = p.matcher(str);
-        if(m.matches())
+        if (m.matches()) {
             return 1;
-        
+        }
+
         p = Pattern.compile("^\\[.+\\]-.+"); //$NON-NLS-1$
         m = p.matcher(str);
-        if(m.matches())
+        if (m.matches()) {
             return 2;
-        
+        }
+
         return 0;
     }
-    
-    public static String getForeignKeyId(String str, int type){
-        if(type == 1)
+
+    public static String getForeignKeyId(String str, int type) {
+        if (type == 1) {
             return str;
-        if(type == 2){
+        }
+        if (type == 2) {
             int index = str.indexOf("-"); //$NON-NLS-1$
-            if(index > 0)
+            if (index > 0) {
                 return str.substring(0, index);
+            }
         }
-        return null;            
+        return null;
     }
 
-    public static Document getSubXML(TypeModel typeModel, String realType, Map<String, List<String>> map, String language) throws ServiceException {
+    public static Document getSubXML(TypeModel typeModel, String realType, Map<String, List<String>> map, String language)
+            throws ServiceException {
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         try {
             DocumentBuilder builder = factory.newDocumentBuilder();
@@ -106,8 +129,8 @@ public class CommonUtil {
         return XmlUtil.parseDocument(doc);
     }
 
-    private static List<Element> _getDefaultXML(TypeModel model, TypeModel parentModel, String realType, Document doc, Map<String, List<String>> map, 
-            String language) {
+    private static List<Element> _getDefaultXML(TypeModel model, TypeModel parentModel, String realType, Document doc,
+            Map<String, List<String>> map, String language) {
         List<Element> itemNodes = new ArrayList<Element>();
         if (model.getMinOccurs() > 1) {
             for (int i = 0; i < model.getMinOccurs(); i++) {
@@ -120,16 +143,16 @@ public class CommonUtil {
             applySimpleTypesDefaultValue(model, parentModel, el);
             itemNodes.add(el);
         }
-    	if (model.getForeignkey() != null && model.getForeignkey().trim().length() > 0){
-    		if (map != null && map.containsKey(model.getXpath()) && map.get(model.getXpath()).size() > 0) {
+        if (model.getForeignkey() != null && model.getForeignkey().trim().length() > 0) {
+            if (map != null && map.containsKey(model.getXpath()) && map.get(model.getXpath()).size() > 0) {
                 int count = map.get(model.getXpath()).size() - itemNodes.size();
                 for (int i = 0; i < count; i++) {
-    				Element el = doc.createElement(model.getName());
+                    Element el = doc.createElement(model.getName());
                     applySimpleTypesDefaultValue(model, parentModel, el);
                     itemNodes.add(el);
-    			}
-    		}
-    	}
+                }
+            }
+        }
         if (!model.isSimpleType()) {
             ComplexTypeModel complexModel = (ComplexTypeModel) model;
             ComplexTypeModel realTypeModel = complexModel.getRealType(realType);
@@ -142,6 +165,11 @@ public class CommonUtil {
             for (Element node : itemNodes) {
                 if (realTypeModel != null) {
                     node.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", realType); //$NON-NLS-1$ //$NON-NLS-2$
+                } else if (parentModel != null && !model.isAbstract() && model.getType() != null
+                        && complexModel.getReusableComplexTypes().size() > 0) {
+                    // When create a record, if the node is not root node and it is reusable type(but not abstract
+                    // type), it need to record the xsi:type value.
+                    node.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", model.getType().getTypeName()); //$NON-NLS-1$ //$NON-NLS-2$
                 }
                 for (TypeModel typeModel : children) {
                     List<Element> els = _getDefaultXML(typeModel, model, realType, doc, map, language);
@@ -158,8 +186,9 @@ public class CommonUtil {
 
         // if parent node is not root node, also is non-mandatory, don't apply system default value
         if (parentModel != null && parentModel.getParentTypeModel() != null && parentModel instanceof ComplexTypeModel
-                && parentModel.getMinOccurs() == 0)
+                && parentModel.getMinOccurs() == 0) {
             return;
+        }
 
         if (nodeTypeModel != null && el != null) {
             // only assist system default value for mandatory node
@@ -172,12 +201,12 @@ public class CommonUtil {
 
         }
     }
-    
+
     public static Map<String, String> handleProcessMessage(String outputMessage, String language) throws Exception {
         Map<String, String> messageMap = new HashMap<String, String>();
         messageMap.put("typeCode", null); //$NON-NLS-1$
         messageMap.put("message", null); //$NON-NLS-1$
-        
+
         Document doc = Util.parse(outputMessage);
         String xpath = "//report/message"; //$NON-NLS-1$
         NodeList checkList = Util.getNodeList(doc, xpath);
@@ -187,16 +216,245 @@ public class CommonUtil {
                 Element messageElement = (Element) messageNode;
                 messageMap.put("typeCode", messageElement.getAttribute("type")); //$NON-NLS-1$ //$NON-NLS-2$
                 NodeList childList = messageElement.getChildNodes();
-                if(childList.getLength() == 1) {
+                if (childList.getLength() == 1) {
                     Node contentNode = childList.item(0);
-                    if(contentNode.getNodeType() == Node.TEXT_NODE) 
-                        messageMap.put("message", MultilanguageMessageParser.pickOutISOMessage(contentNode.getTextContent(), language)); //$NON-NLS-1$
-                    else if(contentNode.getNodeType() == Node.ELEMENT_NODE)
-                        if(contentNode.getChildNodes().getLength() == 1 && contentNode.getChildNodes().item(0).getNodeType() == Node.TEXT_NODE)
-                            messageMap.put("message", MultilanguageMessageParser.pickOutISOMessage(contentNode.getTextContent(), language)); //$NON-NLS-1$
+                    if (contentNode.getNodeType() == Node.TEXT_NODE) {
+                        messageMap.put(
+                                "message", MultilanguageMessageParser.pickOutISOMessage(contentNode.getTextContent(), language)); //$NON-NLS-1$
+                    } else if (contentNode.getNodeType() == Node.ELEMENT_NODE) {
+                        if (contentNode.getChildNodes().getLength() == 1
+                                && contentNode.getChildNodes().item(0).getNodeType() == Node.TEXT_NODE) {
+                            messageMap
+                                    .put("message", MultilanguageMessageParser.pickOutISOMessage(contentNode.getTextContent(), language)); //$NON-NLS-1$
+                        }
+                    }
                 }
             }
         }
         return messageMap;
     }
+
+    public static void dynamicAssembleByResultOrder(ItemBean itemBean, List<String> viewableXpaths, EntityModel entityModel,
+            Map<String, EntityModel> map, String language) throws Exception {
+
+        if (itemBean.getItemXml() != null) {
+            org.dom4j.Document docXml = DocumentHelper.parseText(itemBean.getItemXml());
+            int i = 0;
+            List<?> els = docXml.getRootElement().elements();
+            for (String path : viewableXpaths) {
+                String leafPath = path.substring(path.lastIndexOf('/') + 1);
+                if (leafPath.startsWith("@")) { //$NON-NLS-1$ 
+                    String[] xsiType = leafPath.substring(leafPath.indexOf("@") + 1).split(":"); //$NON-NLS-1$//$NON-NLS-2$ 
+                    itemBean.set(
+                            path,
+                            docXml.getRootElement()
+                                    .element(
+                                            new QName(xsiType[1], new Namespace(xsiType[0],
+                                                    "http://www.w3.org/2001/XMLSchema-instance"))).getText()); //$NON-NLS-1$ 
+                    continue;
+                }
+
+                TypeModel typeModel = entityModel.getMetaDataTypes().get(path);
+                org.dom4j.Element el = (org.dom4j.Element) els.get(i);
+                if (typeModel != null && typeModel.getForeignkey() != null) {
+                    String modelType = el.attributeValue(new QName("type", new Namespace("tmdm", "http://www.talend.com/mdm"))); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ 
+                    itemBean.set(path, path + "-" + el.getText()); //$NON-NLS-1$ 
+                    itemBean.setForeignkeyDesc(
+                            path + "-" + el.getText(), org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getForeignKeyDesc(typeModel, el.getText(), false, modelType, map.get(typeModel.getXpath()), language)); //$NON-NLS-1$ 
+                } else {
+                    itemBean.set(path, el.getText());
+                }
+                i++;
+            }
+        }
+    }
+
+    public static Map<String, EntityModel> getForeignKeyEntityMap(EntityModel entityModel, List<String> viewableXpaths,
+            String language) throws Exception {
+        Map<String, EntityModel> foreignKeyEntityMap = null;
+        if (viewableXpaths != null) {
+            foreignKeyEntityMap = new HashMap<String, EntityModel>();
+            for (String xpath : viewableXpaths) {
+                TypeModel typeModel = entityModel.getMetaDataTypes().get(xpath);
+                if (typeModel != null && typeModel.getForeignkey() != null) {
+                    foreignKeyEntityMap.put(xpath, org.talend.mdm.webapp.browserecords.server.util.CommonUtil.getEntityModel(
+                            typeModel.getForeignkey().split("/")[0], language)); //$NON-NLS-1$ 
+                }
+            }
+        }
+        return foreignKeyEntityMap;
+    }
+
+    public static ForeignKeyBean getForeignKeyDesc(TypeModel model, String ids, boolean isNeedExceptionMessage, String modelType,
+            EntityModel entityModel, String language) throws Exception {
+        String xpathForeignKey = model.getForeignkey();
+        if (xpathForeignKey == null) {
+            return null;
+        }
+        if (ids == null || ids.trim().length() == 0) {
+            return null;
+        }
+
+        ForeignKeyBean bean = new ForeignKeyBean();
+        bean.setId(ids);
+        bean.setForeignKeyPath(model.getXpath());
+        try {
+            if (!model.isRetrieveFKinfos()) {
+                return bean;
+            } else {
+                ItemPOJOPK pk = new ItemPOJOPK();
+                String[] itemId = org.talend.mdm.webapp.base.server.util.CommonUtil.extractFKRefValue(ids, language);
+                pk.setIds(itemId);
+                String conceptName = model.getForeignkey().split("/")[0]; //$NON-NLS-1$ 
+                // get deriveType's conceptName, otherwise getItem() method will throw exception.
+                if (modelType != null && modelType.trim().length() > 0) {
+                    conceptName = modelType;
+                    bean.setConceptName(conceptName);
+                }
+                pk.setConceptName(conceptName);
+                pk.setDataClusterPOJOPK(new DataClusterPOJOPK(getCurrentDataCluster()));
+                ItemPOJO item = com.amalto.core.util.Util.getItemCtrl2Local().getItem(pk);
+
+                if (item != null) {
+                    org.w3c.dom.Document document = item.getProjection().getOwnerDocument();
+                    List<String> foreignKeyInfo = model.getForeignKeyInfo();
+                    String formattedId = ""; // Id formatted using foreign key info //$NON-NLS-1$ 
+                    for (String foreignKeyPath : foreignKeyInfo) {
+                        NodeList nodes = com.amalto.core.util.Util.getNodeList(document,
+                                StringUtils.substringAfter(foreignKeyPath, "/")); //$NON-NLS-1$ 
+                        if (nodes.getLength() == 1) {
+                            String value = nodes.item(0).getTextContent();
+                            TypeModel typeModel = entityModel.getTypeModel(foreignKeyPath);
+                            if (typeModel != null) {
+                                if (typeModel.getForeignKeyInfo() != null && typeModel.getForeignKeyInfo().size() > 0
+                                        && !"".equals(value)) { //$NON-NLS-1$ 
+                                    value = ForeignKeyHelper.getDisplayValue(value, foreignKeyPath, getCurrentDataCluster(),
+                                            entityModel, language);
+                                }
+
+                                if (typeModel.getType().equals(DataTypeConstants.MLS)) {
+                                    value = MultilanguageMessageParser.getValueByLanguage(value, language);
+                                }
+                            }
+                            bean.getForeignKeyInfo().put(foreignKeyPath, value);
+                            if (formattedId.equals("")) { //$NON-NLS-1$ 
+                                formattedId += value;
+                            } else {
+                                formattedId += "-" + value; //$NON-NLS-1$ 
+                            }
+                        }
+                    }
+
+                    bean.setDisplayInfo(formattedId);
+                    return bean;
+                } else {
+                    return null;
+                }
+            }
+        } catch (EntityNotFoundException e) {
+            if (!isNeedExceptionMessage) {
+                return null;
+            }
+            // fix bug TMDM-2757
+            bean.set("foreignKeyDeleteMessage", e.getMessage()); //$NON-NLS-1$ 
+            return bean;
+        }
+    }
+
+    public static String getPKInfos(List<String> xPathList) {
+        StringBuilder gettedValue = new StringBuilder();
+        for (String pkInfo : xPathList) {
+            if (pkInfo != null) {
+                if (gettedValue.length() == 0) {
+                    gettedValue.append(pkInfo);
+                } else {
+                    gettedValue.append("-").append(pkInfo); //$NON-NLS-1$ 
+                }
+            }
+        }
+        return gettedValue.toString();
+    }
+
+    public static List<String> getPKInfoList(EntityModel entityModel, TypeModel model, String ids, Document document,
+            String language) throws Exception {
+        List<String> xpathPKInfos = model.getPrimaryKeyInfo();
+        List<String> xPathList = new ArrayList<String>();
+        if (xpathPKInfos != null && xpathPKInfos.size() > 0 && ids != null) {
+            for (String pkInfoPath : xpathPKInfos) {
+                if (pkInfoPath != null && pkInfoPath.length() > 0) {
+                    String pkInfo = Util.getFirstTextNode(document, pkInfoPath);
+                    if (pkInfo != null) {
+                        if (entityModel.getTypeModel(pkInfoPath).getType().equals(DataTypeConstants.MLS)) {
+                            String value = MultilanguageMessageParser.getValueByLanguage(pkInfo, language);
+                            if (value != null) {
+                                xPathList.add(value);
+                            }
+                        } else {
+                            xPathList.add(pkInfo);
+                        }
+                    }
+                }
+            }
+        } else {
+            xPathList.add(model.getLabel(language));
+        }
+        return xPathList;
+    }
+
+    public static void migrationMultiLingualFieldValue(ItemBean itemBean, TypeModel typeModel, Node node, String path,
+            boolean isMultiOccurence, ItemNodeModel nodeModel) {
+        String value = node.getTextContent();
+        if (typeModel != null && typeModel.getType().equals(DataTypeConstants.MLS)
+                && BrowseRecordsConfiguration.dataMigrationMultiLingualFieldAuto()) {
+            if (value != null && value.trim().length() > 0) {
+                if (!MultilanguageMessageParser.isExistMultiLanguageFormat(value)) {
+                    String defaultLanguage = com.amalto.core.util.Util.getDefaultSystemLocale();
+                    String newValue = MultilanguageMessageParser.getFormatValueByDefaultLanguage(value,
+                            defaultLanguage != null ? defaultLanguage : "en");//$NON-NLS-1$ 
+                    if (nodeModel == null) {
+                        if (isMultiOccurence) {
+                            node.setTextContent(newValue);
+                        } else {
+                            itemBean.set(path, newValue);
+                        }
+                    } else {
+                        nodeModel.setObjectValue(newValue);
+                    }
+                } else if (nodeModel != null) {
+                    nodeModel.setObjectValue(FormatUtil.multiLanguageEncode(value));
+                }
+            }
+        }
+    }
+
+    public static Document parseResultDocument(String result, String expectedRootElement) throws Exception {
+        Document doc = Util.parse(result);
+        Element rootElement = doc.getDocumentElement();
+        if (!rootElement.getNodeName().equals(expectedRootElement)) {
+            // When there is a null value in fields, the viewable fields sequence is not enclosed by expected element
+            // FIXME Better to find out a solution at the underlying stage
+            doc.removeChild(rootElement);
+            Element resultElement = doc.createElement(expectedRootElement);
+            resultElement.appendChild(rootElement);
+        }
+        return doc;
+    }
+
+    public static EntityModel getEntityModel(String concept, String language) throws Exception {
+        // bind entity model
+        String model = getCurrentDataModel();
+        EntityModel entityModel = new EntityModel();
+        DataModelHelper.parseSchema(model, concept, entityModel, RoleHelper.getUserRoles());
+        return entityModel;
+    }
+
+    public static String getCurrentDataCluster() throws Exception {
+        Configuration config = Configuration.getConfiguration();
+        return config.getCluster();
+    }
+
+    public static String getCurrentDataModel() throws Exception {
+        Configuration config = Configuration.getConfiguration();
+        return config.getModel();
+    }
 }
diff --git a/org.talend.mdm.webapp.browserecords/src/main/resources/org/talend/mdm/webapp/browserecords/BrowseRecords.gwt.xml b/org.talend.mdm.webapp.browserecords/src/main/resources/org/talend/mdm/webapp/browserecords/BrowseRecords.gwt.xml
index 20645dd..7d2e4c6 100644
--- a/org.talend.mdm.webapp.browserecords/src/main/resources/org/talend/mdm/webapp/browserecords/BrowseRecords.gwt.xml
+++ b/org.talend.mdm.webapp.browserecords/src/main/resources/org/talend/mdm/webapp/browserecords/BrowseRecords.gwt.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module rename-to='browserecords'>
  <inherits name="org.talend.mdm.webapp.browserecords.BaseBrowseRecords" />
-
+ <inherits name="com.google.gwt.http.HTTP"/>
  <!-- Specify the app entry point class. -->
  <entry-point class='org.talend.mdm.webapp.browserecords.client.BrowseRecords' />
 
diff --git a/org.talend.mdm.webapp.browserecords/src/test/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsActionTest.java b/org.talend.mdm.webapp.browserecords/src/test/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsActionTest.java
index 1279cfb..797f49a 100644
--- a/org.talend.mdm.webapp.browserecords/src/test/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsActionTest.java
+++ b/org.talend.mdm.webapp.browserecords/src/test/java/org/talend/mdm/webapp/browserecords/server/actions/BrowseRecordsActionTest.java
@@ -93,6 +93,39 @@ public class BrowseRecordsActionTest extends TestCase {
                 BrowseRecordsActionTest.class);
     }
     
+    public void testExtractIdWithDots() throws Exception {
+        String[] keys = new String[] { "Id" };
+        String ids = ".3";
+
+        String[] result = action.extractIdWithDots(keys, ids);
+        assertTrue(result.length == 1);
+        assertEquals(result[0], ids);
+
+        ids = "1.3";
+        result = action.extractIdWithDots(keys, ids);
+        assertTrue(result.length == 1);
+        assertEquals(result[0], ids);
+
+        ids = "3.";
+        result = action.extractIdWithDots(keys, ids);
+        assertTrue(result.length == 1);
+        assertEquals(result[0], ids);
+
+        ids = "1";
+        result = action.extractIdWithDots(keys, ids);
+        assertTrue(result.length == 1);
+        assertEquals(result[0], ids);
+
+        // Composite key is only support the following format, otherwise it will throw exception
+        // see com.amalto.core.storage.StorageWrapper.getSelectTypeById(ComplexTypeMetadata, String, String[])
+        keys = new String[] { "Id1", "Id2" };
+        ids = "1.3";
+        result = action.extractIdWithDots(keys, ids);
+        assertTrue(result.length == 2);
+        assertEquals(result[0], "1");
+        assertEquals(result[1], "3");
+    }
+    
     public void testDynamicAssembleByResultOrder() throws Exception{
         String xml = "<result><numeroContrat xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>5005007</numeroContrat><xsi:type xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>AP-RE</xsi:type></result>";
         ItemBean itemBean = new ItemBean();
diff --git a/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/DataModelAccessor.java b/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/DataModelAccessor.java
new file mode 100644
index 0000000..a4998ca
--- /dev/null
+++ b/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/DataModelAccessor.java
@@ -0,0 +1,171 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package com.amalto.webapp.core.util;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.rmi.RemoteException;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.log4j.Logger;
+import org.talend.mdm.commmon.metadata.ComplexTypeMetadata;
+import org.talend.mdm.commmon.metadata.MetadataRepository;
+
+import com.amalto.webapp.util.webservices.WSDataModel;
+import com.amalto.webapp.util.webservices.WSDataModelPK;
+import com.amalto.webapp.util.webservices.WSGetDataModel;
+
+
+/**
+ * created by talend2 on 2013-6-13
+ * Detailled comment
+ *
+ */
+public class DataModelAccessor {
+    
+    private static final Logger LOG = Logger.getLogger(DataModelAccessor.class);
+    
+    private Map<String,String> xsdSchemaMap = new HashMap<String,String>();
+    
+    private static DataModelAccessor accessor;    
+    
+    public static synchronized DataModelAccessor getInstance(){    
+        if (accessor == null) {
+            accessor = new DataModelAccessor();
+        }             
+        return accessor;           
+    }
+    
+    public String getDataModelXSD(String dataModelName) throws RemoteException, XtentisWebappException {
+        if (dataModelName != null && !dataModelName.isEmpty()) {
+            if (xsdSchemaMap.get(dataModelName) == null) {
+                WSDataModel dataModel = Util.getPort().getDataModel(new WSGetDataModel(new WSDataModelPK(dataModelName)));            
+                if (dataModel != null) {
+                    xsdSchemaMap.put(dataModelName, dataModel.getXsdSchema());
+                    return dataModel.getXsdSchema();
+                } else {
+                    return null;
+                }
+            } else {
+                return xsdSchemaMap.get(dataModelName);
+            }  
+        } else {
+            return null;
+        }
+      
+    }
+
+    public boolean checkReadAccess(String dataModelName, String conceptName) {
+        try {
+            if (dataModelName != null && conceptName != null) {
+                String roles = com.amalto.webapp.core.util.Util.getPrincipalMember("Roles"); //$NON-NLS-1$
+                List<String> roleList = Arrays.asList(roles.split(",")); //$NON-NLS-1$
+                String dataModelXSD = getDataModelXSD(dataModelName);
+                return dataModelXSD != null ? checkReadAccessHelper(dataModelXSD, conceptName, roleList) : false; 
+            } else {
+                return false;
+            }   
+        } catch (Exception e) {
+            LOG.error(e.getMessage(), e);
+            return false;
+        }
+    }
+
+    public boolean checkReadAccessHelper(String modelXSD, String conceptName, List<String> roles) {
+        boolean result = false;
+
+        if (LOG.isDebugEnabled())
+            LOG.debug("Check read permission on " + conceptName + " for roles " + roles); //$NON-NLS-1$ //$NON-NLS-2$
+
+        try {
+            MetadataRepository repository = new MetadataRepository();
+            InputStream is = new ByteArrayInputStream(modelXSD.getBytes("UTF-8")); //$NON-NLS-1$
+            repository.load(is);
+
+            ComplexTypeMetadata metadata = repository.getComplexType(conceptName);
+
+            if (metadata != null) {
+                List<String> noAccessRoles = metadata.getHideUsers();
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("Roles without access " + noAccessRoles); //$NON-NLS-1$
+                }
+                noAccessRoles.retainAll(roles);
+                boolean userIsNoAccess = !noAccessRoles.isEmpty();
+                result = !userIsNoAccess;
+            } else {
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("Complex Type " + conceptName + " not found"); //$NON-NLS-1$ //$NON-NLS-2$
+                }
+            }
+        } catch (Exception e) {
+            LOG.error(e.getMessage(), e);
+        }
+        return result;
+    }
+
+    public boolean checkRestoreAccess(String dataModelName, String conceptName) {
+        try {
+            if (dataModelName != null && conceptName != null) {
+                String roles = com.amalto.webapp.core.util.Util.getPrincipalMember("Roles"); //$NON-NLS-1$
+                List<String> roleList = Arrays.asList(roles.split(",")); //$NON-NLS-1$
+                String dataModelXSD = getDataModelXSD(dataModelName);
+                return dataModelXSD != null ? checkRestoreAccessHelper(dataModelXSD, conceptName, roleList) : false;
+            } else {
+                return false;
+            }
+        } catch (Exception e) {
+            LOG.error(e.getMessage(), e);
+            return false;
+        }
+    }
+
+    public boolean checkRestoreAccessHelper(String modelXSD, String conceptName, List<String> roles) {
+        boolean result = false;
+
+        if (LOG.isDebugEnabled())
+            LOG.debug("Check restore permission on " + conceptName + " for roles " + roles); //$NON-NLS-1$ //$NON-NLS-2$
+
+        try {
+            MetadataRepository repository = new MetadataRepository();
+            InputStream is = new ByteArrayInputStream(modelXSD.getBytes("UTF-8")); //$NON-NLS-1$
+            repository.load(is);
+
+            ComplexTypeMetadata metadata = repository.getComplexType(conceptName);
+
+            if (metadata != null) {
+                List<String> noAccessRoles = metadata.getHideUsers();
+                if (LOG.isDebugEnabled())
+                    LOG.debug("Roles without access " + noAccessRoles); //$NON-NLS-1$
+                List<String> writeAccessRoles = metadata.getWriteUsers();
+                if (LOG.isDebugEnabled())
+                    LOG.debug("Roles with write permission " + writeAccessRoles); //$NON-NLS-1$
+
+                noAccessRoles.retainAll(roles);
+                boolean userIsNoAccess = !noAccessRoles.isEmpty();
+                writeAccessRoles.retainAll(roles);
+                boolean userHasWriteAccess = !writeAccessRoles.isEmpty();
+
+                result = !userIsNoAccess && userHasWriteAccess;
+            } else {
+                if (LOG.isDebugEnabled())
+                    LOG.debug("Complex Type " + conceptName + " not found"); //$NON-NLS-1$ //$NON-NLS-2$
+            }
+        } catch (Exception e) {
+            LOG.error(e.getMessage(), e);
+        }
+        return result;
+    }
+}
diff --git a/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/Util.java b/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/Util.java
index 57ee487..d0e20c8 100644
--- a/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/Util.java
+++ b/org.talend.mdm.webapp.core/src/com/amalto/webapp/core/util/Util.java
@@ -39,7 +39,6 @@ import java.util.Collection;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -130,12 +129,10 @@ import com.sun.org.apache.xpath.internal.objects.XObject;
 import com.sun.xml.xsom.XSAnnotation;
 import com.sun.xml.xsom.XSElementDecl;
 
-/**
- * @author bgrieder
- */
 public class Util {
 
     private static String port = null;
+
     static {
         port = MDMConfiguration.getHttpPort();
     }
@@ -181,24 +178,18 @@ public class Util {
 
     public static XtentisPort getPort(String endpointAddress, String username, String password, int force)
             throws XtentisWebappException {
-
-        if (force == _FORCE_RMI_)
+        if (force == _FORCE_RMI_) {
             return getRMIEndPoint();
-        if (force == _FORCE_WEB_SERVICE_)
+        }
+        if (force == _FORCE_WEB_SERVICE_) {
             return getWSPort(endpointAddress, username, password);
-
-        // Auto
-        if (endpointAddress.contains("localhost")) //$NON-NLS-1$
+        }
+        if (endpointAddress.contains("localhost")) { //$NON-NLS-1$
             return getRMIEndPoint();
-
+        }
         return getWSPort(endpointAddress, username, password);
-
     }
 
-    // private static XtentisPort getPort(String username, String password, int force) throws XtentisWebappException {
-    // return getPort(endpoint_address, username, password, force);
-    // }
-
     private static XtentisPort getWSPort(String endpointAddress, String username, String password) throws XtentisWebappException {
         try {
             Stub stub = (Stub) (new XtentisService_Impl()).getXtentisPort();
@@ -214,15 +205,11 @@ public class Util {
     }
 
     private static XtentisPort getRMIEndPoint() throws XtentisWebappException {
-
-        // return new XtentisRMIPort();
-
         try {
             return (IXtentisRMIPort) Class.forName("com.amalto.webapp.core.util.XtentisRMIPort").newInstance(); //$NON-NLS-1$
         } catch (Exception e) {
-            e.printStackTrace();
+            throw new XtentisWebappException(e);
         }
-        return null;
     }
 
     /*********************************************************************
@@ -230,13 +217,12 @@ public class Util {
      *********************************************************************/
 
     public static String getXML(Class<?> c, String filename) throws Exception {
-        BufferedReader in = null;
-        in = new BufferedReader(new InputStreamReader(c.getResourceAsStream(filename)));
-
+        BufferedReader in = new BufferedReader(new InputStreamReader(c.getResourceAsStream(filename)));
         String xml = ""; //$NON-NLS-1$
         String line;
-        while ((line = in.readLine()) != null)
+        while ((line = in.readLine()) != null) {
             xml += line + "\n"; //$NON-NLS-1$
+        }
         return xml;
     }
 
@@ -250,9 +236,6 @@ public class Util {
 
     /**
      * Join an array of strings into a single string using a separator
-     * 
-     * @param strings
-     * @param separator
      * @return a single string or null
      */
     public static String joinStrings(String[] strings, String separator) {
@@ -268,8 +251,6 @@ public class Util {
 
     /**
      * Returns the first part - eg. the concept - from the path
-     * 
-     * @param path
      * @return the Concept Name
      */
     public static String getConceptFromPath(String path) {
@@ -288,16 +269,14 @@ public class Util {
     }
 
     /**
-     * DOC HSHU Comment method "getFieldFromPath". Returns the last part - eg. the field name - from the path
-     * 
-     * @param path
-     * @return
+     * Comment method "getFieldFromPath". Returns the last part - eg. the field name - from the path
      */
     public static String getFieldFromPath(String path) {
         String result = null;
         if (path != null) {
-            if (path.endsWith("/")) //$NON-NLS-1$
+            if (path.endsWith("/")) { //$NON-NLS-1$
                 path = path.substring(0, path.lastIndexOf("/")); //$NON-NLS-1$
+            }
             String[] tmps = path.split("/"); //$NON-NLS-1$
             result = tmps[tmps.length - 1];
         }
@@ -315,8 +294,9 @@ public class Util {
 
     public static WSWhereCondition getConditionFromPath(String path) {
         Pattern p = Pattern.compile("(.*?)\\[(.*?)(&=|!=|>=|<=|>|<|=)(.*?)\\].*"); //$NON-NLS-1$
-        if (!path.endsWith("/")) //$NON-NLS-1$
+        if (!path.endsWith("/")) { //$NON-NLS-1$
             path += "/"; //$NON-NLS-1$
+        }
         Matcher m = p.matcher(path);
         if (m.matches()) {
             WSWhereCondition wc = new WSWhereCondition();
@@ -398,14 +378,12 @@ public class Util {
     }
 
     public static WSWhereItem makeWhereItem(List<WSWhereItem> conditions) {
-
         List<Object> conds = new ArrayList<Object>();
         for (int i = 0; i < conditions.size(); i++) {
             WSWhereItem item = conditions.get(i);
             conds.add(item);
             if (i < conditions.size() - 1) {
                 String predicate = item.getWhereCondition().getStringPredicate().getValue();
-
                 if (WSStringPredicate.NOT.getValue().equals(predicate)) {
                     predicate = WSStringPredicate.AND.getValue();
                 } else if (WSStringPredicate.EXACTLY.getValue().equals(predicate)) {
@@ -418,12 +396,9 @@ public class Util {
                 conds.add(predicate);
             }
         }
-
         Stack<String> stackOp = new Stack<String>();
-
         List<Object> rpn = new ArrayList<Object>();
-        for (int i = 0; i < conds.size(); i++) {
-            Object item = conds.get(i);
+        for (Object item : conds) {
             if (item instanceof WSWhereItem) {
                 rpn.add(item);
             } else {
@@ -550,9 +525,6 @@ public class Util {
     }
 
     /**
-     * 
-     * @param doc
-     * @param type
      * @return a specific value for Simple Type, "" for Complex Type
      * @throws Exception
      */
@@ -600,7 +572,7 @@ public class Util {
             }
             return false;
         } else {
-            NodeList importList = null;
+            NodeList importList;
             for (int nm = 0; nm < 2; nm++) {
                 if (nm == 0) {
                     importList = Util.getNodeList(doc, "//xsd:import"); //$NON-NLS-1$
@@ -630,7 +602,7 @@ public class Util {
 
         Pattern httpUrl = Pattern.compile("(http|https|ftp):(\\//|\\\\)(.*):(.*)"); //$NON-NLS-1$
         Matcher match = httpUrl.matcher(xsdLocation);
-        Document d = null;
+        Document d;
         try {
             if (match.matches()) {
                 List<String> authorizations = Util.getAuthorizationInfo();
@@ -653,8 +625,7 @@ public class Util {
         try {
             Subject subject = LocalUser.getCurrentSubject();
             Set<Principal> set = subject.getPrincipals();
-            for (Iterator<Principal> iter = set.iterator(); iter.hasNext();) {
-                Principal principal = iter.next();
+            for (Principal principal : set) {
                 if (principal instanceof Group) {
                     Group group = (Group) principal;
                     if ("Username".equals(group.getName())) { //$NON-NLS-1$
@@ -680,8 +651,8 @@ public class Util {
 
     public static String getResponseFromURL(String url, String user, String pwd) {
         BASE64Encoder encoder = new BASE64Encoder();
-        StringBuffer buffer = new StringBuffer();
-        String credentials = encoder.encode(new String(user + ":" + pwd).getBytes()); //$NON-NLS-1$
+        StringBuilder buffer = new StringBuilder();
+        String credentials = encoder.encode((user + ":" + pwd).getBytes()); //$NON-NLS-1$
 
         try {
             URL urlCn = new URL(url);
@@ -799,25 +770,22 @@ public class Util {
 
     /**
      * Returns a namespaced root element of a document Useful to create a namespace holder element
-     * 
-     * @param namespace
      * @return the root Element
      */
     public static Element getRootElement(String elementName, String namespace, String prefix) throws Exception {
-        Element rootNS = null;
         try {
             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
             factory.setNamespaceAware(true);
             DocumentBuilder builder = factory.newDocumentBuilder();
             DOMImplementation impl = builder.getDOMImplementation();
             Document namespaceHolder = impl.createDocument(namespace, (prefix == null ? "" : prefix + ":") + elementName, null); //$NON-NLS-1$ //$NON-NLS-2$
-            rootNS = namespaceHolder.getDocumentElement();
+            Element rootNS = namespaceHolder.getDocumentElement();
             rootNS.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:" + prefix, namespace); //$NON-NLS-1$ //$NON-NLS-2$
+            return rootNS;
         } catch (Exception e) {
             String err = "Error creating a namespace holder document: " + e.getLocalizedMessage(); //$NON-NLS-1$
             throw new Exception(err);
         }
-        return rootNS;
     }
 
     public static Document parse(String xmlString) throws Exception {
@@ -825,11 +793,9 @@ public class Util {
     }
 
     public static Document parse(String xmlString, String schema) throws Exception {
-
         // parse
-        Document d = null;
+        Document d;
         SAXErrorHandler seh = new SAXErrorHandler();
-
         try {
             // initialize the sax parser which uses Xerces
             System.setProperty("javax.xml.parsers.DocumentBuilderFactory", "org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"); //$NON-NLS-1$ //$NON-NLS-2$
@@ -851,8 +817,7 @@ public class Util {
                     + xmlString;
             throw new Exception(err);
         }
-
-        // check if dcument parsed correctly against the schema
+        // check if document parsed correctly against the schema
         if (schema != null) {
             String errors = seh.getErrors();
             if (!errors.equals("")) { //$NON-NLS-1$
@@ -868,9 +833,7 @@ public class Util {
     }
 
     public static String[] getTextNodes(Node contextNode, String xPath, Node namespaceNode) throws XtentisWebappException {
-        String[] results = null;
-        ;
-
+        String[] results;
         // test for hard-coded values
         if (xPath.startsWith("\"") && xPath.endsWith("\"")) //$NON-NLS-1$ //$NON-NLS-2$
             return new String[] { xPath.substring(1, xPath.length() - 1) };
@@ -879,7 +842,6 @@ public class Util {
         if (!xPath.matches(".*@[^/\\]]+")) // attribute //$NON-NLS-1$
             if (!xPath.endsWith(")")) // function //$NON-NLS-1$
                 xPath += "/text()"; //$NON-NLS-1$
-
         try {
             XObject xo = XPathAPI.eval(contextNode, xPath, namespaceNode);
             if (xo.getType() == XObject.CLASS_NODESET) {
@@ -899,7 +861,6 @@ public class Util {
             throw new XtentisWebappException(err);
         }
         return results;
-
     }
 
     public static String getFirstTextNode(Node contextNode, String xPath, Node namespaceNode) throws XtentisWebappException {
@@ -911,9 +872,6 @@ public class Util {
 
     /**
      * Get the first text node matching the Xpath
-     * 
-     * @param contextNode
-     * @param xPath
      * @return the String or null if not found
      * @throws XtentisWebappException
      */
@@ -936,84 +894,51 @@ public class Util {
     public static String getPrincipalMember(String key) throws Exception {
         String result = ""; //$NON-NLS-1$
         // Get the Authenticated Subject
-
         Subject subject = (Subject) PolicyContext.getContext("javax.security.auth.Subject.container"); //$NON-NLS-1$
-
         // Now look for a Group
-
         Set<Principal> principals = subject.getPrincipals(Principal.class);
-
-        Iterator<Principal> iter = principals.iterator();
-
-        while (iter.hasNext())
-
-        {
-
-            Principal p = (Principal) iter.next();
+        for (Principal p : principals) {
             if (p instanceof SimpleGroup) {
-
                 SimpleGroup sg = (SimpleGroup) p;
-
-                if (key.equals(sg.getName()))
-
-                {
-
+                if (key.equals(sg.getName())) {
                     Enumeration<?> en = sg.members();
-
-                    while (en.hasMoreElements())
-
-                    {
-
+                    while (en.hasMoreElements()) {
                         String info = en.nextElement().toString();
-
                         result = result + "," + info; //$NON-NLS-1$
-
                     }
-
                 }
-
             }
-
         }
-
-        if (result.length() > 0)
+        if (result.length() > 0) {
             result = result.substring(1);
+        }
         return result;
     }
 
     public static String getLoginUserName() throws Exception {
         return getPrincipalMember("Username"); //$NON-NLS-1$
-
     }
 
     public static String getLoginUniverse() throws Exception {
         return getPrincipalMember("Universe"); //$NON-NLS-1$
-
     }
 
     public static String getLoginRoles() throws Exception {
         return getPrincipalMember("Roles"); //$NON-NLS-1$
-
     }
 
     public static String getRevisionIdFromUniverse(String universeName, String conceptName) throws Exception {
-        String revisonId = ""; //$NON-NLS-1$
         WSUniverse wsUniverse = Util.getPort().getUniverse(new WSGetUniverse(new WSUniversePK(universeName)));
         UniversePOJO universe = XConverter.WS2POJO(wsUniverse);
-        revisonId = universe.getConceptRevisionID(conceptName);
-        return revisonId;
+        return universe.getConceptRevisionID(conceptName);
     }
 
     public static Element getLoginProvisioningFromDB() throws Exception {
-
         WSItem item = Util.getPort().getItem(
                 new WSGetItem(new WSItemPK(new WSDataClusterPK("PROVISIONING"), "User", new String[] { Util //$NON-NLS-1$ //$NON-NLS-2$
                         .getLoginUserName() })));
         String userString = item.getContent();
-
-        Element user = (Element) Util.getNodeList(Util.parse(userString), "//User").item(0); //$NON-NLS-1$
-        return user;
-        // return com.amalto.core.util.Util.getLoginProvisioningFromDB();
+        return (Element) Util.getNodeList(Util.parse(userString), "//User").item(0);
     }
 
     public static String getUserDataModel() throws Exception {
@@ -1080,26 +1005,28 @@ public class Util {
         if (bytes == null) {
             throw new IllegalArgumentException("byte array must not be null"); //$NON-NLS-1$
         }
-        StringBuffer hex = new StringBuffer(bytes.length * 2);
-        for (int i = 0; i < bytes.length; i++) {
-            hex.append(Character.forDigit((bytes[i] & 0XF0) >> 4, 16));
-            hex.append(Character.forDigit((bytes[i] & 0X0F), 16));
+        StringBuilder hex = new StringBuilder(bytes.length * 2);
+        for (byte aByte : bytes) {
+            hex.append(Character.forDigit((aByte & 0XF0) >> 4, 16));
+            hex.append(Character.forDigit((aByte & 0X0F), 16));
         }
         return hex.toString();
     }
 
-    /*********************************************************************
+    /**
+     * ******************************************************************
      * WEB SERVICES
-     *********************************************************************/
+     * *******************************************************************
+     */
 
     public static HashMap<String, Object> getMapFromKeyValues(WSBase64KeyValue[] params) throws RemoteException {
         try {
             HashMap<String, Object> map = new HashMap<String, Object>();
             if (params != null) {
-                for (int i = 0; i < params.length; i++) {
-                    if (params[i] != null) {
-                        String key = params[i].getKey();
-                        byte[] bytes = (new BASE64Decoder()).decodeBuffer(params[i].getBase64StringValue());
+                for (WSBase64KeyValue param : params) {
+                    if (param != null) {
+                        String key = param.getKey();
+                        byte[] bytes = (new BASE64Decoder()).decodeBuffer(param.getBase64StringValue());
                         if (bytes != null) {
                             ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                             ObjectInputStream ois = new ObjectInputStream(bais);
@@ -1124,8 +1051,7 @@ public class Util {
             WSBase64KeyValue[] keyValues = new WSBase64KeyValue[params.size()];
             Set<String> keys = params.keySet();
             int i = 0;
-            for (Iterator<String> iter = keys.iterator(); iter.hasNext();) {
-                String key = iter.next();
+            for (String key : keys) {
                 Object value = params.get(key);
                 if (value != null) {
                     ByteArrayOutputStream baos = new ByteArrayOutputStream();
@@ -1145,10 +1071,12 @@ public class Util {
     }
 
     public static String getCodeFromWSConnectorResponseCode(WSConnectorResponseCode code) {
-        if (code.equals(WSConnectorResponseCode.OK))
+        if (code.equals(WSConnectorResponseCode.OK)) {
             return "OK"; //$NON-NLS-1$
-        if (code.equals(WSConnectorResponseCode.STOPPED))
+        }
+        if (code.equals(WSConnectorResponseCode.STOPPED)) {
             return "STOPPED"; //$NON-NLS-1$
+        }
         return "ERROR"; //$NON-NLS-1$
     }
 
@@ -1185,11 +1113,6 @@ public class Util {
         return props;
     }
 
-    // public static void main(String[] args) {
-    // getConditionFromPath("Country[Country/isoCode!=CN]");
-    //
-    // }
-
     /**
      * store the info of datacluster and datamodel to PROVISIONING.
      */
@@ -1202,10 +1125,7 @@ public class Util {
     }
 
     /**
-     * gives the operator associated to the string 'option'
-     * 
-     * @param option
-     * @return
+     * @return gives the operator associated to the string 'option'
      */
     public static WSWhereOperator getOperator(String option) {
         WSWhereOperator res = null;
@@ -1238,11 +1158,6 @@ public class Util {
 
     /**
      * check the certain column is digit
-     * 
-     * @author ymli
-     * @param itemsBrowserContent
-     * @param col
-     * @return
      */
     public static boolean checkDigist(ArrayList<String[]> itemsBrowserContent, int col) {
         if (col == -1)
@@ -1256,11 +1171,6 @@ public class Util {
 
     /**
      * sort the ArrayList by col in direction of dir
-     * 
-     * @author ymli
-     * @param itemsBrowserContent
-     * @param col
-     * @param dir
      */
     public static void sortCollections(ArrayList<String[]> itemsBrowserContent, int col, String dir) {
         System.out.println(dir);
@@ -1298,11 +1208,6 @@ public class Util {
 
     /**
      * get the column number of the certain title in Array columns
-     * 
-     * @author ymli
-     * @param columns
-     * @param title
-     * @return
      */
     public static int getSortCol(String[] columns, String title) {
         int col = -1;
@@ -1312,14 +1217,12 @@ public class Util {
         return col;
     }
 
-    public static List<String> getElementValues(String parentPath, Node n) throws Exception {
+    public static List<String> getElementValues(Node n) throws Exception {
         List<String> l = new ArrayList<String>();
         NodeList list = n.getChildNodes();
         for (int i = 0; i < list.getLength(); i++) {
             Node node = list.item(i);
             if (node.getNodeType() == Node.ELEMENT_NODE) {
-                // String nName=node.getNodeName();
-                // String xPath=parentPath+"/"+nName;
                 String nValue = com.amalto.core.util.Util.getFirstTextNode(node, "."); //$NON-NLS-1$
                 if (!hasChildren(node)) {
                     l.add(nValue);
@@ -1375,9 +1278,7 @@ public class Util {
             }
         }
         WSWhereOr or = new WSWhereOr(conditions.toArray(new WSWhereItem[conditions.size()]));
-        WSWhereItem wi = new WSWhereItem(null, null, or);
-
-        return wi;
+        return new WSWhereItem(null, null, or);
     }
 
     public static WSWhereItem buildWhereItem(String criteria) throws Exception {
@@ -1392,7 +1293,7 @@ public class Util {
         else if (filters.length == 3)
             filterValues = filters[2];
         else {// more than 3 mean filterValues contains whitespace
-            StringBuffer sb = new StringBuffer();
+            StringBuilder sb = new StringBuilder();
             for (int i = 2; i < filters.length; i++) {
                 sb.append(filters[i]);
                 if (i < filters.length - 1) {
@@ -1434,10 +1335,10 @@ public class Util {
 
     public static String getForeignKeyList(int start, int limit, String value, String xpathForeignKey,
             String xpathInfoForeignKey, String fkFilter, boolean isCount) throws RemoteException, Exception {
-        if (xpathForeignKey == null)
+        if (xpathForeignKey == null) {
             return null;
-        String initXpathForeignKey = ""; //$NON-NLS-1$
-        initXpathForeignKey = getForeignPathFromPath(xpathForeignKey);
+        }
+        String initXpathForeignKey = getForeignPathFromPath(xpathForeignKey);
 
         WSWhereCondition whereCondition = getConditionFromPath(xpathForeignKey);
         WSWhereItem whereItem = null;
@@ -1480,9 +1381,9 @@ public class Util {
                 String queryKeyWord = isCount ? " CONTAINS " : " EQUALS "; //$NON-NLS-1$ //$NON-NLS-2$
                 String fkWhere = initXpathForeignKey + "/../*" + queryKeyWord + value; //$NON-NLS-1$ 
                 if (xpathInfoForeignKey.trim().length() > 0) {
-                    StringBuffer ids = new StringBuffer();
+                    StringBuilder ids = new StringBuilder();
                     String realXpathForeignKey = null; // In studio, ForeignKey = ConceptName, but not ConceptName/Id
-                    if (xpathForeignKey.indexOf("/") == -1) { //$NON-NLS-1$
+                    if (!xpathForeignKey.contains("/")) { //$NON-NLS-1$
                         String[] fks = getBusinessConceptKeys(initXpathForeignKey);
                         if (fks != null && fks.length > 0) {
                             realXpathForeignKey = fks[0];
@@ -1493,20 +1394,20 @@ public class Util {
                             }
                         }
                     }
-                    StringBuffer sb = new StringBuffer();
+                    StringBuilder sb = new StringBuilder();
                     if (isCount)
                         for (String fkInfo : xpathInfos) {
-                            sb.append((fkInfo.startsWith(".") ? convertAbsolutePath( //$NON-NLS-1$
+                            sb.append(fkInfo.startsWith(".") ? convertAbsolutePath( //$NON-NLS-1$
                                     (realXpathForeignKey != null && realXpathForeignKey.trim().length() > 0) ? realXpathForeignKey
                                             : xpathForeignKey, fkInfo)
-                                    : fkInfo)
-                                    + " CONTAINS " + value); //$NON-NLS-1$
+                                    : fkInfo).append(" CONTAINS ").append(value); //$NON-NLS-1$
                             sb.append(" OR "); //$NON-NLS-1$
                         }
-                    if (realXpathForeignKey != null)
+                    if (realXpathForeignKey != null) {
                         sb.append(ids.toString());
-                    else
-                        sb.append(xpathForeignKey + queryKeyWord + value);
+                    } else {
+                        sb.append(xpathForeignKey).append(queryKeyWord).append(value);
+                    }
                     fkWhere = sb.toString();
                 }
                 WSWhereItem wc = buildWhereItems(fkWhere);
@@ -1517,7 +1418,6 @@ public class Util {
                     whereItem = whereAnd;
                 }
             }
-
             // add the xPath Infos Path
             ArrayList<String> xPaths = new ArrayList<String>();
             for (String xpathInfo : xpathInfos) {
@@ -1532,7 +1432,6 @@ public class Util {
                 orderByPath = getFormatedFKInfo(xpathInfos[0].replaceFirst(initXpathForeignKey, initXpathForeignKey),
                         initXpathForeignKey);
             }
-
             // Run the query
             String[] results;
             if (!isCustomFilter(fkFilter)) {
@@ -1546,15 +1445,12 @@ public class Util {
                                 new WSStringArray(xPaths.toArray(new String[xPaths.size()])), getInjectedXpath(fkFilter), start,
                                 limit, orderByPath, null, true, whereItem)).getStrings();
             }
-
             if (results == null) {
                 results = new String[] { "0" }; // No result (count = 0) //$NON-NLS-1$
             }
-
             JSONObject json = new JSONObject();
             JSONArray rows = new JSONArray();
             json.put("rows", rows); //$NON-NLS-1$
-
             // add (?i) to incasesensitive
             // parse the results - each result contains the xPathInfo values, followed by the keys
             // the first row is totalCount
@@ -1614,13 +1510,13 @@ public class Util {
             // FIXME: why do you invoke this method twice
             if (isCount) {
                 Matcher matcher = TOTAL_COUNT_PATTERN.matcher(results[0]);
-                String count = "0"; //$NON-NLS-1$
                 if (matcher.matches()) {
-                    count = matcher.group(1);
+                    String count = matcher.group(1);
+                    json.put("count", count); //$NON-NLS-1$
                 } else {
                     throw new IllegalArgumentException("Total count '" + results[0] + "' does not match expected format"); //$NON-NLS-1$ //$NON-NLS-2$
                 }
-                json.put("count", count); //$NON-NLS-1$
+
             }
 
             return json.toString();
@@ -1638,11 +1534,8 @@ public class Util {
             String criteriaValue) throws Exception {
         Configuration config = Configuration.getInstance();
         String conceptName = getConceptFromPath(xpathForeignKey);
-
         boolean isCustom = isCustomFilter(fkFilter);
-
-        String count = "0";//$NON-NLS-1$
-
+        String count;
         if (!isCustom) {
             WSWhereCondition whereCondition = getConditionFromPath(xpathForeignKey);
             WSWhereItem whereItem = null;
@@ -1655,11 +1548,10 @@ public class Util {
                 whereItem = fkFilterWi;
 
             if (criteriaValue != null && criteriaValue.trim().length() > 0) {
-
                 List<WSWhereItem> condition = new ArrayList<WSWhereItem>();
-                if (whereItem != null)
+                if (whereItem != null) {
                     condition.add(whereItem);
-
+                }
                 String criteriaCondition;
                 if (MDMConfiguration.getDBType().getName().equals(EDBType.QIZX.getName())) {
                     criteriaCondition = conceptName + "/../* CONTAINS "; //$NON-NLS-1$
@@ -1668,14 +1560,12 @@ public class Util {
                 }
                 criteriaCondition += criteriaValue;
                 WSWhereItem wc = buildWhereItem(criteriaCondition);
-
                 condition.add(wc);
                 WSWhereAnd and = new WSWhereAnd(condition.toArray(new WSWhereItem[condition.size()]));
                 WSWhereItem wAnd = new WSWhereItem(null, and, null);
                 if (wAnd != null)
                     whereItem = wAnd;
             }
-
             count = getPort().count(new WSCount(new WSDataClusterPK(config.getCluster()), conceptName, whereItem,// null,
                     -1)).getValue();
         } else {
@@ -1685,15 +1575,11 @@ public class Util {
                     new WSCountItemsByCustomFKFilters(new WSDataClusterPK(config.getCluster()), conceptName, injectedXpath))
                     .getValue();
         }
-
         return count;
-
     }
 
     public static String getInjectedXpath(String fkFilter) {
-        String injectedXpath = null;
-        injectedXpath = fkFilter.substring(6);
-        return injectedXpath;
+        return fkFilter.substring(6);
     }
 
     public static boolean isCustomFilter(String fkFilter) {
@@ -1768,33 +1654,15 @@ public class Util {
      */
 
     public static Object getTypeValue(String lang, String type, String value, String format) throws ParseException {
-
         // time
         if (type.equals("date") && !value.equals("")) {//$NON-NLS-1$ //$NON-NLS-2$
-            String dataStr = value;
-            Calendar calendar = null;
+            Calendar calendar;
             try {
-                calendar = Date.parseDate(dataStr.trim()).toCalendar();
+                calendar = Date.parseDate(value.trim()).toCalendar();
             } catch (Exception ex) {
                 calendar = Date.parseDate(outputValidateDate(value, format)).toCalendar();
             }
-
             return calendar;
-            /*
-             * else if(type.equals("time")) return BigInteger.//Time.parseTime(value.trim());
-             */
-            /*
-             * else if(type.equals("dateTime")) return DateTime
-             */
-            // numberic
-            /*
-             * else if(type.equals("byte")||type.equals("short")||type.equals("int")
-             * ||type.equals("integer")||type.equals("long")||type.equals("float")||type.equals("double")){ Locale
-             * locale = new Locale(lang); NumberFormat instance = DecimalFormat.getNumberInstance(locale);
-             * instance.setParseIntegerOnly(false); return instance.parse(value);
-             * 
-             * }
-             */
         } else if (type.equals("dateTime") && !value.equals("")) { //$NON-NLS-1$ //$NON-NLS-2$
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); //$NON-NLS-1$
             Calendar dateTime = Calendar.getInstance();
@@ -1925,8 +1793,7 @@ public class Util {
         if (UpdateReportPOJO.OPERATION_TYPE_UPDATE.equals(operationType)) {
             Collection<UpdateReportItem> list = updatedPath.values();
             boolean isUpdate = false;
-            for (Iterator<UpdateReportItem> iter = list.iterator(); iter.hasNext();) {
-                UpdateReportItem item = iter.next();
+            for (UpdateReportItem item : list) {
                 String oldValue = item.getOldValue() == null ? "" : item.getOldValue(); //$NON-NLS-1$
                 String newValue = item.getNewValue() == null ? "" : item.getNewValue(); //$NON-NLS-1$
                 if (newValue.equals(oldValue))
@@ -1978,10 +1845,9 @@ public class Util {
 
         if (formats.startsWith(DATE_FORMAT_PREFIX)) {
             while (true) {
-                if (formatValue.indexOf(DATE_FORMAT_PREFIX) == -1) {
+                if (!formatValue.contains(DATE_FORMAT_PREFIX)) {
                     break;
                 }
-
                 String format = formatValue.substring(formatValue.indexOf(DATE_FORMAT_PREFIX),
                         formatValue.indexOf(DATE_FORMAT_PREFIX) + 3);
                 String valueStr = String.format(java.util.Locale.ENGLISH, format, date);
@@ -1995,18 +1861,16 @@ public class Util {
     }
 
     public static String convertAbsolutePath(String currentPath, String xpath) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         String[] ops = xpath.split("/"); //$NON-NLS-1$
         String[] eles = currentPath.split("/"); //$NON-NLS-1$
         int num = 0;
-
         if (xpath.startsWith("..")) { //$NON-NLS-1$
-            for (int i = 0; i < ops.length; i++) {
-                if (ops[i].equals("..")) { //$NON-NLS-1$
+            for (String op : ops) {
+                if (op.equals("..")) { //$NON-NLS-1$
                     num += 1;
                 }
             }
-
             for (int i = 0; i < eles.length - num; i++) {
                 sb.append(eles[i]);
                 sb.append("/"); //$NON-NLS-1$
@@ -2015,9 +1879,7 @@ public class Util {
             sb.append(eles[0]);
             sb.append("/"); //$NON-NLS-1$
         }
-
         sb.append(ops[ops.length - 1]);
-
         return sb.toString();
     }
 
@@ -2028,7 +1890,7 @@ public class Util {
         WSConceptKey key = getPort().getBusinessConceptKey(new WSGetBusinessConceptKey(new WSDataModelPK(model), concept));
         WSConceptKey copyKey = new WSConceptKey();
         copyKey.setFields((String[]) ArrayUtils.clone(key.getFields()));
-        copyKey.setSelector(new String(key.getSelector()));
+        copyKey.setSelector(key.getSelector());
 
         String[] keys = copyKey.getFields();
         for (int i = 0; i < keys.length; i++) {
@@ -2079,10 +1941,10 @@ public class Util {
 
     @Deprecated
     public static String getExceptionMessage(String message, String language) {
-        if (message == null || message.indexOf("<msg/>") != -1) //$NON-NLS-1$
+        if (message == null || message.contains("<msg/>")) //$NON-NLS-1$
             return ""; //$NON-NLS-1$
         // Message tip : "<msg>[EN:validate error][FR:validate error]</msg>"
-        if (message.indexOf("<msg>") != -1) { //$NON-NLS-1$
+        if (message.contains("<msg>")) { //$NON-NLS-1$
             int index = message.indexOf(language.toUpperCase() + ":"); //$NON-NLS-1$
             if (index != -1)
                 return message.substring(index + language.length() + 1, index + message.substring(index).indexOf("]")); //$NON-NLS-1$
diff --git a/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.java b/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.java
new file mode 100644
index 0000000..cf9a7a4
--- /dev/null
+++ b/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.java
@@ -0,0 +1,62 @@
+// ============================================================================
+//
+// Copyright (C) 2006-2013 Talend Inc. - www.talend.com
+//
+// This source code is available under agreement available at
+// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
+//
+// You should have received a copy of the agreement
+// along with this program; if not, write to Talend SA
+// 9 rue Pages 92150 Suresnes, France
+//
+// ============================================================================
+package com.amalto.webapp.core.util;
+
+import java.io.InputStream;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+import junit.framework.TestCase;
+
+import org.w3c.dom.Document;
+
+
+/**
+ * created by talend2 on 2013-6-13
+ * Detailled comment
+ *
+ */
+public class DataModelAccessorTest extends TestCase {
+    
+    private static final List<String> ROLES = Arrays.asList(new String[] { "System_Admin" }); //$NON-NLS-1$
+
+    public void testCheckRestoreAccessHelper() throws Exception {
+        String modelXSD = getXSDModel("DataModelAccessorTest.xsd"); //$NON-NLS-1$
+        assertFalse(DataModelAccessor.getInstance().checkRestoreAccessHelper(modelXSD, "M26_E01", ROLES)); //$NON-NLS-1$
+        assertTrue(DataModelAccessor.getInstance().checkRestoreAccessHelper(modelXSD, "M26_E02", ROLES)); //$NON-NLS-1$
+        assertFalse(DataModelAccessor.getInstance().checkRestoreAccessHelper(modelXSD, "M26_E03", ROLES)); //$NON-NLS-1$
+        assertFalse(DataModelAccessor.getInstance().checkRestoreAccessHelper(modelXSD, "M26_E04", ROLES)); //$NON-NLS-1$
+    }
+
+    public void testCheckReadAccessHelper() throws Exception {
+        String modelXSD = getXSDModel("DataModelAccessorTest.xsd"); //$NON-NLS-1$
+        assertTrue(DataModelAccessor.getInstance().checkReadAccessHelper(modelXSD, "M26_E01", ROLES)); //$NON-NLS-1$
+        assertTrue(DataModelAccessor.getInstance().checkReadAccessHelper(modelXSD, "M26_E02", ROLES)); //$NON-NLS-1$
+        assertFalse(DataModelAccessor.getInstance().checkReadAccessHelper(modelXSD, "M26_E03", ROLES)); //$NON-NLS-1$
+        assertFalse(DataModelAccessor.getInstance().checkReadAccessHelper(modelXSD, "M26_E04", ROLES)); //$NON-NLS-1$
+    }
+
+    private String getXSDModel(String filename) throws Exception {
+        InputStream is = getClass().getResourceAsStream(filename);
+        assertNotNull(is);
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        DocumentBuilder builder = factory.newDocumentBuilder();
+        Document doc = builder.parse(is);
+        String XSDModel = Util.nodeToString(doc);
+        return XSDModel;
+    }
+
+}
diff --git a/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.xsd b/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.xsd
new file mode 100644
index 0000000..e272350
--- /dev/null
+++ b/org.talend.mdm.webapp.core/test/com/amalto/webapp/core/util/DataModelAccessorTest.xsd
@@ -0,0 +1,85 @@
+<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+	<xsd:import namespace="http://www.w3.org/2001/XMLSchema" />
+	<xsd:element name="M26_E01">
+		<xsd:complexType>
+			<xsd:all>
+				<xsd:element name="subelement" type="xsd:string" />
+			</xsd:all>
+		</xsd:complexType>
+		<xsd:unique name="M26_E01">
+			<xsd:selector xpath="." />
+			<xsd:field xpath="subelement" />
+		</xsd:unique>
+	</xsd:element>
+	<xsd:element name="M26_E02">
+		<xsd:annotation>
+			<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+		</xsd:annotation>
+		<xsd:complexType>
+			<xsd:all>
+				<xsd:element name="subelement" type="xsd:string">
+					<xsd:annotation>
+						<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+					</xsd:annotation>
+				</xsd:element>
+			</xsd:all>
+		</xsd:complexType>
+		<xsd:unique name="M26_E02">
+			<xsd:selector xpath="." />
+			<xsd:field xpath="subelement" />
+		</xsd:unique>
+	</xsd:element>
+	<xsd:element name="M26_E03">
+		<xsd:annotation>
+			<xsd:appinfo source="X_Hide">System_Admin</xsd:appinfo>
+		</xsd:annotation>
+		<xsd:complexType>
+			<xsd:all>
+				<xsd:element name="subelement" type="xsd:string">
+					<xsd:annotation>
+						<xsd:appinfo source="X_Hide">System_Admin</xsd:appinfo>
+					</xsd:annotation>
+				</xsd:element>
+			</xsd:all>
+		</xsd:complexType>
+		<xsd:unique name="M26_E03">
+			<xsd:selector xpath="." />
+			<xsd:field xpath="subelement" />
+		</xsd:unique>
+	</xsd:element>
+	<xsd:element name="M26_E04">
+		<xsd:annotation>
+			<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+			<xsd:appinfo source="X_Hide">System_Admin</xsd:appinfo>
+		</xsd:annotation>
+		<xsd:complexType>
+			<xsd:all>
+				<xsd:element name="subelement" type="xsd:string">
+					<xsd:annotation>
+						<xsd:appinfo source="X_Write">System_Admin</xsd:appinfo>
+						<xsd:appinfo source="X_Hide">System_Admin</xsd:appinfo>
+					</xsd:annotation>
+				</xsd:element>
+			</xsd:all>
+		</xsd:complexType>
+		<xsd:unique name="M26_E04">
+			<xsd:selector xpath="." />
+			<xsd:field xpath="subelement" />
+		</xsd:unique>
+	</xsd:element>
+	<xsd:element name="M26_E05" type="M26_T01">
+		<xsd:unique name="M26_E05">
+			<xsd:selector xpath="." />
+			<xsd:field xpath="subelement" />
+		</xsd:unique>
+	</xsd:element>
+	<xsd:complexType name="M26_T01">
+		<xsd:all>
+			<xsd:element name="subelement" type="xsd:string">
+				<xsd:annotation>
+					<xsd:appinfo source="X_Hide">System_Admin</xsd:appinfo>
+				</xsd:annotation>
+			</xsd:element>
+		</xsd:all>
+	</xsd:complexType>
+</xsd:schema>
diff --git a/org.talend.mdm.webapp.journal/src/main/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtil.java b/org.talend.mdm.webapp.journal/src/main/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtil.java
index 8d60dfb..596ed74 100644
--- a/org.talend.mdm.webapp.journal/src/main/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtil.java
+++ b/org.talend.mdm.webapp.journal/src/main/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtil.java
@@ -12,10 +12,12 @@
 // ============================================================================
 package org.talend.mdm.webapp.journal.client.util;
 
+
 import org.talend.mdm.webapp.journal.shared.JournalGridModel;
 import org.talend.mdm.webapp.journal.shared.JournalParameters;
 
 
+
 /**
  * created by yjli on 2013-4-25
  * Detailled comment
@@ -32,10 +34,25 @@ public class JournalSearchUtil {
         parameter.setRevisionId(gridModel.getRevisionId());
         parameter.setIds(gridModel.getIds());
         parameter.setAction(action);
-        String[] id = gridModel.getKey().split("\\."); //$NON-NLS-1$
+        String[] id = parseKey(gridModel.getKey());
         parameter.setId(id);
         parameter.setAuth(isAuth);
         parameter.setOperationType(gridModel.getOperationType());
         return parameter;
     }
+    
+    private static String[] parseKey(String keyStr) {
+        String [] ids = keyStr.split("\\."); //$NON-NLS-1$
+        
+        if (keyStr.endsWith(".")) { //$NON-NLS-1$
+            String [] idsPlus = new String[ids.length+1];
+            for (int i=0; i < ids.length; i++) {
+                idsPlus[i] = ids[i];
+            }
+            idsPlus[ids.length] = ""; //$NON-NLS-1$
+            return idsPlus;
+        } else {
+            return ids;
+        }
+    }
 }
diff --git a/org.talend.mdm.webapp.journal/src/test/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtilTest.java b/org.talend.mdm.webapp.journal/src/test/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtilTest.java
index fbcaa35..1757d24 100644
--- a/org.talend.mdm.webapp.journal/src/test/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtilTest.java
+++ b/org.talend.mdm.webapp.journal/src/test/java/org/talend/mdm/webapp/journal/client/util/JournalSearchUtilTest.java
@@ -12,6 +12,7 @@
 // ============================================================================
 package org.talend.mdm.webapp.journal.client.util;
 
+import static org.junit.Assert.*;
 import junit.framework.TestCase;
 
 import org.talend.mdm.webapp.journal.shared.JournalGridModel;
@@ -24,28 +25,74 @@ import org.talend.mdm.webapp.journal.shared.JournalParameters;
  */
 public class JournalSearchUtilTest extends TestCase {
     
-    public void testBuildParameter() {
+    public void testBuildParameterWith_id_contains_dot() {
         String action = "current"; //$NON-NLS-1$
         boolean auth = true;
         JournalGridModel gridModel = new JournalGridModel();
         gridModel.setDataContainer("Product-Container"); //$NON-NLS-1$
         gridModel.setDataModel("Product-Model"); //$NON-NLS-1$
         gridModel.setEntity("Product-Entity"); //$NON-NLS-1$
-        gridModel.setOperationTime("1366863377513"); //$NON-NLS-1$
+        gridModel.setOperationTime("1381903894501"); //$NON-NLS-1$
         gridModel.setRevisionId("Head"); //$NON-NLS-1$
-        gridModel.setIds("356"); //$NON-NLS-1$
+        gridModel.setIds("genericUI.1381903894501"); //$NON-NLS-1$
         gridModel.setKey("3.5.6"); //$NON-NLS-1$
         
         JournalParameters parameter = JournalSearchUtil.buildParameter(gridModel, action, auth);
         assertEquals(parameter.getDataClusterName(), gridModel.getDataContainer());
         assertEquals(parameter.getDataModelName(), gridModel.getDataModel());
         assertEquals(parameter.getConceptName(), gridModel.getEntity());
+        assertEquals(parameter.getDate(), Long.parseLong(gridModel.getOperationTime()));
         assertEquals(parameter.getRevisionId(), gridModel.getRevisionId());
         assertEquals(parameter.getIds(), gridModel.getIds());
-        String[] id = gridModel.getKey().split("\\."); //$NON-NLS-1$
-        assertEquals(parameter.getId()[0], id[0]);
-        assertEquals(parameter.getId()[1], id[1]);
-        assertEquals(parameter.getId()[2], id[2]);
+        assertArrayEquals(parameter.getId(), new String[] {"3","5","6"});  //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$
+        assertEquals(parameter.getAction(), action);
+        assertEquals(parameter.isAuth(), auth);
+    }
+    
+    public void testBuildParameterWith_id_startsWith_dot() {
+        String action = "current"; //$NON-NLS-1$
+        boolean auth = true;
+        JournalGridModel gridModel = new JournalGridModel();
+        gridModel.setDataContainer("Product-Container"); //$NON-NLS-1$
+        gridModel.setDataModel("Product-Model"); //$NON-NLS-1$
+        gridModel.setEntity("Product-Entity"); //$NON-NLS-1$
+        gridModel.setOperationTime("1381903894501"); //$NON-NLS-1$
+        gridModel.setRevisionId("Head"); //$NON-NLS-1$
+        gridModel.setIds("genericUI.1381903894501"); //$NON-NLS-1$
+        gridModel.setKey(".3.5.6"); //$NON-NLS-1$
+        
+        JournalParameters parameter = JournalSearchUtil.buildParameter(gridModel, action, auth);
+        assertEquals(parameter.getDataClusterName(), gridModel.getDataContainer());
+        assertEquals(parameter.getDataModelName(), gridModel.getDataModel());
+        assertEquals(parameter.getConceptName(), gridModel.getEntity());
+        assertEquals(parameter.getDate(), Long.parseLong(gridModel.getOperationTime()));
+        assertEquals(parameter.getRevisionId(), gridModel.getRevisionId());
+        assertEquals(parameter.getIds(), gridModel.getIds());
+        assertArrayEquals(parameter.getId(), new String[] {"","3","5","6"});   //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$  //$NON-NLS-4$
+        assertEquals(parameter.getAction(), action);
+        assertEquals(parameter.isAuth(), auth);
+    }
+    
+    public void testBuildParameterWith_id_EndsWith_dot() {
+        String action = "current"; //$NON-NLS-1$
+        boolean auth = true;
+        JournalGridModel gridModel = new JournalGridModel();
+        gridModel.setDataContainer("Product-Container"); //$NON-NLS-1$
+        gridModel.setDataModel("Product-Model"); //$NON-NLS-1$
+        gridModel.setEntity("Product-Entity"); //$NON-NLS-1$
+        gridModel.setOperationTime("1381903894501"); //$NON-NLS-1$
+        gridModel.setRevisionId("Head"); //$NON-NLS-1$
+        gridModel.setIds("genericUI.1381903894501"); //$NON-NLS-1$
+        gridModel.setKey(".3.5.6."); //$NON-NLS-1$
+        
+        JournalParameters parameter = JournalSearchUtil.buildParameter(gridModel, action, auth);
+        assertEquals(parameter.getDataClusterName(), gridModel.getDataContainer());
+        assertEquals(parameter.getDataModelName(), gridModel.getDataModel());
+        assertEquals(parameter.getConceptName(), gridModel.getEntity());
+        assertEquals(parameter.getDate(), Long.parseLong(gridModel.getOperationTime()));
+        assertEquals(parameter.getRevisionId(), gridModel.getRevisionId());
+        assertEquals(parameter.getIds(), gridModel.getIds());
+        assertArrayEquals(parameter.getId(), new String[] {"","3","5","6",""});   //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$  //$NON-NLS-4$   //$NON-NLS-5$
         assertEquals(parameter.getAction(), action);
         assertEquals(parameter.isAuth(), auth);
     }
diff --git a/org.talend.mdm.webapp.openmdm/src/com/amalto/webapp/v3/xtentismdm/dwr/LoginDWR.java b/org.talend.mdm.webapp.openmdm/src/com/amalto/webapp/v3/xtentismdm/dwr/LoginDWR.java
index 0bdd6d9..5cc2ef0 100644
--- a/org.talend.mdm.webapp.openmdm/src/com/amalto/webapp/v3/xtentismdm/dwr/LoginDWR.java
+++ b/org.talend.mdm.webapp.openmdm/src/com/amalto/webapp/v3/xtentismdm/dwr/LoginDWR.java
@@ -28,51 +28,44 @@ import com.amalto.webapp.util.webservices.WSUniversePKArray;
 import com.amalto.webapp.util.webservices.XtentisPort;
 
 public class LoginDWR {
-    
-    /**
-     * if the session of login page invalidate
-     */
+
+    private static final String SESSION_TIME_OUT = "sessionTimeOut"; //$NON-NLS-1$
+
+    private static final String HEAD = "HEAD"; //$NON-NLS-1$
+
+    private static final String REGEX = ".*"; //$NON-NLS-1$
+
     public boolean isTimeOut() {
-       boolean timeout = false;
-       WebContext ctx = WebContextFactory.get();
-       
-       if(ctx.getSession(false) == null) {
-          return true;
-       }
-       
-       return timeout;
+        boolean timeout = false;
+        WebContext ctx = WebContextFactory.get();
+        return ctx.getSession(false) == null || timeout;
     }
-    
-    public String[] getUniverseNames() throws XtentisWebappException {
 
+    public String[] getUniverseNames() throws XtentisWebappException {
         List<String> universeNames = new ArrayList<String>();
-        universeNames.add("HEAD"); //$NON-NLS-1$
+        universeNames.add(HEAD);
         try {
             if (com.amalto.core.util.Util.isEnterprise()) {
                 XtentisPort port = Util.getPort(null, null);
-                WSUniversePKArray pks = port.getUniversePKs(new WSGetUniversePKs(".*")); //$NON-NLS-1$
+                WSUniversePKArray pks = port.getUniversePKs(new WSGetUniversePKs(REGEX));
                 if (pks != null) {
                     WSUniversePK[] wsUniversePKs = pks.getWsUniversePK();
                     if (wsUniversePKs != null && wsUniversePKs.length > 0) {
-                        for (int i = 0; i < wsUniversePKs.length; i++) {
-                            universeNames.add(wsUniversePKs[i].getPk());
+                        for (WSUniversePK wsUniversePK : wsUniversePKs) {
+                            universeNames.add(wsUniversePK.getPk());
                         }
                     }
                 }
             }
-
         } catch (Exception e) {
-            e.printStackTrace();
             throw new XtentisWebappException(e);
         }
         WebContext ctx = WebContextFactory.get();
         HttpSession session = ctx.getSession(false);
         if (session != null) {
-            session.setAttribute("sessionTimeOut", session.getMaxInactiveInterval()); //$NON-NLS-1$
+            session.setAttribute(SESSION_TIME_OUT, session.getMaxInactiveInterval());
             session.setMaxInactiveInterval(-1);
         }
-
         return universeNames.toArray(new String[universeNames.size()]);
-
     }
 }
diff --git a/org.talend.mdm.webapp.recyclebin/src/main/java/org/talend/mdm/webapp/recyclebin/server/actions/RecycleBinAction.java b/org.talend.mdm.webapp.recyclebin/src/main/java/org/talend/mdm/webapp/recyclebin/server/actions/RecycleBinAction.java
index 1bd21d8..1770207 100644
--- a/org.talend.mdm.webapp.recyclebin/src/main/java/org/talend/mdm/webapp/recyclebin/server/actions/RecycleBinAction.java
+++ b/org.talend.mdm.webapp.recyclebin/src/main/java/org/talend/mdm/webapp/recyclebin/server/actions/RecycleBinAction.java
@@ -31,6 +31,7 @@ import org.talend.mdm.commmon.metadata.MetadataRepository;
 import org.talend.mdm.webapp.base.client.exception.ServiceException;
 import org.talend.mdm.webapp.base.client.model.BasePagingLoadConfigImpl;
 import org.talend.mdm.webapp.base.client.model.ItemBasePageLoadResult;
+import org.talend.mdm.webapp.base.server.util.CommonUtil;
 import org.talend.mdm.webapp.recyclebin.client.RecycleBinService;
 import org.talend.mdm.webapp.recyclebin.shared.ItemsTrashItem;
 import org.talend.mdm.webapp.recyclebin.shared.NoPermissionException;
@@ -48,17 +49,18 @@ import com.amalto.core.util.Messages;
 import com.amalto.core.util.MessagesFactory;
 import com.amalto.core.util.SynchronizedNow;
 import com.amalto.webapp.core.dmagent.SchemaWebAgent;
+import com.amalto.webapp.core.util.DataModelAccessor;
 import com.amalto.webapp.core.util.Util;
 import com.amalto.webapp.core.util.Webapp;
+import com.amalto.webapp.util.webservices.WSConceptKey;
 import com.amalto.webapp.util.webservices.WSDataClusterPK;
-import com.amalto.webapp.util.webservices.WSDataModel;
 import com.amalto.webapp.util.webservices.WSDataModelPK;
 import com.amalto.webapp.util.webservices.WSDroppedItem;
 import com.amalto.webapp.util.webservices.WSDroppedItemPK;
 import com.amalto.webapp.util.webservices.WSDroppedItemPKArray;
 import com.amalto.webapp.util.webservices.WSExistsItem;
 import com.amalto.webapp.util.webservices.WSFindAllDroppedItemsPKs;
-import com.amalto.webapp.util.webservices.WSGetDataModel;
+import com.amalto.webapp.util.webservices.WSGetBusinessConceptKey;
 import com.amalto.webapp.util.webservices.WSItemPK;
 import com.amalto.webapp.util.webservices.WSLoadDroppedItem;
 import com.amalto.webapp.util.webservices.WSRecoverDroppedItem;
@@ -101,9 +103,6 @@ public class RecycleBinAction implements RecycleBinService {
                 String modelName = getModelNameFromConceptXML(conceptXML);
 
                 if (modelName != null) {
-                    WSDataModel model = null;
-                    String modelXSD = null;
-
                     // For enterprise version we check the user roles first, if one user don't have read permission on a
                     // DataModel Object, then ignore it
                     if (Webapp.INSTANCE.isEnterpriseVersion()
@@ -111,23 +110,18 @@ public class RecycleBinAction implements RecycleBinService {
                         continue;
                     }
 
-                    model = Util.getPort().getDataModel(new WSGetDataModel(new WSDataModelPK(modelName)));
-
-                    if (model != null) {
-                        modelXSD = model.getXsdSchema();
-                        if (modelXSD != null && modelXSD.trim().length() > 0) {
-                            if (!repositoryMap.containsKey(modelName)) {
-                                MetadataRepository repository = new MetadataRepository();
-                                InputStream is = new ByteArrayInputStream(modelXSD.getBytes("UTF-8")); //$NON-NLS-1$
-                                repository.load(is);
-                                repositoryMap.put(modelName, repository);
-                            }
+                    String modelXSD = DataModelAccessor.getInstance().getDataModelXSD(modelName);
+                    if (modelXSD != null && modelXSD.trim().length() > 0) {
+                        if (!repositoryMap.containsKey(modelName)) {
+                            MetadataRepository repository = new MetadataRepository();
+                            InputStream is = new ByteArrayInputStream(modelXSD.getBytes("UTF-8")); //$NON-NLS-1$
+                            repository.load(is);
+                            repositoryMap.put(modelName, repository);
                         }
                     }
 
                     if (!Webapp.INSTANCE.isEnterpriseVersion()
-                            || (modelXSD != null && org.talend.mdm.webapp.recyclebin.server.actions.Util.checkReadAccess(
-                                    modelXSD, conceptName))) {
+                            || (DataModelAccessor.getInstance().checkReadAccess(modelName, conceptName))) {
                         ItemsTrashItem item = new ItemsTrashItem();
                         item = WS2POJO(wsitem, repositoryMap.get(modelName), (String) load.get("language")); //$NON-NLS-1$
                         li.add(item);
@@ -211,7 +205,9 @@ public class RecycleBinAction implements RecycleBinService {
         try {
             Locale locale = new Locale(language);
             // WSDroppedItemPK
-            String[] ids1 = ids.split("\\.");//$NON-NLS-1$
+            WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                    new WSGetBusinessConceptKey(new WSDataModelPK(modelName), conceptName));
+            String[] ids1 = CommonUtil.extractIdWithDots(key.getFields(), ids);
             String outputErrorMessage = com.amalto.core.util.Util.beforeDeleting(clusterName, conceptName, ids1);
 
             String message = null;
@@ -275,19 +271,13 @@ public class RecycleBinAction implements RecycleBinService {
     public void recoverDroppedItem(String clusterName, String modelName, String partPath, String revisionId, String conceptName,
             String ids) throws ServiceException {
         try {
-            if (modelName != null) {
-                WSDataModel model = Util.getPort().getDataModel(new WSGetDataModel(new WSDataModelPK(modelName)));
-                if (model != null) {
-                    String modelXSD = model.getXsdSchema();
-
-                    if (Webapp.INSTANCE.isEnterpriseVersion()
-                            && !org.talend.mdm.webapp.recyclebin.server.actions.Util.checkRestoreAccess(modelXSD, conceptName)) {
-                        throw new NoPermissionException();
-                    }
-                }
+            if (Webapp.INSTANCE.isEnterpriseVersion()
+                    && !DataModelAccessor.getInstance().checkRestoreAccess(modelName, conceptName)) {
+                throw new NoPermissionException();
             }
-
-            String[] ids1 = ids.split("\\.");//$NON-NLS-1$
+            WSConceptKey key = CommonUtil.getPort().getBusinessConceptKey(
+                    new WSGetBusinessConceptKey(new WSDataModelPK(modelName), conceptName));
+            String[] ids1 = CommonUtil.extractIdWithDots(key.getFields(), ids);
             WSDataClusterPK wddcpk = new WSDataClusterPK(clusterName);
             WSItemPK wdipk = new WSItemPK(wddcpk, conceptName, ids1);
             WSDroppedItemPK wsdipk = new WSDroppedItemPK(wdipk, partPath, revisionId);
diff --git a/org.talend.mdm.webapp.viewbrowser/src/com/amalto/webapp/v3/viewbrowser/servlet/ViewRemotePaging.java b/org.talend.mdm.webapp.viewbrowser/src/com/amalto/webapp/v3/viewbrowser/servlet/ViewRemotePaging.java
index 7f350ea..798f659 100644
--- a/org.talend.mdm.webapp.viewbrowser/src/com/amalto/webapp/v3/viewbrowser/servlet/ViewRemotePaging.java
+++ b/org.talend.mdm.webapp.viewbrowser/src/com/amalto/webapp/v3/viewbrowser/servlet/ViewRemotePaging.java
@@ -149,7 +149,7 @@ public class ViewRemotePaging extends HttpServlet {
                         results[i] = "<result>" + results[i] + "</result>"; //$NON-NLS-1$ //$NON-NLS-2$
                     }
                     Element root = Util.parse(results[i]).getDocumentElement();
-                    list = Util.getElementValues("/result", root); //$NON-NLS-1$
+                    list = Util.getElementValues(root);
                 }
                 String[] elements = list.toArray(new String[list.size()]);
                 // end
