diff --git a/org.talend.repository/src/main/java/messages.properties b/org.talend.repository/src/main/java/messages.properties
index 8251c9e..61f79a0 100644
--- a/org.talend.repository/src/main/java/messages.properties
+++ b/org.talend.repository/src/main/java/messages.properties
@@ -495,6 +495,10 @@ LoginComposite.buttons.changeButton=Change
 LoginComposite.label.workspace=Workspace
 LoginComposite.NewCreate=Create...
 LoginComposite.NewImport=Import...
+LoginComposite.updateArchiva=Update is required,please click the button to update.
+LoginComposite.archivaFailed=Update site does not work.
+LoginComposite.archivaFinish=Update finished,need to restart.
+LoginComposite.archivaJarLost=The javax.ws.rs-api-2.0-m10.jar is required to use the Update Site functionality.
 TOSLoginComposite.welcomeTitle=Welcome to {0}.Please select an existing \nproject to start work,or create a new one.
 TOSLoginComposite.projectLabel=Project:
 TOSLoginComposite.openButton=Open
diff --git a/org.talend.repository/src/main/java/org/talend/repository/ui/login/LoginComposite.java b/org.talend.repository/src/main/java/org/talend/repository/ui/login/LoginComposite.java
index 05a9782..d32364b 100644
--- a/org.talend.repository/src/main/java/org/talend/repository/ui/login/LoginComposite.java
+++ b/org.talend.repository/src/main/java/org/talend/repository/ui/login/LoginComposite.java
@@ -30,6 +30,7 @@ import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.jobs.IJobChangeEvent;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.core.runtime.jobs.JobChangeAdapter;
+import org.eclipse.jface.dialogs.IDialogConstants;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -80,6 +81,7 @@ import org.osgi.service.prefs.BackingStoreException;
 import org.talend.commons.exception.BusinessException;
 import org.talend.commons.exception.LoginException;
 import org.talend.commons.exception.PersistenceException;
+import org.talend.commons.exception.SystemException;
 import org.talend.commons.exception.WarningException;
 import org.talend.commons.ui.runtime.exception.ExceptionHandler;
 import org.talend.commons.ui.runtime.exception.MessageBoxExceptionHandler;
@@ -295,6 +297,8 @@ public class LoginComposite extends Composite {
 
     private static Logger log = Logger.getLogger(LoginComposite.class);
 
+    private String archivaErrorMsg = "";
+
     /**
      * Constructs a new LoginComposite.
      * 
@@ -374,6 +378,40 @@ public class LoginComposite extends Composite {
         }
     }
 
+    private void updateArchivaErrorButton() {
+        iconLabel.setImage(LOGIN_WARNING_IMAGE);
+        onIconLabel.setImage(LOGIN_WARNING_IMAGE);
+        colorComposite.setBackground(YELLOW_COLOR);
+        onIconLabel.setBackground(colorComposite.getBackground());
+        statusLabel.setText(Messages.getString("LoginComposite.archivaFailed")); //$NON-NLS-1$ //, the third party jar is required,please install it.
+        statusLabel.setBackground(YELLOW_COLOR);
+        statusLabel.setForeground(WHITE_COLOR);
+        Font font = new Font(null, LoginComposite.FONT_ARIAL, 9, SWT.BOLD);// Arial courier
+        statusLabel.setFont(font);
+        openProjectBtn.setEnabled(true);
+        updateBtn.setVisible(true);
+        updateBtn.setEnabled(true);
+        updateBtn.setText("Details");
+    }
+
+    /**
+     * Getter for archivaErrorMsg.
+     * 
+     * @return the archivaErrorMsg
+     */
+    public String getArchivaErrorMsg() {
+        return this.archivaErrorMsg;
+    }
+
+    /**
+     * Sets the archivaErrorMsg.
+     * 
+     * @param archivaErrorMsg the archivaErrorMsg to set
+     */
+    public void setArchivaErrorMsg(String archivaErrorMsg) {
+        this.archivaErrorMsg = archivaErrorMsg;
+    }
+
     private void initConnection() {
         if (storedConnections == null || storedConnections.size() == 0) {
             getConnection();
@@ -1061,7 +1099,6 @@ public class LoginComposite extends Composite {
         updateBtnformData.right = new FormAttachment(restartBut, -5);
         updateBtnformData.bottom = new FormAttachment(100, 0);
         updateBtn.setLayoutData(updateBtnformData);// new GridData(GridData.FILL_HORIZONTAL)
-
     }
 
     private void createTisRepositoryArea(Composite parent) {
@@ -1714,36 +1751,57 @@ public class LoginComposite extends Composite {
             public void widgetSelected(SelectionEvent e) {
                 // install and update all patches;
                 try {
-                    ICoreTisService tisService = (ICoreTisService) GlobalServiceRegister.getDefault().getService(
-                            ICoreTisService.class);
-                    afterUpdate = false;
-                    if (tisService != null) {
-                        JSONObject archivaProperties = getArchivaServicesProperties(getAdminURL());
-                        String archivaServicesURL = archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY)
-                                + ARCHIVA_SERVICES_SEGMENT;
-                        String repository = archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
-                        String username = archivaProperties.getString(ARCHIVA_USER);
-                        String password = archivaProperties.getString(ARCHIVA_USER_PWD);
-                        List<String> repositories = new ArrayList<String>();
-                        // if no repository return,just use a empty repositories array
-                        if (repository != null) {
-                            repositories.add(repository);
+                    if (updateBtn.getText().equals("update")) {
+                        ICoreTisService tisService = (ICoreTisService) GlobalServiceRegister.getDefault().getService(
+                                ICoreTisService.class);
+                        afterUpdate = false;
+                        if (tisService != null) {
+                            JSONObject archivaProperties = getArchivaServicesProperties(getAdminURL());
+                            String archivaServicesURL = archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY)
+                                    + ARCHIVA_SERVICES_SEGMENT;
+                            String repository = archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
+                            String username = archivaProperties.getString(ARCHIVA_USER);
+                            String password = archivaProperties.getString(ARCHIVA_USER_PWD);
+                            List<String> repositories = new ArrayList<String>();
+                            // if no repository return,just use a empty repositories array
+                            if (repository != null) {
+                                repositories.add(repository);
+                            }
+                            tisService.downLoadAndInstallUpdateSites(archivaServicesURL, username, password, updateSiteToInstall,
+                                    repositories);
+                            afterUpdate = true;
+                            tisService.setNeedResartAfterUpdate(afterUpdate);
+                            updateSiteToInstall.clear();
                         }
-                        tisService.downLoadAndInstallUpdateSites(archivaServicesURL, username, password, updateSiteToInstall,
-                                repositories);
-                        afterUpdate = true;
-                        tisService.setNeedResartAfterUpdate(afterUpdate);
-                        updateSiteToInstall.clear();
+                        // need to relauch the studio automaticlly after updating
+                        isRestart = true;
+                        perReader.saveLastConnectionBean(getConnection());
+                        dialog.okPressed();
+                    } else {
+                        String[] buttons = new String[] { IDialogConstants.OK_LABEL };
+                        String message = Messages.getString("LoginComposite.archivaJarLost");
+                        ArchivaErrorDialog archivaDialog = new ArchivaErrorDialog(getShell(), "Warning", null, message,
+                                MessageDialog.WARNING, buttons, 0);
+                        archivaDialog.open();
                     }
-                    // need to relauch the studio automaticlly after updating
-                    isRestart = true;
-                    perReader.saveLastConnectionBean(getConnection());
-                    dialog.okPressed();
                 } catch (Exception e1) {
                     ExceptionHandler.process(e1);
                 }
             }
         });
+        // archivaErrorButton.addSelectionListener(new SelectionAdapter() {
+        //
+        // @Override
+        // public void widgetSelected(SelectionEvent e) {
+        // String[] buttons = new String[] { IDialogConstants.OK_LABEL };
+        // String message = "The javax.ws.rs-api-2.0-m10.jar is required to use the Update Site functionality.";
+        // ArchivaErrorDialog archivaDialog = new ArchivaErrorDialog(getShell(), "Warning", LOGIN_CORRECT_IMAGE,
+        // message,
+        // HORIZONTAL_SPACE, buttons, HORIZONTAL_FOUR_SPACE);
+        //
+        // archivaDialog.open();
+        // }
+        // });
     }
 
     private void validateUpdate() throws JSONException {
@@ -1785,7 +1843,7 @@ public class LoginComposite extends Composite {
                         onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
                         colorComposite.setBackground(RED_COLOR);
                         onIconLabel.setBackground(colorComposite.getBackground());
-                        statusLabel.setText("Update finished,need to restart"); //$NON-NLS-1$
+                        statusLabel.setText(Messages.getString("LoginComposite.archivaFinish")); //$NON-NLS-1$
                         statusLabel.setBackground(RED_COLOR);
                         statusLabel.setForeground(WHITE_COLOR);
                         Font font = new Font(null, LoginComposite.FONT_ARIAL, 9, SWT.BOLD);// Arial courier
@@ -1800,7 +1858,7 @@ public class LoginComposite extends Composite {
                         onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
                         colorComposite.setBackground(RED_COLOR);
                         onIconLabel.setBackground(colorComposite.getBackground());
-                        statusLabel.setText("Update is required,please click the button to update"); //$NON-NLS-1$
+                        statusLabel.setText(Messages.getString("LoginComposite.updateArchiva")); //$NON-NLS-1$
                         statusLabel.setBackground(RED_COLOR);
                         statusLabel.setForeground(WHITE_COLOR);
                         Font font = new Font(null, LoginComposite.FONT_ARIAL, 9, SWT.BOLD);// Arial courier
@@ -1808,18 +1866,21 @@ public class LoginComposite extends Composite {
                         openProjectBtn.setEnabled(!needUpdate);
                         updateBtn.setVisible(needUpdate);
                         updateBtn.setEnabled(needUpdate);
+                        updateBtn.setText("update");
                     }
                 }
             } else {
                 updateBtn.setVisible(false);
                 updateBtn.setEnabled(false);
+
             }
         } catch (PersistenceException e) {
             ExceptionHandler.process(e);
         } catch (LoginException e) {
             ExceptionHandler.process(e);
+        } catch (SystemException e) {
+            updateArchivaErrorButton();
         }
-
     }
 
     private String getAdminURL() {
@@ -1847,7 +1908,8 @@ public class LoginComposite extends Composite {
     }
 
     // method need update is used to control the status of updateBtn
-    private boolean needUpdate(String username, String password, String archivaURL, List<String> repositories) {
+    private boolean needUpdate(String username, String password, String archivaURL, List<String> repositories)
+            throws SystemException {
 
         ICoreTisService tisService = (ICoreTisService) GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
         if (tisService != null) {
@@ -2703,4 +2765,44 @@ public class LoginComposite extends Composite {
         }
         return fontsize;
     }
+
+    private static class ArchivaErrorDialog extends MessageDialog {
+
+        public ArchivaErrorDialog(Shell parentShell, String dialogTitle, Image dialogTitleImage, String dialogMessage,
+                int dialogImageType, String[] dialogButtonLabels, int defaultIndex) {
+            super(parentShell, dialogTitle, dialogTitleImage, dialogMessage, dialogImageType, dialogButtonLabels, defaultIndex);
+        }
+
+        @Override
+        protected Composite createCustomArea(Composite parent) {
+            Composite helpComposite = new Composite(parent, SWT.NONE);
+            GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
+            gridData.minimumHeight = 45;
+            helpComposite.setLayoutData(gridData);
+            GC gc = new GC(helpComposite);
+            String linkLabel = "How to install a jar"; //$NON-NLS-1$
+            Point linkSize = gc.stringExtent(linkLabel);
+            Font font = new Font(null, LoginComposite.FONT_ARIAL, 9, SWT.NORMAL);
+            Hyperlink link = new Hyperlink(helpComposite, SWT.NONE);
+            link.setText(linkLabel);
+            link.setSize(linkSize.x + 15, 30);
+            link.setBackground(helpComposite.getBackground());
+            link.setUnderlined(true);
+            link.setFont(font);
+
+            GridData gridData1 = new GridData(SWT.FILL, SWT.CENTER, true, false);
+            gridData1.widthHint = this.getMinimumMessageWidth();
+            link.setLayoutData(gridData1);
+            gc.dispose();
+            link.addHyperlinkListener(new HyperlinkAdapter() {
+
+                @Override
+                public void linkActivated(HyperlinkEvent e) {
+                    String url = "https://help.talend.com/pages/viewpage.action?pageId=14230347";
+                    TalendBrowserLaunchHelper.openURL(url);
+                }
+            });
+            return helpComposite;
+        }
+    }
 }
