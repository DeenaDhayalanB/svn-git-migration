diff --git a/org.talend.designer.core/src/main/java/org/talend/designer/core/ui/editor/properties/controllers/WSDL2JAVAController.java b/org.talend.designer.core/src/main/java/org/talend/designer/core/ui/editor/properties/controllers/WSDL2JAVAController.java
index 2e089d3..8b9d64d 100644
--- a/org.talend.designer.core/src/main/java/org/talend/designer/core/ui/editor/properties/controllers/WSDL2JAVAController.java
+++ b/org.talend.designer.core/src/main/java/org/talend/designer/core/ui/editor/properties/controllers/WSDL2JAVAController.java
@@ -57,6 +57,7 @@ import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;
+import org.talend.commons.exception.LoginException;
 import org.talend.commons.exception.PersistenceException;
 import org.talend.commons.exception.SystemException;
 import org.talend.commons.ui.runtime.exception.ExceptionHandler;
@@ -91,6 +92,7 @@ import org.talend.designer.core.model.utils.emf.talendfile.RoutinesParameterType
 import org.talend.designer.core.ui.editor.nodes.Node;
 import org.talend.designer.runprocess.IRunProcessService;
 import org.talend.repository.ProjectManager;
+import org.talend.repository.RepositoryWorkUnit;
 import org.talend.repository.model.IProxyRepositoryFactory;
 import org.talend.repository.model.IRepositoryService;
 import org.talend.repository.ui.views.IRepositoryView;
@@ -244,10 +246,12 @@ public class WSDL2JAVAController extends AbstractElementPropertySectionControlle
      * org.talend.designer.core.ui.editor.properties2.editors.AbstractElementPropertySectionController#createCommand()
      */
     private void generateJavaFile() {
+        
+        final IProxyRepositoryFactory factory = ProxyRepositoryFactory.getInstance();
+        RepositoryWorkUnit<Object> workUnit = new RepositoryWorkUnit<Object>("", this) {//$NON-NLS-1$
 
-        final IWorkspaceRunnable op = new IWorkspaceRunnable() {
-
-            public void run(IProgressMonitor monitor) throws CoreException {
+            @Override
+            protected void run() throws  PersistenceException {
                 Node node = (Node) elem;
 
                 IProcess process = node.getProcess();
@@ -382,30 +386,9 @@ public class WSDL2JAVAController extends AbstractElementPropertySectionControlle
                 // }
                 FilesUtils.removeFolder(dir, true);
             }
-
         };
-        IRunnableWithProgress iRunnableWithProgress = new IRunnableWithProgress() {
-
-            public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
-                IWorkspace workspace = ResourcesPlugin.getWorkspace();
-                try {
-                    ISchedulingRule schedulingRule = workspace.getRoot();
-                    // the update the project files need to be done in the workspace runnable to avoid all
-                    // notification
-                    // of changes before the end of the modifications.
-                    workspace.run(op, schedulingRule, IWorkspace.AVOID_UPDATE, monitor);
-                } catch (CoreException e) {
-                    // throw new InvocationTargetException(e);
-                }
-            }
-        };
-        try {
-            PlatformUI.getWorkbench().getProgressService().run(true, true, iRunnableWithProgress);
-        } catch (InvocationTargetException e) {
-            ExceptionHandler.process(e);
-        } catch (InterruptedException e) {
-            ExceptionHandler.process(e);
-        }
+        workUnit.setAvoidUnloadResources(true);
+        factory.executeRepositoryWorkUnit(workUnit);
     }
 
     private void refreshProject() {
