diff --git a/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/StandardQueryHandler.java b/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/StandardQueryHandler.java
index acfd8b5..35b0c9f 100644
--- a/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/StandardQueryHandler.java
+++ b/org.talend.mdm.core/src/com/amalto/core/storage/hibernate/StandardQueryHandler.java
@@ -124,10 +124,14 @@ class StandardQueryHandler extends AbstractQueryHandler {
 
     @Override
     public StorageResults visit(Join join) {
-        FieldMetadata fieldMetadata = join.getRightField().getFieldMetadata();
-
-        // Choose the right join type
-        String rightTableName = fieldMetadata.getContainingType().getName();
+        FieldMetadata rightField = join.getRightField().getFieldMetadata();
+        FieldMetadata leftField = join.getLeftField().getFieldMetadata();
+        // Choose the right join alias
+        String rightAlias = rightField.getContainingType().getName();
+        if (rightField.getContainingType().getName().equals(leftField.getContainingType().getName())) {
+            // TMDM-7170: use a new alias for recursive relations
+            rightAlias = createNewAlias();
+        }
         int joinType;
         switch (join.getJoinType()) {
         case INNER:
@@ -148,20 +152,20 @@ class StandardQueryHandler extends AbstractQueryHandler {
         if (path.isEmpty()) {
             String destinationFieldName;
             try {
-                destinationFieldName = fieldMetadata.getName();
+                destinationFieldName = rightField.getName();
             } catch (Exception e) {
                 // Ignored
                 if (LOGGER.isDebugEnabled()) {
                     LOGGER.debug("Exception occurred during exception creation", e);
                 }
-                destinationFieldName = String.valueOf(fieldMetadata);
+                destinationFieldName = String.valueOf(rightField);
             }
             throw new IllegalArgumentException("Join to '" + destinationFieldName + "' (in type '"
-                    + fieldMetadata.getContainingType().getName() + "') is invalid since there is no path from '"
+                    + rightField.getContainingType().getName() + "') is invalid since there is no path from '"
                     + mainType.getName() + "' to this field.");
         }
         // Generate all necessary joins to go from main type to join right table.
-        generateJoinPath(rightTableName, joinType, path);
+        generateJoinPath(rightAlias, joinType, path);
         return null;
     }
 
@@ -170,7 +174,7 @@ class StandardQueryHandler extends AbstractQueryHandler {
         String previousAlias = mainType.getName();
         while (pathIterator.hasNext()) {
             FieldMetadata nextField = pathIterator.next();
-            String newAlias = "a" + aliasCount++; //$NON-NLS-1$
+            String newAlias = createNewAlias();
             // TODO One interesting improvement here: can add conditions on rightTable when defining join.
             if (pathIterator.hasNext()) {
                 if (!joinFieldsToAlias.containsKey(nextField)) {
@@ -317,7 +321,7 @@ class StandardQueryHandler extends AbstractQueryHandler {
             if (next instanceof ReferenceFieldMetadata) {
                 alias = joinFieldsToAlias.get(next);
                 if (alias == null) {
-                    alias = "a" + aliasCount++; //$NON-NLS-1$
+                    alias = createNewAlias();
                     joinFieldsToAlias.put(next, alias);
                     int joinType;
                     // TMDM-4866: Do a left join in case FK is not mandatory.
@@ -334,6 +338,10 @@ class StandardQueryHandler extends AbstractQueryHandler {
         return previousAlias;
     }
 
+    private String createNewAlias() {
+        return "a" + aliasCount++; //$NON-NLS-1$
+    }
+
     @Override
     public StorageResults visit(Count count) {
         projectionList.add(Projections.rowCount());
